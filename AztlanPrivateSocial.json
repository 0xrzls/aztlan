{
  "transpiled": true,
  "noir_version": "1.0.0-beta.5+0000000000000000000000000000000000000000",
  "name": "AztlanPrivateSocial",
  "functions": [
    {
      "name": "change_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "9981700386366515877": {
            "error_kind": "string",
            "string": "Invalid admin address"
          },
          "15371982489698173836": {
            "error_kind": "string",
            "string": "Only admin"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw4AAgABJiUAAACVHgIAAgEnAgMAAy8KAAMABAoqAgQFJAIABQAAAG0lAAAAvicCAgAACioBAgQnAgIBAAoqBAIFJAIABQAAAI4lAAAA0DAKAAEAAyYoAIAEBHgADQAAAIAEgAMkAIADAAAAvSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEF1VRAoU/8A4w8BAIBJioBAAEFioYfnbfBaqU8BAIBJg==",
      "debug_symbols": "nZTbioMwEIbfJdde5DSZia9SSrFtWgSxxerCUnz3HYvxsJCw7I0zScyX/H+GeYtrOA/3U93eHi9RHt7i3NVNU99PzeNS9fWj5dm3kNMHQZSmEMQD4gCf4JUoPQf3CUraOXpRKsWJsjGZZiQn2sYkzhicE6s5ceNYiHj6qe9CmA7fXIcv+ay60PaibIemKcRX1Qyfn17Pqv3Evup4lZGhvXJk4K1uwpSNxbpbpreC83E3oKQFAHuCShMsGTsTLFm9EJzfEXSaQIB6JhAQpgg5FWhwUQGQUmHTBH4/mAlK4WqkQr1DQBqBQNEIdBJSMlyGYMhEgtVJKzEnw6BbdFjp/2Wm3piJKTOzBPKRQBsdv4sqg/AQZXivFoDGv9+B3KKCyCXvkKlL9k9FL63GZE0ok6ltaaIQkkCp51CZ0kQy0U32VSYRkK1uWssbtNtBjjyqLnW3a4XjROvq6tyEeXgb2stmtf9+xpXYSp/d4xKuQxcm0tpPFX8PmgpjjlN/5AF3DOOO43T0Dw==",
      "brillig_names": [
        "change_admin"
      ]
    },
    {
      "name": "complete_discord_verification",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "_verification_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10694658649089935141": {
            "error_kind": "string",
            "string": "Only oracle"
          },
          "14164235797325520362": {
            "error_kind": "string",
            "string": "Already verified"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "complete_discord_verification"
      ]
    },
    {
      "name": "complete_email_verification",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "_verification_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10694658649089935141": {
            "error_kind": "string",
            "string": "Only oracle"
          },
          "14164235797325520362": {
            "error_kind": "string",
            "string": "Already verified"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "complete_email_verification"
      ]
    },
    {
      "name": "complete_farcaster_verification",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "_verification_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10694658649089935141": {
            "error_kind": "string",
            "string": "Only oracle"
          },
          "14164235797325520362": {
            "error_kind": "string",
            "string": "Already verified"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "complete_farcaster_verification"
      ]
    },
    {
      "name": "complete_github_verification",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "_verification_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10694658649089935141": {
            "error_kind": "string",
            "string": "Only oracle"
          },
          "14164235797325520362": {
            "error_kind": "string",
            "string": "Already verified"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "complete_github_verification"
      ]
    },
    {
      "name": "complete_telegram_verification",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "_verification_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10694658649089935141": {
            "error_kind": "string",
            "string": "Only oracle"
          },
          "14164235797325520362": {
            "error_kind": "string",
            "string": "Already verified"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "complete_telegram_verification"
      ]
    },
    {
      "name": "complete_twitter_verification",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "_verification_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10694658649089935141": {
            "error_kind": "string",
            "string": "Only oracle"
          },
          "14164235797325520362": {
            "error_kind": "string",
            "string": "Already verified"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "complete_twitter_verification"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBEJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAAPyUAAABAKAIAAQSARCcCAgQAOw4AAgABJiUAAAJiLQgBAQAAAQIBJwICAQAtDgIBLQgBAgAAAQIBJwIDAAAtDgMCLQgBBAAAAQIBJwIFAAItDgUEJwIGAAMnAgcECC0IAAgtCgEJLQoCCi0KBAstCgYMLQoDDQAIAAcAJQAAAostAgAAJwIGAAQwCgADAAYnAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAAostAgAAJwIFAAEnAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAAostAgAAJwIFABInAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAApctAgAAJwIFABMnAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAApctAgAAJwIFABQnAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAApctAgAAJwIFABUnAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAApctAgAAJwIFABYnAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAApctAgAAJwIFABcnAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAApctAgAAJwIFABgnAgYEBy0IAActCgEILQoCCS0KBAotCgULLQoDDAAIAAYAJQAAApctAgAAJigAgAQEeAANAAAAgASAAyQAgAMAAAKKKgEAAQX3ofOvpa3UyjwEAgEmJQAAAmIwCgAFAAQmJQAAAmIwCgAFAAQm",
      "debug_symbols": "pZbBjuowDEX/pWsWcRLHyfzKaIQKlFGlqqAOPOkJ8e8vcewCCxCvs+GeuO6F6zall2bXbc7f637cH36aj89Ls5n6Yei/18Nh2576w5irl8aUj5CaD1g15KpEllhXkVgSVAksYEAURasDgBeVtc0mtmis6mTtqKoHURRNVVH6UPqCFZU15fOoaKga8/FYlKqWn8uKoonVGida+yyAaKhqZW3zeSmrM6K6TlW9E6WqCKLSh9IXvKisecSmQBSIWuFBF+BRM6BCquCMU5BmB1ZBKyUCQIEg4LRSUlRIAiVHBRJAbUZtDkZhrpTT82Vw5BW0wnEYSIDjMKCCNHvjFKIAaIXjuAzWKmiF4zCgQhLgOAzajNqMQSBoheP4DGQU5koS4DgMJMBxGLQ5STMar6AVjoMFooDVCscpwHEYUCEJeG322oxWQSscJxQIAqQVjsOQBDgOAwkkbU7SHIxR0EoZnc23VghlF5vrddXoM2R9mrquPELuHir5UXNsp248NR/jeRhWzZ92OHPTz7EdWU/tlI9my27cZc2G+37oCl1Xt7PN81OJIsnZEYBmAzD+XYu8V5NYWKQ4W+DbP8IG0Ah5o8MzB/fcAbwBcYB8g99ikH2w8M8tonFBJ2HwFiOkBwd8McvodBAUk3nmEF7EAB9RcwDa8Mzj5TAxzsNcdjnI6T1hKdAShxhmh2QW/YZkYXYIdpED6SidgSUp8r+EmR3ILHKITh3g7mr+hwPM91T+Z4qLHJJO0lnrFzi8u7mAfr27IP56e0Faur++8qrd9tPDi921uE19uxk6We7P4/bu6OnvUY/oi+FxOmy73XnqitPt7RDy52d+Y1vlKX5dy/f9Aw==",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "emergency_set_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "9981700386366515877": {
            "error_kind": "string",
            "string": "Invalid admin address"
          },
          "17057512740490565102": {
            "error_kind": "string",
            "string": "Admin already set"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw4AAgABJiUAAACrJwICAAMvCgACAAMnAgQAAAoqAwQFJAIABQAAAG0lAAAA1AoqAQQDJwIEAQAKKgMEBSQCAAUAAACJJQAAAOYwCgABAAInAgIAAjAKAAEAAicCAQABJwICAAQwCgABAAImKACABAR4AA0AAACABIADJACAAwAAANMqAQABBfeh86+lrdTKPAQCASYqAQABBey4dXaAo9XuPAQCASYqAQABBYqGH523wWqlPAQCASY=",
      "debug_symbols": "tZXBjoIwEIbfpWcO7XTaaXmVjTGo1ZAQNAibbAzvvq22oIeSjbgXZobSj5mfn/TGDm43nLZ1ezxfWfl1Y7uubpr6tG3O+6qvz62/e2M8XEixUhXM8EfQrNQFs+IRHpXgGKNlpfFR+JpCtI8IsZYQI7FSSJ+g9EnYgSYmyj8KYUnZmOj7nXEsWGpu23fOhd6euvUzXKrOtT0r26FpCvZdNcP9oeulau+xrzq/ygvm2oOPHnisGxeysZh38/xWBCPjbpRcTAD1ShB5gldGRYIQNLcgCF4QkEeQMhgRpLmaENq+EOQCQU5jEALkCLg0hiQ9zYHc5hhLYkrgk5iKcmIuEmxqAhFsjkB5glUJYO38OYH+3gISTi1YmWvBLkiJXCQlESjrCLHQheEyzWG4MrmPIRaMSUba5AljeRYBi942s7kV6HdMocSkp5KY/cPwA4Kq9YLq9YLSfwtqkhqoBWQF/YBDYb1DYb1D4W2HbnxV7evu5QwcA62rq13jYnkc2v3Tav9zSSvpDL105707DJ0LpPkgFf76JaGQtAlHoy9QFCg3Y3j1Lw==",
      "brillig_names": [
        "emergency_set_admin"
      ]
    },
    {
      "name": "get_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAABbJwIBAAMvCgABAAItCgIBJigAgAQEeAANAAAAgASAAyQAgAMAAACDKgEAAQX3ofOvpa3UyjwEAgEm",
      "debug_symbols": "fZLdzoMgDIbvhWMO+BXnrSyLQcWFhKBh8CVfDPc+WGSOAz2hLe370IZuYFJDePbazssLdPcNDE4bo5+9WUbp9WLT7QZQPgQHHYegTQGPEYJS0XunVC74kSTQKp2yHnQ2GAPBnzThU/Rapf1YL13KIgiUnZJNwFkblb0IDzU6l2ImqNjlyef8i+A1A18wMOMFgcXRBBakQpBzhOAt2xGiQUcTza0i0AsCbWkhMELOCOxqDCqa7xwM3SrGI0Vy1K7605hpTsvBqD2cgx1/sv5/LZmyE6tbRjUFpzLpWAyczjtuIaGPmF97Aw==",
      "brillig_names": [
        "get_admin"
      ]
    },
    {
      "name": "get_all_global_counts",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 6,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAAZyUAAABoACIBAgIoAgADBIBEJwIEBAYuAgACgAMuAgADgAQuAgAEgAUlAAAA/SgCAAIEgEQnAgMEBjsOAAMAAiYlAAABQycCAQASLwoAAQACJwIBABMvCgABAAMnAgEAFC8KAAEABCcCAQAVLwoAAQAFJwIBABYvCgABAAYnAgEAFy8KAAEABy0IAQEnAggEBwAIAQgBJwMBBAEAIgECCC0KCAktDgIJACIJAgktDgMJACIJAgktDgQJACIJAgktDgUJACIJAgktDgYJACIJAgktDgcJJgEAgAOABYAHLgCAA4AILgCABIAJCwCACIAHgAokAIAKAAABQi4BgAiABi4EgAaACQEAgAgAAoAIAQCACQACgAkjAAABESYoAIAEBHgADQAAAIAEgAMkAIADAAABayoBAAEF96Hzr6Wt1Mo8BAIBJg==",
      "debug_symbols": "tZbBjoMgEIbfhbMHZhgG6as0TWNbujExtnF1k03juy/sgrYHeljai/zOyKf8+VVu4uQO08e+7c+XT7HZ3sRhaLuu/dh3l2MztpfeV29ChgNIKza6EgD0N6IvgwxCR6HAi9BSHAWh2GBokYlCKy9CS9dRsOep0GIbhfFA5CBsFDUlkSo2VWysoFRJmCgAk+AoEJKIt0Alk6AkEpASkMKj8jxXItmyHwfngit3Pnn3rs3g+lFs+qnrKvHVdNPvRZ/Xpv8dx2bwXb9E15/86IHntnNBzdU6W+anAilVx+lem3pB6EcGPGEA6YQAsz4EGHxAYB5hdE0RYVjqBcH2gaCeEFStEoEQcwR6tgxleFkHSZtjPLfT0mInKcrZyeV2mmI762I77bvtJC1XOy1k0/mCeEJ5PqE8oPD2hGppFks1cdbSF0QUyjMK5SGFt6dUMy6Wssy+9PiKj2h5SrE8pfj2lDKuLz7r7G8JX5BSLE8plqcU/53SnT9rju3wsMeaA21om0Pn4ul56o933fH7mjppj3YdLkd3mgYXSOtGze9atv4zzHLnd0e+smWomHdzuPMP",
      "brillig_names": [
        "get_all_global_counts"
      ]
    },
    {
      "name": "get_oracle",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAABbJwIBAAIvCgABAAItCgIBJigAgAQEeAANAAAAgASAAyQAgAMAAACDKgEAAQX3ofOvpa3UyjwEAgEm",
      "debug_symbols": "fdJLDoMgEADQu7BmIT+hXqVpDCo2JAQNhSaN4e6Fxk9Z6AYYZ+YJgQUMqgvPVttxeoHmvoDOaWP0szVTL72ebPq6gCoPnIGGQSBSwGKEYKtovVMqF/y1JGiWTlkPGhuMgeAtTfgVvWZpf7OXLmUrCJQd0pzAURuVVxEe3dV5K6ICs7U9rSndCVYa6MJAdCcQPzaBOC4IfE5wJuhK8LpiO1HfCoFcCESQTaAYnwn06hiE1/s5aHUrjEeKZK9dcacxa07Lzqg1HIPt/7L+M2+Z7U3MburVEJzK0vEwUBrvSEBMHjH/7Qs=",
      "brillig_names": [
        "get_oracle"
      ]
    },
    {
      "name": "get_profile_registry",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAABbJwIBAAEvCgABAAItCgIBJigAgAQEeAANAAAAgASAAyQAgAMAAACDKgEAAQX3ofOvpa3UyjwEAgEm",
      "debug_symbols": "fZLNDoMgDMffhTMH+RL1VZbFoOJCQtAwWLIY3n2wDB0HvdCW9v+jDd3AJAf/6JWZlyfobhsYrNJaPXq9jMKpxcTbDVTp4Ax0DIImBiwECHJF76yUqeBPEkGrsNI40BmvNQQvof236LkK87VO2JitIJBmijYCZ6Vl8gI81NW5FNEW0588+ozsCFYy0AUDUZYRiB9NII4LBD5HcNbkLnhdsR1RtwWBXBBIQzKBYnxGoFdjEF7vc9CqLRj3GIlR2eJPQ6JZJQYtf+HszfiXde81Z/JOrHYZ5eStTKRjMVA8b6iBmNxDeu0D",
      "brillig_names": [
        "get_profile_registry"
      ]
    },
    {
      "name": "get_profile_verification_count",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAAB/CcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHABEnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAiUtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAIlLQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA1MtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAARmLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAIkKgEAAQX3ofOvpa3UyjwEAgEmJQAAAfwtCwQGCyIABoBEAAckAgAHAAACRycCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALfIwAAAmAtCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKKJQAABHguAgAHgAMoAIAEBAAEJQAABIouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAACyiUAAAUYLQ4KAS0OCAItDgUDLQ4JBCMAAANSJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA1MtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASKLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADUiYlAAAB/C4IgEUABSMAAANjDSIABYBDAAYkAgAGAAAD0yMAAAN4LQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAPpIwAABFUtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASKLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABFUBIgAFgEYABi0KBgUjAAADYyoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABKUjAAAEsC4AgAOABSMAAAUXLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABQMuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABNIoAYAFBAABAwCABgACgAYjAAAFFyYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZffais5DMbfZa5zYUmW//RVDqWkbXoIhLTkJAtLybuvZEueZmEGdmBv8v3ssb6RbXlm8j29H15vv1+O54/PP9PTr+/p9XI8nY6/X06fb/vr8fMsvd9T0B8IdXrKuwkgmpauSKbWJmuTtSOapq4Mptw1BVPxLaKFTWvXav21tzFEU2sDmeauiKapK4Fp98UYTMUnqZauTKa5awLT1DUHU4vLtavm29TatV+nIOOrKncFa+v6NS1dNd+mqSvZOLJxVLtGa0eL03yb5q6ab1O7X7K4bOOyjSt2v2LtKnEAChIIuJtiIAMAh2SAkhyQAjtUA933DtkggoMPZg/n0ePhScOjQAYHHSOVEUtwKAY1deAgg1ESY5bVQVKQMSjhrPvWQDesQzUo5CCpIu+mFDRKdi0BOiQDnXKHaEA+RmfaQCfYQCeIWSEZ6Lw6FIOWT4NqULxHJ4hSnEknqJDbBBtUA62fDjY4awV18CitdZTNzVrsHaJDMWB0SAbJBycPz96TPTx7ePHwIuEUBCo61A5Fj2oDrf0ObKBPjQ62hkXPaQdbzBK9J8kYkhItuj4k213avRqkDlUXqgP3Sqh60w7RoRqg96D3kPeQ90TvYffh0VMMEjokg+yDsw/WXdbkq1YdSQ+Elmsn7llDaEvUae6rTm25YqPiRKNP65BYSR+2RsmJhzMnJ61Ko+KkGRuN+5bRV8Y4X3sh94MQBrXY+303+Tvk5Xo5HPQV8uOlIq+ar/3lcL5OT+fb6bSb/tqfbm3Qn6/9uel1f5GrUiKH87uoGH4cTwel+26ODsuhEANnCxcuaVjwoweseMhKuQUADQdI9GCBKxaczAEDDgNCfjCgZYNcI5uDHK05ByzlwSIuW1D2dYwUZ4PHZeDleETwFBCJlhzSsgNH3wqOZUN8Ggmk5fuvzYDANxLlVbvFQR6m7pB5cRUh/K8WIC8LL8j8o57+i0Wu41gUSJssKo1jUeOyxYoDlOIOGHnxYMHKjjBXX85UcF5OeYA9eqzUVU7gZyvPdQkZtz1l5Fm8+JQpa6sxjjjIti7mAXVlJjwqQ97k84qm+vikWplLpuLbmiPiosXqvlJOYyox1CWTtSUN45jIe6cuVdeaA3Cc1xM3OZQxDQybcogIoy5wUw4cxyw4wyaHOs5pAtriQPNJJ940C0rjpFPZMgsp51HYcUN8He/wmtOWePTDKR+FW+KL5//w+t6S/7/in6W1fzteHv6v39Xpcty/ng7W/Lid335cvf795Vf8//7X5fPt8H67HNRp/tMvP79QvvKRw7N+8ElTvkp38lWkTdCrDHKVnu+azD8=",
      "brillig_names": [
        "get_profile_verification_count"
      ]
    },
    {
      "name": "get_profile_verifications",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 6,
            "type": {
              "kind": "boolean"
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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AgAMAAAHGCcCDQQAPAYNAQsiAAuARAAFJAIABQAABy0lAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAAB1clAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAAB4ElAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAAB6slAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAAB9UlAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAAB/8lAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAACCklAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAACFMlAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAACH0lAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAACKclAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAACNElAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAACPslAAALpi0KAQctCgIILQoDCS0KBAojAAAJOgsiAAuARAAFJAIABQAACSUlAAALpi0KAQctCgIILQoDCS0KBAojAAAJOi0KCgQtCgcBLQoIAi0KCQMmJQAABDUvCgAEAAUcCgUGARwKBgQAHAoEBQEtCgUBJiUAAAQ1LQsEBgsiAAaARAAHJAIABwAACYwnAggEADwGCAEtCwMGCyIABoBDAAckAgAHAAAKHyMAAAmlLQsDBi0LAQctCwIILQsECQ0iAAaAQwAKJAIACgAACcolAAALuC4CAAeAAygAgAQEAAQlAAALyi4IgAUACgAiCgILACoLBgwtDgUMASIABoBIAAUOKgYFByQCAAcAAAoKJQAADFgtDgoBLQ4IAi0OBQMtDgkEIwAACpInAgYEBy0IAActCgEILQoCCS0KAwotCgQLAAgABgAlAAAKky0CAAAtCwEGLQsCBy0LBAguAgAGgAMoAIAEBAAEJQAAC8ouCIAFAAkAIgkCCgEiAAqARQALLQ4FCy0OCQEtDgcCLgyASAADLQ4IBCMAAAqSJiUAAAQ1LgiARQAFIwAACqMNIgAFgEMABiQCAAYAAAsTIwAACrgtCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAACykjAAALlS0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAAC8ouCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAALlQEiAAWASAAGLQoGBSMAAAqjKgEAAQUC3G4ngHYSnTwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAL5SMAAAvwLgCAA4AFIwAADFcuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAMQy4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAMEigBgAUEAAEDAIAGAAKABiMAAAxXJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZndbhs5DIXfxde50A8lkX2VoijS1F0EMJLATRZYFHn3FSke2l7ARjvB3pifaPKMRqI0GvvX7vv+29tfXx+ffjz/3H36/Gv37fh4ODz+9fXw/HD/+vj8NL2/dkk/ssjuU77blVTd8rKZ3Hq7+PfF46u3q39P3qax+1SmbcWtt3t229zKsqO69Tj2NntbXEdWu6bstrldOjVXtzOuTluK275sTW7JLS9LHkee17zdPK/PPFLblh3eHuSWl+Xiti8rHierTSm5XTqUvZ3J7dKhUtx6nva7qW1uZVkdb7Nj2Zbdelz3vI625+l4d7W8LHtbx1utZLfNrZhtqbr1dvZ2XjqteLssnVaz2+bW87TfQy0vq+Ntti+r/TZLbj1ueN7wNnuejjdPq/02u9pdx9ssueVlc3HrccXbxds1u/U2uQ65DrlO8zztt0yr9W22uZVltd9mx7Lscex54m3xPFuP6W43tOML4NEhXzAcSgY0AIIrPBUegiDB0yDYINgh2JGu95Hnwh5a8AvYQadgQXfQol+AYPF0TgTwdNaZyEVhOBR4dDIMtPoXEIAdCMEET4OnQbDD0yE4IDggOJBut1MVhoPOzYIGkAVi26WBB0suAHhKBjQA0u12DOAheAiehks0CHZcwm5HYeASA5fgBIAgQ1AgKLwgZ121pRkNUC1B4aPwUfh0x3EKX484XbeLRlxj6F49N4FcdHU6UVB8m8OXw1fCVxhUw1cjjhqoxTV0jS6yp9AijSMjAWlNODFIq8JpgLQunKBS7Y4WdVAOX444LYoyjDpIq9yJghhkY78oMlpk6H6/qIevh4rdm5HNwqIB4ugLhwpHhkSGoC+UapCqiFKeKjUZCUiraZFWk5M+UbMS5aAWJCCte6cB6pHRQ2WEb4TKCBUOFQ4ViQyJDEFG0ydzLUq60Tpprq6Upmu4ahU3nYXl6/Ets1PXKl5kJw4jXSlOyO1aa06RIdAbqYBKCmogfYY64bqjQ3kMXG0wlG0/doKPE65mO7FT97tkXW+LbAaNGoN6xA3Eia4AJ8RJ6AlBRVrEhZ5tVovE4+YWkUClgyqBKOI6g0bEQa/knIIQl0MvN6jkHnGhlwUqJSGuhF6pUCkUcaFnO8gijrjQqyUFIa6GXrWteyjZA1WMmpOdJBfprlK7kc6qZqyVZ6QngEV6hnGiIL0uK+keUU1P9winAdI9wqmBBHEt5SA9ryYlrSYnAWk1LdJV4dRAFD7tH+lrhJ0LnQbIzuBGdgpfFBl2EjfiyNUVT/YaYudwe/Gwk/giCmKQ9X5RZJQcFL4aKjVUaqhodVI1YpDu1IvsnWJRB+mqdRIQY5w7Yz7svOgE39CnOJGSjV8zYpCN5KIBsv20G3WQjqkT6mpw+Dh8Ej6Bj1MKgh7n8Onz3IlB9n62KDJqZFhtkJGOhvms90bae7sP24cWjfBp7500V6uddUU5hU+rmNiInUTXuROU7WDnJKCCcRarg0W4rlD4Yj4k5kNiPqTFNayy2/v73Q6v6F9fj/u9vqGfvbPPN/mX++P+6XX36entcLjb/X1/eLOgny/3T2Zf74/z27mW9k/fp52CPx4Pe6X3u1N2up46j/fDs3me2EIgJ/pdCT2KVNeYXE+9aGmjBo1tGv1MQ9KHNUba1o+5Qk8aLX9co/M2DabQmOvz4xpl23gwne6FR/m4BssmDUktNGRjnV5obKvTTCExj36nJTdH5lwi041l22JaRk8tNLpcSrQbEpUxomP+DHVVot+6k1macSuU5KrIzVsZp1sp6aoEX5doo7hCO6uMSvW3pySdVv28qdOU9EuJckujYSjm8fHUidIuFfKNkZAojHluP/ViPsUuNcp1jblnuQRVOilcFqduLdcE5pEXnZhn3npV4saMNsIjZf7st0WgRxf6jR7cuomaMZ/zyN03SQzCSM6T1PWh5P9VYr6dxPY7zsrqTySGYDr0hW+ThNRYHkJXJW7uecxQmL/ZXF1g9caMtCYYzj7fV8+OKuNS49Zm0zNW2OCrO+/NnSLmNKezzeZPhqLRafsv2wYzdt2SNvWBCsYhn+/9f6DQKO6ijbxJQaKoeq5bFOqpLOcfOZsUOp+dkDYozKdvPLxoQ77Eg0fGloUlBVvlfPnYks/o/8UTZ0v//5P/ZbbuHx6PF/9CvqvS8fH+22HvzR9vTw9n377+84Jv8C/my/H5Yf/97bhXpdNfmfPjc0/5bv6l82X+8TZb88/Lu/n7y2zpu+jn+QPM3fzNWJtZY+du30v78q5d+xc=",
      "brillig_names": [
        "get_profile_verifications"
      ]
    },
    {
      "name": "get_total_verifications",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAABbJwIBABgvCgABAAItCgIBJigAgAQEeAANAAAAgASAAyQAgAMAAACDKgEAAQX3ofOvpa3UyjwEAgEm",
      "debug_symbols": "fZLdzoMgDIbvhWMO+BXnrSyLQcWFhKBh8CVfDPc+WGSOAz2hLe370IZuYFJDePbazssLdPcNDE4bo5+9WUbp9WLT7QZQPgQHHYegTQGPEYJS0XunVC74kSTQKp2yHnQ2GAPBnzThU/Rapf1YL13KIgiUnZJNwFkblb0IDzU6l2JGMN3lyWf8i+A1A18wMOMFgcXRBBakQpBzhOAt2xGiQUcTza0i0AsCbcscghFyRmBXY1DRfOdg6FYxHimSo3bVn8ZMc1oORu3hHOz4k/X/a8mUnVjdMqopOJVJx2LgdN5xCwl9xPzaGw==",
      "brillig_names": [
        "get_total_verifications"
      ]
    },
    {
      "name": "initialize_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "15691186487269729606": {
            "error_kind": "string",
            "string": "Admin already initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBEJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAAPyUAAABAKAIAAQSARCcCAgQAOw4AAgABJiUAAAC9JwIBAAQvCgABAAIcCgIEARwKBAMAHAoDAgEnAgMBAAoqAgMEJAIABAAAAHYlAAAA5iwCAAIAMDkIcb+hPKSdWL4XQd+3JFYtsktSypZ6HUp9Cwj6ztQnAgMAAzAKAAIAAycCAwACMAoAAgADJwICAAEwCgACAAEmKACABAR4AA0AAACABIADJACAAwAAAOUqAQABBfeh86+lrdTKPAQCASYqAQABBdnCSvmGHyVGPAQCASY=",
      "debug_symbols": "tZXNbsMgDMffhXMOGAOGvMpUVWlLq0hRWqXJpKnKuw86SNoDSFu7S2zz8Yv524gbO7jddNq2/fF8ZfXHje2Gtuva07Y775uxPfd+9MZ4+GjLalUxkndj/Bh5o+7G/kTWR6ZiwHm0MQaM1rAa0DtKRUfz5GjvhDUEySFWizBlRHDmuWIpqe04OBdyesjS535pBtePrO6nrqvYZ9NN90XXS9Pf7dgMfpZXzPUHbz3w2HYueHO17ub5rYjSxt2IZBeAeiZAngAgVSQA0JoCkHhCiDyClJERQZqrBaHtEwELBDSYCFKIHEGWjoGkl3NIbnOM4jloPYfgOYLOExSJCFBmzQAl/qKeZqmngVw9SwQNlAgadY5gC1JKDklJKSjbEVDIwnBM1TBcmZyUUGhMMpham4zNVgNEsbfN2txK6BykqKeGRc98RUC+QVD1uqD6dUHpnwUlTJfEX1nMCvqGDhWvd6h4vUPFnzt046Nm3w5Pb98caEPb7DoXw+PU7x9mx69Lmklv52U4791hGlwgrQ8o+O8H8grVJryFIdAVms0cfv0N",
      "brillig_names": [
        "initialize_admin"
      ]
    },
    {
      "name": "is_admin_initialized",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAABqJwIBAAQvCgABAAIcCgIDARwKAwEAHAoBAgEtCgIBJigAgAQEeAANAAAAgASAAyQAgAMAAACSKgEAAQX3ofOvpa3UyjwEAgEm",
      "debug_symbols": "fdLLroMgEADQf5k1C0Ae6q80TYOKDQlBQ/UmN4Z/L7Q+6gI3DDjOgUlmgU438/NhXD+8oL4t0HhjrXk+7NCqyQwufl0Ap0VyqDmCEn+DgFoiqMg3pFMICLayx+S1TlU/TtRH5bWboHaztQj+lJ0/P71G5T5xUj5mMQLtuhgj2Bur0y6goxrnSwnHQq7lcV/JneBng1wYhPGNIPJ4BJH0RNA8IXnJVkIKzHdCVCehuBCKstgERmlOYFdtFFLsfTBc5YzLPuTRB8U5QeQFLukK8PJ4QcGKEO7xqFrjT7MWEuWNaqxej/3s2p/s9D9umW1WRz+0upu9TtIxsCSuN0oQFfeQbnsD",
      "brillig_names": [
        "is_admin_initialized"
      ]
    },
    {
      "name": "is_discord_verified",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAYnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjdbuM4DIXfxde5EEn9sa8yKIq0TQcBgrTINAssirz7khIpNwvYmDEwNz2fZPGYlijZzdf0eni+/nw6nt/ef00PP76m58vxdDr+fDq9v+w/j+9n6f2agv6BwNND2U0A0bR2RTK1NlmbrB3RNHdNYJq65mAqvlW0JlPuytbPvY0hmlobyLR0RTTNXQlMuy/GYCo+WbV2TWRaumYwzV1LMLW4wl0136bW5n6dgoxn1dQVrK3z17R21Xyb5q5k48jGEXeN1o4Wp/k2LV0136Z2v2xxxcYVG1ftftXaLHEAChIIuJtiIAMAh2yAkhyQQnJgA133DsUggoMPTh6eRo+HZw2PAgUcdIxURqzBoRpw7pCCDEZUkJuiRCVAB+/RicAkoDOBsjSpggMb6KJ1qB1yUB+5Rdb6xqpQDLSiOiQHNog+JqGBlncHHSwTnvUBO1SDSg5s0PJpYD1FF4WCgC5Kh2yA0YENyAfrWjSIHqVLQKCQHNhAl6BDMdBUO/jg6uF19Hg4ezhbeNXVIVQoBlr8HdhAC6mB1n2HahBtDqseHQ1ScPAerWaS+uE2P1GhGLSJapANtHq1Elhv2sFqg3W3dfCe6D3Re5L3JO/J7uM1xq3GGhSDVmwNfHD1wbrKLXmtOpIeCC3XRpqsZi2UnGj0ab5GGpuVIg0afVqHVBoVJz0pjIZzgUHVqdIgduJxX/Y+8KkXKk4++QJ+D2h1Gm+33eSvl6fPy+Ggb5dv7xt5C33sL4fz5/Rwvp5Ou+mf/enaBv362J+bfu4vclWq+XB+FRXDt+PpoHTbzdFhOVReVsXDhbkMi3TvASseIZNbANBwgEx3FrhikbI5YMBhQJjuDGjZoHBM5lCY5xyw1juLuGxBYyKirM0wuJ+GtByPCJ4CItGSQ152SLGYQYp1Q3weCeTl+689AYEvJMpbeItDiT6JWNLiLEL4qxaQa/SCLN/q6U8s5Ox2iwp5kwXT2BYcly1WHKDWsTdjWtxYsLIiKbFPZ644T6ecUPceK3VVMvjeKnNdQsFtpwxDXDxl6tpsjC0OsqyLeQCvPEkalVFymGc08/1JtfIshaova4mIixar60olj0eJgZdM1h+lzI+CYTGPlUMzFfTzps45UKTfXtcw9qq+GpdKfM0BUpwXFTc51DGXGDblENHrG76v6B84pDieIhXY5MDjsMhAWxxoPm4obXoKyuO4obrlKWRPjZKMG+J5fEhwyVvi0U8I+WjdEl89/7tviC35/y/+UVr7l+Pl7veEmzpdjvvn08Gab9fzy7ern/9++BX/PeLj8v5yeL1eDuo0/yghf37IO3sn/7w/6jepNGVz7uTjVJugV2WjYcqPN03mPw==",
      "brillig_names": [
        "is_discord_verified"
      ]
    },
    {
      "name": "is_email_verified",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAonAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjdbuM4DIXfJde5EEn9sa8yKIq0TQcBgrTIJAssirz7khIpJwvYmDEwNz2fZPGYkmjZzffmff96/flyOH18/to8/fjevJ4Px+Ph58vx8213OXyepPd7E/QPBN48le0GIJrWrkim1iZrk7UjmuauCUxT1xxMxbeK1mTKXdn6ubcxRFNrA5mWroimuSuBaffFGEzFJ6vWrolMS9cMprlrCaYWV7ir5tvU2tyvU5DxrJq6grV1/ZrWrppv09yVbBzZOOKu0drR4jTfpqWr5tvU7pctrti4YuOq3a9amyUOQEECAbebGMgAwCEboCQHpJAc2ED3vUMxiODgg5OHp9Hj4VnDo0ABBx0jlRFrcKgGnDukIIMRFeSmKFEJ0MF7dCEwCehKoGxNquDABrppHWqHHNRHbpG1vrEqFAOtqA7JgQ2ij0looOXdQQfLgmedYIdqUMmBDVo+Dayn6KZQENBN6ZANMDqwAflg3YsG0aN0CwgUkgMb6BZ0KAaaagcfXD28jh4PZw9nC6+6O4QKxUCLvwMbaCE10LrvUA2irWHVo6NBCg7eo9VMUj/c1icqFIO2UA2ygVavVgLrTTtYbbA+bR28J3pP9J7kPcl7svt4jXGrsQbFoBVbAx9cfbDuckteq46kB0LLtZEmq1kLJScafZqvkcZmpUiDRp/WIZVGxUlPCqPhXGBQdao0iJ143Je9D3zphYqTL76A3wNancbbbbvx18vL5bzf69vl7n0jb6Gv3Xl/umyeTtfjcbv5Z3e8tkG/vnanppfdWa5KNe9P76Ji+HE47pVu2yk6zIcCxeDhwpiGRXr0gAWPkMktAGg4QKYHC1ywSNkcMOAwIEnn3oDmDQrHZA6FecoBa32wiPMWVHwhouzNMHhchjQfjwieAiLRnEOed0ixmEGKdUV8Hgnk+fsvzYDANxLlLbzGoURfRCxpdhUh/FULyDV6QZa7evoTCzm73aJCXmXBNB4LjvMWCw5QqztgTLMPFizsSErsy5krTsspJ9Sjx0JdlQz+bJWpLqHgylMm4uwpU5dWYzziINs6mwfwwkzSqIySw7SimR9PqoW5FKq+rSUizlos7iuVPKYSA8+ZLE+lTFPBMJvHwqGZCvp5U6ccKNJv72sYz6q+GudKfMkBUpw2FVc51LGWGFblENHrG+539A8cUhyzSAVWOfA4LDLQGgeajhtKq2ZBeRw3VNfMQp6pUZJxRTyPDwkueU08+gkhH61r4qvn//ANsSb//8U/S2v3djg//J5wU6fzYfd63Fvz43p6u7t6+ffLr/jvEV/nz7f9+/W8V6fpRwn580Pe2Vv55/1Zv0mlKQ/nVj5OtQl6VR40TPn5psn8Bw==",
      "brillig_names": [
        "is_email_verified"
      ]
    },
    {
      "name": "is_farcaster_verified",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAknAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjdbuM4DIXfJde5EEn9sa8yKIq0TQcBgrTIJAssirz7khIpJwvYmDEwNz2fZPGYlijZzffmff96/flyOH18/to8/fjevJ4Px+Ph58vx8213OXyepPd7E/QPBN48le0GIJrWrkim1iZrk7UjmuauCUxT1xxMxbeK1mTKXdn6ubcxRFNrA5mWroimuSuBaffFGEzFJ6vWrolMS9cMprlrCaYWV7ir5tvU2tyvU5DxrJq6grV1/prWrppv09yVbBzZOOKu0drR4jTfpqWr5tvU7pctrti4YuOq3a9amyUOQEECAbebGMgAwCEboCQHpJAc2EDXvUMxiODgg5OHp9Hj4VnDo0ABBx0jlRFrcKgGnDukIIMRFeSmKFEJ0MF7dCIwCehMoCxNquDABrpoHWqHHNRHbpG1vrEqFAOtqA7JgQ2ij0looOXdQQfLhGd9wA7VoJIDG7R8GlhP0UWhIKCL0iEbYHRgA/LBuhYNokfpEhAoJAc20CXoUAw01Q4+uHp4HT0ezh7OFl51dQgVioEWfwc20EJqoHXfoRpEm8OqR0eDFBy8R6uZpH64zU9UKAZtohpkA61erQTWm3aw2mDdbR28J3pP9J7kPcl7svt4jXGrsQbFoBVbAx9cfbCuckteq46kB0LLtZEmq1kLJScafZqvkcZmpUiDRp/WIZVGxUlPCqPhXGBQdao0iJ143Je9D3zqhYqTT76A3wNancbbbbvx18vL5bzf69vl7n0jb6Gv3Xl/umyeTtfjcbv5Z3e8tkG/vnanppfdWa5KNe9P76Ji+HE47pVu2yk6zIeCnLbVwoW5DIv06AELHiGTWwDQcIBMDxa4YJGyOWDAYUCYHgxo3qBwTOZQmKccsNYHizhvQcXnMcraDIPHaUjz8YjgKSASzTnkeYcUixmkWFfE55FAnr//0hMQ+EKi1MUahxJ9ErGk2VmE8FctINfoBVnu6ulPLOTsdosKeZUF09gWHOctFhygjr2JMc1uLFhYkZTYpzNXnKZTTqhHj4W6Khl8b5WpLqHgulNGPvxmT5m6NBtji4Ms62wewAtPkkZllBymGc38eFItPEuh6staIuKsxeK6UsnjUWLgOZPlRynTo2CYzWPh0EwF/bypUw4U6bfXNYy9qq/GuRJfcoAUp0XFVQ51zCWGVTlE9PqG+xX9A4cUx1OkAqsceBwWGWiNA03HDaVVT0F3m7SueQrZU6Mk44p4Hh8SXPKaePQTQj5a18RXz//hG2JN/v+Lf5bW7u1wfvg94aZO58Pu9bi35sf19HZ39fLvl1/x3yO+zp9v+/frea9O048S8ueHvLO38s/7s36TSlM251Y+TrUJelU2Gqb8fNNk/gM=",
      "brillig_names": [
        "is_farcaster_verified"
      ]
    },
    {
      "name": "is_github_verified",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAgnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjdbuM4DIXfJde5EEn9sa8yKIq0TQcBgrTIJAssirz7khIpJwPY2DEwNz2fZPGYkmjZzffmff96/flyOH18/to8/fjevJ4Px+Ph58vx8213OXyepPd7E/QPBN48le0GIJrWrkim1iZrk7UjmuauCUxT1xxMxbeK1mTKXdn6ubcxRFNrA5mWroimuSuBaffFGEzFJ6vWrolMS9cMprlrCaYWV7ir5tvU2tyvU5DxrJq6grV1/ZrWrppv09yVbBzZOOKu0drR4jTfpqWr5tvU7pctrti4YuOq3a9amyUOQEECAbebGMgAwCEboCQHpJAc2ED3vUMxiODgg5OHp9Hj4VnDo0ABBx0jlRFrcKgGnDukIIMRFeSmKFEJ0MF7dCEwCehKoGxNquDABrppHWqHHNRHbpG1vrEqFAOtqA7JgQ2ij0looOXdQQfLgmedYIdqUMmBDVo+Dayn6KZQENBN6ZANMDqwAflg3YsG0aN0CwgUkgMb6BZ0KAaaagcfXD28jh4PZw9nC6+6O4QKxUCLvwMbaCE10LrvUA2irWHVo6NBCg7eo9VMUj/c1icqFIO2UA2ygVavVgLrTTtYbbA+bR28J3pP9J7kPcl7svt4jXGrsQbFoBVbAx9cfbDuckteq46kB0LLtZEmq1kLJScafZqvkcZmpUiDRp/WIZVGxUlPCqPhXGBQdao0iJ143Je9D3zphYqTL76A3wNancbbbbvx18vL5bzf69vl7n0jb6Gv3Xl/umyeTtfjcbv5Z3e8tkG/vnanppfdWa5KNe9P76Ji+HE47pVu2yk6zIcCgS5yCxfOMCzSowcseIRMbgFAwwEyPVjggkXK5oABhwFhejCgeYPC0adRmKccsNYHizhvQcXXMcreDIPHZUjz8YjgKSASzTnkeYcUixmkWFfE55FAnr//0gwIfCNR3sJrHEr0RcSSZlcRwl+1gFyjF2S5q6c/sZCz2y0q5FUWTOOx4DhvseAAtboDxjT7YMHCjqTEvpy54rScckI9eizUVcngz1aZ6hIKrjxl7kx+P2Xq0mqMRxxkW2fzAF6YSRqVUXKYVjTz40m1MJdC1be1RMRZi8V9pZLHVGLgOZPlqZRpKhhm81g4NFNBP2/qlANF+t/7Gsazqq/GuRJfcoAUp03FVQ51rCWGVTlE9PqG+x39A4cUxyxSgVUOPA6LDLTGgabjhtKqWVAexw3VNbOQZ2qUZFwRz+NDgkteE49+QshH65r46vk/fEOsyf+3+Gdp7d4O54ffE27qdD7sXo97a35cT293Vy//fvkV/z3i6/z5tn+/nvfqNP0oIX9+yDt7K/+8P+s3qTTl4dzKx6k2Qa/Kg4YpP980mf8A",
      "brillig_names": [
        "is_github_verified"
      ]
    },
    {
      "name": "is_telegram_verified",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAcnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjdbuM4DIXfJde5EEn9sa8yKIq0TQcBgrTIJAssirz7khIpJwPY2DEwNz2fZPGYkmjZzffmff96/flyOH18/to8/fjevJ4Px+Ph58vx8213OXyepPd7E/QPBN48le0GIJrWrkim1iZrk7UjmuauCUxT1xxMxbeK1mTKXdn6ubcxRFNrA5mWroimuSuBaffFGEzFJ6vWrolMS9cMprlrCaYWV7ir5tvU2tyvU5DxrJq6grV1/ZrWrppv09yVbBzZOOKu0drR4jTfpqWr5tvU7pctrti4YuOq3a9amyUOQEECAbebGMgAwCEboCQHpJAc2ED3vUMxiODgg5OHp9Hj4VnDo0ABBx0jlRFrcKgGnDukIIMRFeSmKFEJ0MF7dCEwCehKoGxNquDABrppHWqHHNRHbpG1vrEqFAOtqA7JgQ2ij0looOXdQQfLgmedYIdqUMmBDVo+Dayn6KZQENBN6ZANMDqwAflg3YsG0aN0CwgUkgMb6BZ0KAaaagcfXD28jh4PZw9nC6+6O4QKxUCLvwMbaCE10LrvUA2irWHVo6NBCg7eo9VMUj/c1icqFIO2UA2ygVavVgLrTTtYbbA+bR28J3pP9J7kPcl7svt4jXGrsQbFoBVbAx9cfbDuckteq46kB0LLtZEmq1kLJScafZqvkcZmpUiDRp/WIZVGxUlPCqPhXGBQdao0iJ143Je9D3zphYqTL76A3wNancbbbbvx18vL5bzf69vl7n0jb6Gv3Xl/umyeTtfjcbv5Z3e8tkG/vnanppfdWa5KNe9P76Ji+HE47pVu2yk6zIeCnM5k4cIEwyI9esCCR8jDAoCGA2R6sMAFi5TNAQMOA8L0YEDzBoVjMofCPOWAtT5YxHkLKr6OUfZmGDwuQ5qPRwRPAZFoziHPO6RYzCDFuiI+jwTy/P2XZkDgG4nyFl7jUKIvIpY0u4oQ/qoF5Bq9IMtdPf2JhZzdblEhr7JgGo8Fx3mLBQeo1R0wptkHCxZ2JCX25cwVp+WUE+rRY6GuSgZ/tspUl1Bw5SlzV9y/nzJ1aTXGIw6yrbN5AC/MJI3KKDlMK5r58aRamEuh6lMpEXHWYnFfqeQxlRh4zmR5KmWaCobZPBYOzVTQz5s65UCR/ve+hvGs6qtxrsSXHCDFaVNxlUMda4lhVQ4Rvb7hfkf/wCHFMYtUYJUDjwckA61xoOm4obRqFpTHcUN1zSzkmRolGVfE8/iQ4JLXxKOfEPLRuia+ev4P3xBr8v8t/llau7fD+eH3hJs6nQ+71+Pemh/X09vd1cu/X37Ff4/4On++7d+v5706TT9KyJ8f8s7eyj/vz/pNKk15OLfycapN0KvyoGHKzzdN5j8=",
      "brillig_names": [
        "is_telegram_verified"
      ]
    },
    {
      "name": "is_twitter_verified",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAUnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjfaiM7DMbfZa5zYUn+p77KUkrapksgpCXbHDiUvPuRbMnTHJhhd2Bv+v3sWN/ItuxJ8zW9Hp6vP5+O57f3X9PDj6/p+XI8nY4/n07vL/vP4/tZer+moH8g8PRQdhNANK1dkUytTdYma0c0zV0TmKauOZiKbxWtyZS7svVzb2OIptYGMi1dEU1zVwLT7osxmIpPVq1dE5mWrhlMc9cSTC2ucFfNt6m1uX9OQcazauoK1tb1a1q7ar5Nc1eycWTjiLtGa0eL03yblq6ab1N7Xra4YuOKjav2vGptljgABQkE3E0xkAGAQzZASQ5IITmwge57h2IQwcEHJw9Po8fDs4ZHgQIOOkYqI9bgUA04d0hBBiMqyENRohKgg/foQmAS0JVA2ZpUwYENdNM61A45qI88Imt9Y1UoBlpRHZIDG0Qfk9BAy7uDDpYFzzrBDtWgkgMbtHwaWE/RTaEgoJvSIRtgdGAD8sG6Fw2iR+kWECgkBzbQLehQDDTVDj64engdPR7OHs4WXnV3CBWKgRZ/BzbQQmqgdd+hGkRbw6pXR4MUHLxHq5mkfritT1QoBm2hGmQDrV6tBNaHdrDaYD1tHbwnek/0nuQ9yXuy+3iNcauxBsWgFVsDH1x9sO5yS16rjqQHQsu1kSarWQslJxp9mq+RxmalSINGn9YhlUbFSW8Ko+FcYFB1qjSInXg8l70PfOmFipMvvoA/A1qdxtttN/nr5enzcjjo2+Xb+0beQh/7y+H8OT2cr6fTbvpnf7q2Qb8+9uemn/uLfCrVfDi/iorh2/F0ULrt5uiwHApYqFq4cE7DIt17wIpHyOQWADQcINOdBa5YpGwOGHAYEKY7A1o2KByTORTmOQes9c4iLltQ8XWMsjfD4H4Z0nI8IngKiERLDnnZIcViBinWDfF5JJCXn782AwLfSJS38BaHEn0RsaTFVYTwVy0g1+gFWb7V059YyN3tFhXyJgumcSw4LlusOECdz2ZMiwcLVnYkJfblzBXn5ZQb6t5jpa5KBj9bZa5LKLjxlqm4eMvUtdUYRxxkWxfzAF6ZSRqVUXKYVzTz/U21MheZiW9riYiLFqv7SiWPqcTASybrUynzVDAs5rFyaaaCft/UOQeK9Nv7GsZZ1VfjUomvOUCK86biJoc61hLDphwien3D9x39A4cUxyxSgU0OPC6LDLTFgebrhtKmWVAeh5TqllnImRolGTfE8/giwSVviUe/IeRL65b46vnffYfYkv//4h+ltX85Xu5+T7ip0+W4fz4drPl2Pb98+/Tz3w//xH+P+Li8vxxer5eDOs0/SsifH/LO3sk/74/6nVSacjh38uVUm6CfykHDlB9vmsx/",
      "brillig_names": [
        "is_twitter_verified"
      ]
    },
    {
      "name": "prepare_discord_verification",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "handle_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "rZbbjoIwEIbfpddcdKbTk69ijEFlNyQEDcImG8O771SoyEUbo3vDz2m+zrTzU27iVB2G733dfp2vYrO9iUNXN039vW/Ox7Kvzy3fvQkZDqTFBgpBZhI7iZvEs4xjIWLYvu+qKkQ9cZh+Kbuq7cWmHZqmED9lM9xful7K9q592fFTWYiqPbEy8KtuqnA2Fku0TIdqBXOwtuYRDmRfBaAmOxPQAC4ISSsEZhBIsQJEsyCsXhFUmqCk1zNBgXEpAqUJoL2mGcHnTwx0bgXRmUIATSwESD8QSq7zMJk80EUEoPdvIZRREUEgk4hcIbwMjxWx6UJyfUEOlr5Qyb6ADIMA4poQ6KUS417NwiiKhRhllgbX8i2CfYdAzsbmJOdceiYoN5vw6CxSNtXgOaMvJtNoMuuR6SwLJjIsWJ9aD7Afex3cx2YH/x9uR/m53RE+93uW8aLhs7W86Ph8e/hoecvbQqo9MPPhUdZFqyh4ZzvS3sf5NPJpLu5tvuPL8lh3680alNjwqECT6EnCrs3VgJ2V923kWQY/KcpZYVYM37kxJNbV5aGpAjqMPrTHOBJf9r+X+CT+OFy687E6DV0Vslr+HjiprcKCcMeD8p2thkKb3Riq+AM=",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "prepare_email_verification",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "email_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "rZbLjqswDIbfJWsWsWPn0lepqoq2zAgJ0YqBIx1VvPskhUBZJKra2fBz8xc78U+4i0t1Gr6Pdft1/RG7/V2curpp6u9jcz2XfX1t/d27kOFALHZQCNKTmEnsJM7LOBYihh37rqpC1BPH029lV7W92LVD0xTiX9kMj5d+bmX70L7s/FNZiKq9ePXAr7qpwtlYrNEyHcoK5mA2egkHMq8CkMnMBNSAK0LSBoEZBFKsAFGvCMMbgkoTlHQ8ExRomyJQmgDsmGaEP39ioLUbCGcKAdSxECBeEEpu89CZPNBGBKBzbyGUVhFBIJOIXCF+GZYVMelCcn1BFta+UMm+gAyDAOKaEPBaibavZmFQxe40qFcCy7cI5h0CWRObk6y16Zmg3GzC0lmkTKrBc0ZfTcaoM+uR6SwDOjIMGJdaDzAfex3sx2YH9xduR/m53RE+93uW8aLhs7W86Ph8ezhYrMKUag/MfHiUsdEqCt7Zjti5OJ9aPs3Fo80P/rI81912swYldn5UoEl4krBr+2rAzOr3bfSzDG5SlLPCrBi+c2NIrKvLU1MFdBh9aM9xJH/Z/7/FJ/HH4dZdz9Vl6KqQ1fr34JPaKywID35Qf2fPULA+jKGKXw==",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "prepare_farcaster_verification",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "handle_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "rZZLjoMwDIbvkjWL2HFevUpVVbRlRkiIVhRGGlXcfZxCSlkkqtrZ8PPyF9uxMTdxqg7D975uv85XsdnexKGrm6b+3jfnY9nX55bv3oQMB9JiA4UgM4mdxE3iWcaxENFs33dVFayeOEy/lF3V9mLTDk1TiJ+yGe4vXS9le9e+7PipLETVnlgZ+FU3VTgbi8Vapk21gtlYW/MwB7KvAlCTnQloABeEpBUCMwikGAGiWRBWrwgqTVDS65mgwLgUgdIE0F7TjODzJwY6t4LoTCCAJgYCpB8IJdd+mIwf6CIC0Pu3EMqoiCCQSUQuEN6Gx47YdCC5uiAHS12oZF1AhkEAcU8I9BKJca96YSXEdFpJC0HLtwj6HQI5G4uTnHPpTFAumw8vkJRNFXiu0Zcm02gy+5GpLAsmMixYn9oPsB/3OriPmx38f3Q7ys/bHeHzfs8yXmz4bCwvdny+PHxsectjIVUemPnwKOtiqyh4Zxxp72M+jXzKxb3Md3xZHutuPaxBiQ2vCjSJniRMbY4G7Kw8t5GzDH5SlLPCrBi+c2NwrKvLQ1MFdFh9aI9xJb7sfy/xSfxxuHTnY3Uauip4tfw9sFNbhQXhjhflO1sNhTa7MUTxBw==",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "prepare_github_verification",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "handle_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "rZbLjqswDIbfJWsWsePc+ipVVdGWGSEhWjFwpKOKdx+nECiLRFU7G35u/mIn/gl3calOw/exbr+uP2K3v4tTVzdN/X1srueyr68t370LGQ6kxQ4KQWYSO4mbxLOMYyFi2LHvqipEPXGYfiu7qu3Frh2aphD/ymZ4vPRzK9uH9mXHT2UhqvbCysCvuqnC2Vis0TIdqhXMwdqaJRzIvgpATXYmoAFcEZI2CMwgkGIFiGZFWL0hqDRBSa9nggLjUgRKE0B7TTOCz58Y6NwGojOFAJpYCJBeEEpu8zCZPNBFBKD3byGUURFBIJOIXCG8DMuK2HQhub4gB2tfqGRfQIZBAHFNCPRaiXGvZmGsj61lHNBC0PItAr5DIGdjc5JzLj0TlJtNWDqLlE01eM7oq8k0msx6ZDrLgokMC9an1gPsx14H97HZwf+F21F+bneEz/2eZbxo+GwtLzo+3x4+Wt7ytpBqD8x8eJR10SoK3tmOtPdxPo18motHmx/4sjzX3XazBiV2PCrQJHqSsGtzNWBn5X0beZbBT4pyVpgVw3duDIl1dXlqqoAOow/tOY7El/3/W3wSfxxu3fVcXYauClmtfw+c1F5hQXjgQfnOXkOhzWEMVfwC",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "prepare_telegram_verification",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "handle_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "rZbbboMwDIbfJddcxE6cQ1+lqirasgkJ0YrBpKni3ecMAuUiUdXuhp+Tv9iJf8JdXKrT8Hms24/rl9jt7+LU1U1Tfx6b67ns62vLd+9ChoMmsYNCaDOJncRN4lnGsRAx7Nh3VRWiHjhMv5Vd1fZi1w5NU4jvshn+Xvq6le2f9mXHT2UhqvbCysCPuqnC2Vis0TIdSgrmYLJmCQdtnwUgaTsT0ACuCKk3CMwgUMcKEM2KsLQhqDRBSU8zQYFxKYJOE4A86RnB5w8MdG4DoUwhgCYWApoWhJLbPEwmD3QRAej9SwhlVERokElErhBehmVFbLqQXF9oB2tfqGRfQIahAeKaaKC1EuOezcKQid1pyMNCIPkKwchXCNrZ2JzaOZeeCZ2bTVg6SyubavCc0VeTEZrMemQ6y4KJDAvWp9YD7NteB/e22cH/h9tRvm93hPf9nmU8afhsLU86Pt8ePlre8raQag/MfHiUddEqCl7Zjsj7OJ/sVrlt8wNflue6227WoMSORwU9CU0Sdm2uBuysvG8jzzL4SVHOCrNi+M6NIbGuLk9NFdBh9KE9x5H4sv+5xSfxx+HWXc/VZeiqkNX698BJ7RUWGg88KN/ZExRkDmOo4hc=",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "prepare_twitter_verification",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "handle_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/9XdBXSTZ9/H8dC0hcIYNtiYYdtwSJqWpri7O8xooR1MYNjGvHN3d6Zsw93d3d3d3f39/R+SlxC65z3vw90955tzvqchSZPPdTctbXLf15XJdeWUze1yHYi4cj6Tcgc+2kUFwy4Lfgw9H5XO7bKlc1n2dC7Lkc5ludK5LJ+qGnZZgXRuVzCdywqlc1nhdC4rGrgs9JQp8LFq4KPPUy4uLiUhNsXr8yZ5YhOT/fGeuPjkcn6v3xvvj+8U6/f5Uvxx/oTE5MQET6I3zpfiTY1P9KV6rpwuRVy9L88NnWI7ZqTz8n/u9IVfYLbcKjLEatvhUuB8MdfV88VDzl8O3Cb4efaFyqQilNsdcnngFBG2DTw3dvIWdXB7Rrqdc4U+Z+1+C4ZtB7fD26GYg/dV3MFtGuXMNk2Ni43zhG4/p7+Xop372meoM/N/7owNv+D/+p63r13wfHTI+czua7/ns+jfMSqr+8r/U5Eh17ldf3+q6sz29gb/r/t3291zYydv1D/0/PDc2MmbJYOc/3sK/wF+o09oJwdfwpUxg3d6zJkcHHNJyJgjHBxzKciY3Q6OufQ/NGbPjZ28ZRzcfi43Y8xlHRxzFsh/NB4Xw+mFOGMhTh/EGQdxxkOc5SDOBIjTD3EmQpzlIc4KEGdFiLMSxFkZ4qwCcVaFOKtBnNUhzhoQZ02IsxbEWRvirANx1oU460Gc9SHOBhBnQ4izEcTZGOJsAnE2hTibQZzNIc4WEGdLiLMVxNka4mwDcbaFONtBnO0hzvshzgcgzgchzocgzochzg4QZxLEmQxxdoQ4O0GcKRBnKsT5CMTZGeLsAnE+CnE+BnE+DnE+AXF2hTi7QZxPQpzdIc4eEGdPiLMXxNkb4nwK4nwa4uwDcT4DcT4LcT4HcT4Pcb4Acb4Icb4EcaZBnC9DnK9AnK9CnK9BnK9DnG9AnG9CnG9BnG9DnO9AnO9CnO9BnO9DnB9AnB9CnB9BnB9DnJ9AnJ9CnJ9BnJ9DnF9AnF9CnF9BnF9DnN9AnN9CnN9BnN9DnD9AnD9CnH0hzp8gzp8hzl8gzl8hzt8gzt8hzn4Q5x8Q558Q518QZ3+IcwDEORDiHARxDoY4h0CcQyHOYRDncIhzBMQ5EuIcBXGOhjjHQJxjIc5xEOd4iHMCxDkR4pwEcU6GOKdAnFMhzmkQ53SIcwbEORPinAVxzoY450CccyHOeRDnfIhzAcS5EOJcBHEuhjiXQJxLIc5lEOdyiHMFxLkS4lwFca6GONdAnGshznUQ53qIcwPEuRHi3ARxboY4t0CcWyHObRDndohzB8S5E+LcBXHuhjj3QJx7Ic59EOd+iPMAxHkQ4jwEcR6GOI9AnEchzmMQ53GI8wTEeRLiPAVxnoY4z0CcZyHOcxDneYjzAsR5EeK8BHFehjjtDgnOTBBnBMTphjgjIc4oiDMa4swMcWaBOGMgzqwQZzaI8yaIMzvEeTPEmQPizAlx5oI4c0OceSDOWyDOvBBnPojzVojzNogzP8R5O8R5B8R5J8R5F8R5N8RZAOIsCHEWgjgLQ5xFIM57IM57Ic77IM6iEGcxiLM4xFkC4iwJcZaCOEtDnGUgzrIQpwfi9EKcsRCnD+KMgzjjIc5yEGcCxOmHOBMhzvIQZwWIsyLEWQnirAxxVoE4q0Kc1SDO6hBnDYizJsRZC+KsDXHWgTjrQpz1IM76EGcDiLMhxNkI4mwMcTaBOJtCnM0gzuYQZwuIsyXE2QribA1xtoE420Kc7SDO9hDn/RDnAxDngxDnQxDnwxBnB4gzCeJMhjg7QpydIM4UiDMV4nwE4uwMcXaBOB+FOB+DOB+HOJ+AOLtCnN0gzichzu4QZw+IsyfE2Qvi7A1xPgVxPg1x9oE4n4E4n4U4n4M4n4c4X4A4X4Q4X4I40yDOlyHOVyDOVyHO1yDO1yHONyDONyHOtyDOtyHOdyDOdyHO9yDO9yHODyDODyHOjyDOjyHOTyDOTyHOzyDOzyHOLyDOLyHOryDOryHObyDObyHO7yDO7yHOHyDOHyHOvhDnTxDnzxDnLxDnrxDnbxDn7xBnP4jzD4jzT4jzL4izP8Q5AOIcCHEOgjgHQ5xDIM6hEOcwiHM4xDkC4hwJcY6COEdDnGMgzrEQ5ziIczzEOQHinAhxToI4J0OcUyDOqRDnNIhzOsQ5A+KcCXHOgjhnQ5xzIM65EOc8iHM+xLkA4lwIcS6COBdDnEsgzqUQ5zKIcznEuQLiXAlxroI4V0OcayDOtRDnOohzPcS5AeLcCHFugjg3Q5xbIM6tEOc2iHM7xLkD4twJce6COHdDnHsgzr0Q5z6Icz/EeQDiPAhxHoI4D0OcRyDOoxDnMYjzOMR5AuI8CXGegjhPQ5xnIM6zEOc5iPM8xHkB4rwIcV6COC9DnK4IhjMTxBkBcbohzkiIMwrijIY4M0OcWSDOGIgzK8SZDeK8CeLMDnHeDHHmgDhzQpy5IM7cEGceiPMWiDMvxJkP4rwV4rwN4swPcd4Ocd4Bcd4Jcd4Fcd4NcRaAOAtCnIUgzsIQZxGI8x6I816I8z6IsyjEWQziLA5xloA4S0KcpSDO0hBnGYizLMTpgTi9EGcsxOmDOOMgzniIsxzEmQBx+iHORIizPMRZAeKsCHFWgjgrQ5xVIM6qEGc1iLM6xFkD4qwJcdaCOGtDnHUgzroQZz2Isz7E2QDibAhxNoI4G0OcTSDOphBnM4izOcTZAuJsCXG2gjhbQ5xtIM62EGc7iLM9xHk/xPkAxPkgxPkQxPkwxNkB4kyCOJMhzo4QZyeIMwXiTIU4H4E4O0OcXSDORyHOxyDOxyHOJyDOrhBnN4jzSYizO8TZA+LsCXH2gjh7Q5xPQZxPQ5x9IM5nIM5nIc7nIM7nIc4XIM4XIc6XIM40iPNliPMViPNViPM1iPN1iPMNiPNNiPMtiPNtiPMdiPNdiPM9iPN9iPMDiPNDiPMjiPNjiPMTiPNTiPMziPNziPMLiPNLiPMriPNriPMbiPNbiPM7iPN7iPMHiPNHiLMvxPkTxPkzxPkLxPkrxPkbxPk7xNkP4vwD4vwT4vwL4uwPcQ6AOAdCnIMgzsEQ5xCIcyjEOQziHA5xjoA4R0KcoyDO0RDnGIhzLMQ5DuIcD3FOgDgnQpyTIM7JEOcUiHMqxDkN4pwOcc6AOGdCnLMgztkQ5xyIcy7EOQ/inA9xLoA4F0KciyDOxRDnEohzKcS5DOJcDnGugDhXQpyrIM7VEOeaDHJGhDl9nnJxcSkJsSlenzfJE5uY7I/3xMUnl/N7/d54f3ynWL/Pl+KP8yckJicmeBK9cb4Ub2p8oi81cN9FHRzz2n9ozJ4bO3nXRTi3/SLdjK9zpIPbbz3kuR3l4Jg3QMYc7eCYN0LGnNnBMW+CjDmLg2PeDBlzjINj3gIZc1YHx7wVMuZsDo55G2TMNzk45u2QMWd3cMw7IGO+2cEx74SMOYeDY94FGXNOB8e8GzLmXA6OeQ9kzLkdHPNeyJjzODjmfZAx3+LgmPdDxpzXwTEfgIw5n4NjPggZ860OjvkQZMy3OTjmw5Ax53dwzEcgY77dwTEfhYz5DgfHfAwy5jsdHPNxyJjvcnDMJyBjvtvBMZ+EjLmAg2M+BRlzQQfHfBoy5kIOjvkMZMyFHRzzWciYizg45nOQMd/j4JjPQ8Z8r4NjvgAZ830Ojvmig2N2u67s47MiMOASqqQqpUqrMqqsPY7yqljbFipOxatyKkH5VaIqryqoiqqSqqyqBMZeTVVXNVRNVUvVVnVUXVVP1VcNVEPVSDVWTVRT1Uw1Vy1US9VKtVZtVFvVTrVX96sH1IPqIfWw6qCSVLLqqDqpFJWqHlGdVRf1qHpMPa6eUF1VN/Wk6q56qJ6ql+qtnlJPqz7qGfWsek49r15QL6qXVJp6Wb2iXlWvqdfVG+pN9ZZ6W72j3lXvqffVB+pD9ZH6WH2iPlWfqc/VF+pL9ZX6Wn2jvlXfqe/VD+pH1Vf9pH5Wv6hf1W/qd9VP/aH+VH+p/mqAGqgGqcFqiBqqhqnhaoQaqUap0WqMGqvGqfFqgpqoJqnJaoqaqqap6WqGmqlmqdlqjpqr5qn5aoFaqBapxWqJWqqWqeVqhVqpVqnVao1aq9ap9WqD2qg2qc1qi9qqtqntaofaqXap3WqP2qv2qf3qgDqoDqnD6og6qo6p4+qEOqlOqdPqjDqrzqnz6oK6qC6py8q+yTKpCOVWkSpKRavMKouKUVlVNnWTyq5uVjlUTpVL5VZ51C0qr8qnblW3qfzqdnWHulPdpe5WBVRBVUgVVkXUPepedZ8qqoqp4qqEKqlKqdKqjCqrPMqrYpVPxal4VU4lKL9KVOVVBVVRVVKVVRVVVVVT1VUNVVPVUrVVHVVX1VP1VQPVUDVSjVUT1VQ1U81VC9VStVKtVRvVVrVT7dX96gH1oHpIPaw6qCSVrDqqTipFpapHVGfVRT2qHlOPqydUV9VNPam6qx6qp+qlequn1NOqj3pGPaueU8+rF9SL6iWVpl5Wr6hX1WvqdfWGelO9pd5W76h31XvqffWB+lB9pD5Wn6hP1Wfqc/WF+lJ9pb5W36hv1Xfqe/WD+lH1VT+pn9Uv6lf1m/pd9VN/qD/VX6q/GqAGqkFqsBqihqphargaoUaqUWq0GqPGqnFqvJqgJqpJarKaoqaqaWq6mqFmqllqtpqj5qp5ar5aoBaqRWqxWqKWqmVquVqhVqpVarVao9aqdWq92qA2qk1qs9qitqptarvaoXaqXWq32qP2qn1qvzqgDqpD6rA6oo6qY+q4OqFOqlPqtDqjzqpz6ry6oC6qS+qysl8oMqkI5VaRKkpFq8wqi4pRWVU2dZPKrm5WOVROlUvlVnnULSqvyqduVbep/Op2dYe6U92l7lYFVEFVSBVWRdQ96l51nyqqiqniqoQqqUqp0qqMKqs8yqtilU/FqXhVTiUov0pU5VUFVVFVUpVVFft9RVVT1VUNVVPVUrVVHVVX1VP1VQPVUDVSjVUT1VQ1U81VC9VStVKtVRvVVrVT7ZWtNW/ruNsa6bb+uK3t3UHZmtS23rOtpWzrFNsawLa+rq1da+vC2pqrtp6prRVq63DaGpe2fqStzWjrHtqagrZen62FZ+vM2Rputj6arT1m63rZmlm2HpWt9WTrKNkaRbb+j62tk6ZsTRhbb8XWMrF1QmwNDlvfwtaOsHUZbM0DW0/A5uq3efBtjnmbv93mRrd5x21Ob5sv2+aitnmebQ5lm5/Y5v61eXVtzlqbD9bmWrV5TG2OUJt/0+a27KtsTkab79DmErR5+mwOPJtfzuZus3nRbM4xm8/L5sqyeahsjiebP8nmJrJ5f2xOHZuvxuaCsXlWbA4Tmx/E5t6weS1szgibj8HmOrB5BOwYfTv+3Y4tn6LsmGg73tiO5bXjZO0YVDu+046dtOMS7Zg/O57OjlWz48DsGCs7fsmODbLjbuyYFjtexI7FsN9X7RgC2z/f9n23/cptP2vbh9n2w7X9Um0/Tdtv0fbj26JsPy/b78n2A7L9Ymw/EdtvwvYjsPfV7X1me9/V3oe09+XsfSp738bex7DX9e11bnvd114HtdcF7XUye93IXkex1xXs72z7u9P+DrO/S+z39Igr//W7bD9jO5VwXT0Ffiy43IHrbb9c20/V9tu0/Rhtvz7bz832+7L9oGy/INtPxvYbsf0obL8Ce5/d3ne292HtfUl7n87et7L3cex9DXud3173tteB7XVRe53QXjcrqAqpwsr+7ra/Q+3vMvs7xfZ9L6aKu64/ZQo5nyvwMe+Oavm7z+tXK/w2iYGPMYGPESHX25irBv7tubGTNybscZ28f78nLiHGdf02cNDvi3Fd+xzJqPuPypj7/9d+xnaqmXb1/kPHEnxcd9jtwj/Hrs8eOB/6PAveJjiOjHge6escn8HbyRu8/8wZ9HUObrfokG3nTmdMwcfPHva1Cl6f3sfgfYVfF3ysrK4MfQ57/93YQv3B50bOsNuHb4O/u6/o/+d9/Te/pqHbOvRr+q/bpF29LiLsusiQ66LDrotKu36M9n9RwZDbhX8PRoZdF3ye2Kl22tX7KBlyf6UC54PbLyN/dmfUzww75UnHH/pYdsqcdnV7BLeNO+Sy4DYPfg2yhN4+7LqYkOsi0659nKyBf0eGPE7ofQUdUWG3D/5OkiPwMTrkc4KfnzOdx48Oe/xr3OlcFr5dYtK5fUw6t7fnaJHA+WyB7DnkC7m/v/seiXBdf385XNf/PAh+bgZ/P8cGrZHpWEN/vgQf337vyxs437NXtx4p9brW6pPSsXevLt261kjq2DnFFXYK/eYLfWKG/yIaugFCB5refbhDPj+9k31Bgr8kRaZd+3lVA5d7buCU4Pd4go8d/IaICnO6wh4/Kuz2/sC/s4aMK/jxRg4CTE1I8qb6klKT4pM6dYrrmJQ77P5drqtPPNtO/wNI1TEK2gcCAA==",
      "debug_symbols": "rZbLjqswDIbfJWsWsePc+ipVVdGWGSEhWjFwpKOKdx+nECiLRFU7G35u/mIn/gl3calOw/exbr+uP2K3v4tTVzdN/X1srueyr68t370LGQ6kxQ4KQWYSO4mbxLOMYyFi2LHvqipEPXGYfiu7qu3Frh2aphD/ymZ4vPRzK9uH9mXHT2UhqvbCysCvuqnC2Vis0TIdqhXMwdqaJRzIvgpATXYmoAFcEZI2CMwgkGIFiGZFWL0hqDRBSa9nggLjUgRKE0B7TTOCz58Y6NwGojOFAJpYCJBeEEpu8zCZPNBFBKD3byGUURFBIJOIXCG8DMuK2HQhub4gB2tfqGRfQIZBAHFNCPRaiXGvZmEA4nQaoJWg5VsE/Q6BnI3NSc659ExQbjaXLJCUTTV4zuiryTSazHpkOsuCiQwL1qfWA+zHXgf3sdnB/4XbUX5ud4TP/Z5lvGj4bC0vOj7fHj5a3vK2kGoPzHx4lHXRKgre2Y6094td5dNcPNr8wJflue62mzUoseNRgSbRk4Rdm6sBOyvv28izDH5SlLPCrBi+c2NIrKvLU1MFdBh9aM9xJL7s/9/ik/jjcOuu5+oydFXIav174KT2CgvCAw/Kd/YaCm0OY6jiFw==",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8ALAt5ytcCyBATXo4W\na3TzChF5FHVqxda2AOmcsM5ZfR8B7Lsug47vTgMq8VqFOrEL+YXt830GyJzCyhdzip0SwRwxwZCr\n17yVt1tBoFtHI0cnRY1XRLxqSKgFfJbvPMl8DHFt/+10kelLnpjHUwZ9AkGCMAKneA2wO70XEOrt\nr+4NLIl8Ue5HqYUow1E+0LtFBOkTkptcBrpYM8ozwID+tQ2hKx7IYj2WThp+aE9mxVjl+aYnS6ej\n6gHWpa1ybKuUK+89cSsynFNnJAsoRrwLJWbYhsESqICnMMV1BlbSl8scn23g50A1TtYmd7SOgJ6O\nqfX339zAoyy/L/gQ+uLkAQu3b/lVmWbb5M3hkIT86Eq6hUcad5CZICq284BduyP1EMWwxTLmXMMC\niKUK0s4Vpiu8EXg7hF7j4b7N37n9igENm6R1fKb3PViTHwGktBjo/ggn6AxGjAQWDhbFiKd/nBgm\nV8EbQaT/WAbmXR8gchohShoMpCuUZ4IMlV0p8eYNIuSmLVifXcWOAD4X0sKeZqqcjXq3WBuYEO2n\nPlPhfd8OP4PTyf+mJHwLpRXOLm9SrLCVbfb6d5ltuCSwof5icCmMMxH8kXD5LelAsEKquZDVPGo7\nJjOc2mtz35IIMUFZB7BfQIphKEclkBa5IErkvzdTfrGWsFwdmPpRAWqbrLsNgfBLU5FGkj9C6jtQ\nfFyptnhJ2RqT8s+4YJ2UFzvv6gZUshpTMhmfHtSlj/gDr6E8I5XJfLNhmlJViuh7MvzZIYydFFVw\ntAx5vv2HNP3Q4JFW04X93LzMKLwx+vkSuHoUP3601/up4MG/pE+mOWzXVgkilY33FlQ6uY4oFbfW\nOyHrSJuRmKhkLL92LlSOA5ve52T8+85x9jwkt2+sZv9oEf1BtfmTbZMquuTG6TPg05wk6o4uDu5w\nKlMm81nJR8AUoX18ClXS1F7o7fbsFlwRPSgrmEfVYv1BQCIOR+GCrxpw0tC/U/KBmNxua015bsn0\nE4YWuRKVxKct3D6sKlhhIC6MZiOidcRs8oWZaDnOsVWBvsaEb9olb2naDqox0ekNEUbsxzZ25YQo\nHwgaEXvnRGLcrMFdZe9BEu9mhKdFVh3Fw3M7E2oKmLSawuXT81gvfOJGNQdSh46+KtppgFZ8Lrlv\nq7Xg9BBy6oYawEOcyjY9ZazNO4JuXiJrY0YKXLEloYfBJuDVNNbM2o3SuI4bg571gSWdoFcA1yRN\nHbGlOBJ+clADmTRx0Oc2ZsbPavvWmB5aig0RBlPG5Apcek6rGDG8DzbSUa5RxVaj1cQqwFwMcdNp\nHIWX7ddrg1oqQzIH/bYMWaxQSDaR51or+NSGyoAUnDeD81VUVuJUs3soSh4wFa6mK3HRLzmEDqIc\navjn/inmMqjtAx9Cxv4ILviyJn8lpUY+jvvGBJiqXMKkomINF27nydvox1IW0jZsPrwX43LO1dcF\nmjSNkHQMoZhtA4d0rK/CkaXF+75pC/e2SBc0gYI8wk30Fqy/aBrUpbQME3WgU6OEQlDeSm0zT2Xq\nLlsseTRYf3FEocXHLlOvg9esrfgWVd6yOagZtI2cMW0uphDt2hr+xhKZQPbDQnBE+fzN0IYk4Rgt\nE/zaX4Z1jySJ9duo+LkeKYan28p1o4ulB303g1xxhifWgPRLIfG2LsGlo9yXBjtBneizYKEWyXIZ\nF2+g4buMm2jLdTqGZogND2tuobf2kABkGZM0EbDEgwFZzPQKtpH+iTQ22AjljRYo30ap/XJQfW5d\nTIMj7P+BM9ZeKDfOAWV2XPgbIaO9CJXAp9oeiDKe48nTM9bdqB3sQR/tVspt4/sQeWZ4WcctdYTD\ngwWt8tjr98T4uWTOOjkqE3T3/ZaC6a6P3+E4ogrcicSNdbVxY29bvrSoBvb0WWICMBtq5OsOu+rd\nIDNABm8oE1dI8RljHD/gf6nXAANOPidFTvmStL+EuXuqdHEuJXg1Ud9QwATsfNH03Ys7ZKZvKsSX\nm2XlZWjFoxsU7Rj3bPDO7MtHmN50GuibZOglj4RHfBtiVlpVm6e7OIMuLSmftoZ40BULzFsW3IJS\nNT1D+nDpkjnBwcZ+JxoO6sUV06xaGZq7dJM6TvyYxZsoFO3nzSfa7QDDPBKGC8SwRi041tS6Hkdj\np07NsRyh80aWgMJw5VFRU0RZL1kYj6dlEts56JKCazJhDuCCUeAF/OkXwNXcoBlHfFL2B1MythIA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACJk1f5X0SRaj5IJYrF0/zBh2dVL8Vx1jS5lq5r9uoXSoQQeLorWboCfTqacp+f5SbYRCK\nZye9DfC3RZQsbgvxXgDENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJiS18GKk8\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2780273261004034709": {
            "error_kind": "string",
            "string": "Invalid registry address"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9981700386366515877": {
            "error_kind": "string",
            "string": "Invalid admin address"
          },
          "10694658649089935141": {
            "error_kind": "string",
            "string": "Only oracle"
          },
          "12966488333158356738": {
            "error_kind": "string",
            "string": "Invalid oracle address"
          },
          "14164235797325520362": {
            "error_kind": "string",
            "string": "Already verified"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15371982489698173836": {
            "error_kind": "string",
            "string": "Only admin"
          },
          "15691186487269729606": {
            "error_kind": "string",
            "string": "Admin already initialized"
          },
          "17057512740490565102": {
            "error_kind": "string",
            "string": "Admin already set"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "set_initial_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "admin_address",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "9981700386366515877": {
            "error_kind": "string",
            "string": "Invalid admin address"
          },
          "15691186487269729606": {
            "error_kind": "string",
            "string": "Admin already initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw4AAgABJiUAAAC6JwICAAQvCgACAAMcCgMFARwKBQQAHAoEAwEnAgQBAAoqAwQFJAIABQAAAHwlAAAA4ycCAwAACioBAwUKKgUEAyQCAAMAAACYJQAAAPUnAgMAAzAKAAEAAycCAwACMAoAAQADJwIBAAEwCgABAAImKACABAR4AA0AAACABIADJACAAwAAAOIqAQABBfeh86+lrdTKPAQCASYqAQABBdnCSvmGHyVGPAQCASYqAQABBYqGH523wWqlPAQCASY=",
      "debug_symbols": "tZXbjuIwDIbfJde9SBwnjvsqI4QKlFGlqqBOu9IK9d03mTYEVkq0O8zcYLupP3z4ITdxag/z+74bzpcPUb/dxGHs+r573/eXYzN1l8E/vQkZPsiI2lTCydVYUVMlWK1mjZT0oQvWrlZtseLVAopayeDw5mj/hIPl1SKt1oB/wQSHNsdqUUNIsW5zyOdCOCIOzrJUIpa9n8a2DVU/9OG7uzZjO0yiHua+r8Svpp8/X/q4NsOnnZrRn3p2O5y89cBz17fBW6qULfOp2lmzZWvH5g4wzwSVJyiFkaAUpRIUwRMC8ggyDjcEWZmKsPxE0AWCdjoSECBHwFIbmuy9D5ScYxT7oNQHyBzB5gmGYAMYlyrQqP9jn5j2Sbl9lgiMdwI7lSNwnsAmDpI55QP9cwkoIRJQYl6UJVWiVHGbCJRVpSqs00kdy3DSuNw6VUmXTnNUhOOsIlRRmOjSD8yAzUGKAyV5H+hDGX8P1H7DQOn1gbrXB8o/PFCFcRoYJpAZKHyDQuF1hcLrCoUvK3Tno+bYjU839BJoY9cc+nYLz/NwfDidfl/jSbzhr+Pl2J7msQ2kdM0r//mmTYVyFy5uH/j/L7S7JXz1Hw==",
      "brillig_names": [
        "set_initial_admin"
      ]
    },
    {
      "name": "set_oracle",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "oracle",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "12966488333158356738": {
            "error_kind": "string",
            "string": "Invalid oracle address"
          },
          "15371982489698173836": {
            "error_kind": "string",
            "string": "Only admin"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw4AAgABJiUAAACaHgIAAgEnAgMAAy8KAAMABAoqAgQDJAIAAwAAAG0lAAAAwycCAgAACioBAgMnAgIBAAoqAwIEJAIABAAAAI4lAAAA1ScCAgACMAoAAQACJigAgAQEeAANAAAAgASAAyQAgAMAAADCKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQXVVEChT/wDjDwEAgEmKgEAAQWz8jhwiiaXAjwEAgEm",
      "debug_symbols": "nZRRj4MgDMe/C88+UKAW/CqXZXEbW0yMM04vuSx+9ytGdD5ALvdCC8jP/tumb3Hzl+lxbrr78yWqr7e4DE3bNo9z+7zWY/Ps+PQtZFgIRaULYXlj2eBiHIjKsSkXA9Ks1okKgB0w0Qknkh1lohNPNK2OUeyUwQkn5TwXIoZxHgfvQxQfcXG0fT34bhRVN7VtIb7rdlo+evV1t9ixHviW2b67sWXgvWl98OZify3TT1GSXl+jdLAB8EiANMFYbVaCsUZthNIdCCpNsEhqJVi0lCLkVICKOUDQNqXCpAlcSFwJALQnEkgdEJhGENqYCColpmSUGYK2sRhkVDKVlJOhqdx0GOn+lUzYk2lkKplZwlZQVFIlmyqDcBhluI+uVPT3GJR2WwzokjFk+pLFQ8ylUZTsCdCZ3pY6CrESbaockGlNspsSsk4mEZjtbru3N6ryADnxrr42w2EmzoE2NPWl9ev2PnXXj9vxp483cab2w/Pqb9PgA2kfrMDrl3KFNqcwKHmjsdB0msOvfwE=",
      "brillig_names": [
        "set_oracle"
      ]
    },
    {
      "name": "set_profile_registry",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "registry",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2780273261004034709": {
            "error_kind": "string",
            "string": "Invalid registry address"
          },
          "15371982489698173836": {
            "error_kind": "string",
            "string": "Only admin"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw4AAgABJiUAAACaHgIAAgEnAgMAAy8KAAMABAoqAgQDJAIAAwAAAG0lAAAAwycCAgAACioBAgMnAgIBAAoqAwIEJAIABAAAAI4lAAAA1ScCAgABMAoAAQACJigAgAQEeAANAAAAgASAAyQAgAMAAADCKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQXVVEChT/wDjDwEAgEmKgEAAQUmlYPM5KmSlTwEAgEm",
      "debug_symbols": "nZTdjoMgEIXfhWsv+B/wVTZNY1vamBA1VDfZNL77Dka0bhay2RtmAPk8M5zwIjd3mR7ntrv3T1J/vMgltN63j7Pvr83Y9h2uvgiNAyhSi4oYnBgMagmWkdpi0EtgVK7RkpoxTJhMSVyhmHCZkrQiYE0kx0THJK7oea5IknEeg3NRxZsuVDs0wXUjqbvJ+4p8Nn5aPnoOTbfEsQm4i2zX3TAi8N56F7O52k/T/FEJAOtpCVZtAHUksALBCJkIRvKNoO2BwPMEo4CvBKMM5AilKgz/VcOPKmSegBepVgJjsDeSAT8gVB4ByiQRoKnKlaELBGFEIkiebSWUyhCgtzoktf9qJntrpsw1s0jYREhLTdZUBYRViWAt2wAc/q7Bys3YFiCroeBL7B9LvZQcsp5gouBtKlIhhiqTuw5WsCYYYZMrjKVZhCq62+z2VlwfICecNdc2HN7EOdJC21y8W6f3qbu+7Y5fQ9pJb+oQ+qu7TcFF0v6wMhw/uK2EPMWHEidCVQJOc/z1Nw==",
      "brillig_names": [
        "set_profile_registry"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=",
      "debug_symbols": "nZPdioMwEIXfZa69MJo/fZVSStRYAiFKqguL+O47KclWF7KU3mQyzpzPo5lsMOhuvd+MG6cHtJcNOm+sNfebnXq1mMnh0w3KsJAa2roAQqFlGBi0AgOHttn3AlL/bfFah/YDALGz8tot0LrV2gK+lF2fTY9ZuWdclMdqWYB2A0YEjsbqsNuLl7rMS0lJiYxy3Avxi8DsBCF5iJA8IiSKEkCQk77K61nFop6x1zcQyt81IGuRDLAmZ4Dm9bRuop5y+ZEBSZOBRuYM8Lyel+kP8Ip/YqCpqghoapYzIP8xINMQifLPEVwxVb3xp9neA8ob1Vkd03F1/aG6fM+pku7G7KdeD6vXgXS4ILhecAir+rqHt/0A",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "transfer_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "9981700386366515877": {
            "error_kind": "string",
            "string": "Invalid admin address"
          },
          "15371982489698173836": {
            "error_kind": "string",
            "string": "Only admin"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw4AAgABJiUAAACVHgIAAgEnAgMAAy8KAAMABAoqAgQFJAIABQAAAG0lAAAAvicCAgAACioBAgQnAgIBAAoqBAIFJAIABQAAAI4lAAAA0DAKAAEAAyYoAIAEBHgADQAAAIAEgAMkAIADAAAAvSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEF1VRAoU/8A4w8BAIBJioBAAEFioYfnbfBaqU8BAIBJg==",
      "debug_symbols": "nZTbioMwEIbfJdde5DQ5+CqlFGvTIohKqgtL8d13IsbDQsKyN84kMV/y/xnmQx7uPr1uTffs36S8fMjdN23bvG5tX1dj03c4+yE0fDSQUhTE4MBggCVYRkqLQS2BUblGS0rGMGEyJmGGYsJlTOKM0GsiOSZqngsST7+N3rlw+OE6eMmh8q4bSdlNbVuQr6qdlp/eQ9Utcaw8riLSdQ+MCHw2rQvZXOy7aXorCBV3g9BmA8CZwNIEaYRcCdJIvhGUPRF4mmBA85VgwOgUIadCUh1VSA4pFTJNwPeDlcCY3o1kmp8QkEZoMNEIrSikZKgMQRgRCZInrdQ5GUKrTYek9j9mCnswU6fMzD4H2I1gebKoMggLUYa1bANw/fc7ADfxDiCTKlimLtE/Fr08GvG7JpjI1DYVUYihYFLPwTKlqY2IbmpjaRIB2eo2e3kDVyfIFUdV3fhTK5wDzTfVvXXr8Dl19WF1/B7iSmylg+9r95i8C6S9nzL8XvA1hLiG/ogD7BhCXedw9A8=",
      "brillig_names": [
        "transfer_admin"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "AztlanPrivateSocial"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "profile_registry",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "oracle",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin_initialized",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "twitter_verified",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "discord_verified",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "telegram_verified",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "github_verified",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "farcaster_verified",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "email_verified",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "twitter_verified_at",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "discord_verified_at",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "telegram_verified_at",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "github_verified_at",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000e"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "farcaster_verified_at",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "email_verified_at",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000010"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "verification_count",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000011"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_twitter_verifications",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000012"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_discord_verifications",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000013"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_telegram_verifications",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000014"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_github_verifications",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000015"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_farcaster_verifications",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000016"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_email_verifications",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000017"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_verifications",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000018"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::change_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::change_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "_verification_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::complete_discord_verification_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::complete_discord_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "_verification_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::complete_email_verification_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::complete_email_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "_verification_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::complete_farcaster_verification_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::complete_farcaster_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "_verification_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::complete_github_verification_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::complete_github_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "_verification_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::complete_telegram_verification_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::complete_telegram_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "_verification_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::complete_twitter_verification_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::complete_twitter_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztlanPrivateSocial::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::emergency_set_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::emergency_set_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztlanPrivateSocial::get_admin_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::get_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztlanPrivateSocial::get_all_global_counts_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 6,
                "type": {
                  "kind": "field"
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::get_all_global_counts_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztlanPrivateSocial::get_oracle_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::get_oracle_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztlanPrivateSocial::get_profile_registry_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::get_profile_registry_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::get_profile_verification_count_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::get_profile_verification_count_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::get_profile_verifications_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 6,
                "type": {
                  "kind": "boolean"
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::get_profile_verifications_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztlanPrivateSocial::get_total_verifications_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::get_total_verifications_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztlanPrivateSocial::initialize_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::initialize_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztlanPrivateSocial::is_admin_initialized_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::is_admin_initialized_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::is_discord_verified_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::is_discord_verified_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::is_email_verified_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::is_email_verified_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::is_farcaster_verified_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::is_farcaster_verified_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::is_github_verified_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::is_github_verified_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::is_telegram_verified_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::is_telegram_verified_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::is_twitter_verified_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::is_twitter_verified_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "handle_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::prepare_discord_verification_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::prepare_discord_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "email_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::prepare_email_verification_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::prepare_email_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "handle_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::prepare_farcaster_verification_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::prepare_farcaster_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "handle_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::prepare_github_verification_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::prepare_github_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "handle_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::prepare_telegram_verification_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::prepare_telegram_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "handle_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::prepare_twitter_verification_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::prepare_twitter_verification_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::set_initial_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::set_initial_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "oracle",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::set_oracle_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::set_oracle_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "registry",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::set_profile_registry_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::set_profile_registry_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanPrivateSocial::transfer_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanPrivateSocial::transfer_admin_abi"
        }
      ]
    }
  },
  "file_map": {
    "104": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "107": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "146": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "147": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "163": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "172": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "270": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "288": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "305": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "325": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "343": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "344": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "363": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "50": {
      "path": "/home/babi/aztlan_contract/src/main.nr",
      "source": "use dep::aztec::macros::aztec;\n\n// CONTRACT 2: PRIVATE SOCIAL VERIFIER - FLEXIBLE DEPLOYMENT\n// Registry address can be set after deployment!\n#[aztec]\npub contract AztlanPrivateSocial {\n    use dep::aztec::macros::{functions::{public, private}, storage::storage};\n    use dep::aztec::prelude::{AztecAddress, PublicMutable, Map};\n    use dep::aztec::protocol_types::traits::FromField;\n    \n    #[storage]\n    struct Storage<Context> {\n        // Contract references - can be updated!\n        profile_registry: PublicMutable<AztecAddress, Context>,\n        oracle: PublicMutable<AztecAddress, Context>,\n        admin: PublicMutable<AztecAddress, Context>,\n        admin_initialized: PublicMutable<bool, Context>, // NEW: Track if admin is set\n        \n        // Individual verification tracking per profile\n        twitter_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        discord_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        telegram_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        github_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        farcaster_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        email_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        \n        // Verification timestamps (block numbers)\n        twitter_verified_at: Map<Field, PublicMutable<Field, Context>, Context>,\n        discord_verified_at: Map<Field, PublicMutable<Field, Context>, Context>,\n        telegram_verified_at: Map<Field, PublicMutable<Field, Context>, Context>,\n        github_verified_at: Map<Field, PublicMutable<Field, Context>, Context>,\n        farcaster_verified_at: Map<Field, PublicMutable<Field, Context>, Context>,\n        email_verified_at: Map<Field, PublicMutable<Field, Context>, Context>,\n        \n        // Verification count per profile\n        verification_count: Map<Field, PublicMutable<Field, Context>, Context>,\n        \n        // Global counters (for stats)\n        total_twitter_verifications: PublicMutable<Field, Context>,\n        total_discord_verifications: PublicMutable<Field, Context>,\n        total_telegram_verifications: PublicMutable<Field, Context>,\n        total_github_verifications: PublicMutable<Field, Context>,\n        total_farcaster_verifications: PublicMutable<Field, Context>,\n        total_email_verifications: PublicMutable<Field, Context>,\n        total_verifications: PublicMutable<Field, Context>,\n    }\n\n    #[public]\n    fn constructor() {\n        // Initialize without admin parameter\n        storage.admin.write(AztecAddress::zero());\n        storage.admin_initialized.write(false);\n        storage.oracle.write(AztecAddress::zero()); // Will be set after admin\n        storage.profile_registry.write(AztecAddress::zero()); // Will be set later\n        \n        // Initialize global counters\n        storage.total_twitter_verifications.write(0);\n        storage.total_discord_verifications.write(0);\n        storage.total_telegram_verifications.write(0);\n        storage.total_github_verifications.write(0);\n        storage.total_farcaster_verifications.write(0);\n        storage.total_email_verifications.write(0);\n        storage.total_verifications.write(0);\n    }\n\n    // NEW: MANUAL ADMIN INITIALIZATION FUNCTIONS\n    \n    #[public]\n    fn initialize_admin() {\n        assert(!storage.admin_initialized.read(), \"Admin already initialized\");\n        \n        // HARDCODED YOUR ADDRESS\n        let admin_address = AztecAddress::from_field(\n            0x30390871bfa13ca49d58be1741dfb724562db24b52ca967a1d4a7d0b08faced4\n        );\n        \n        storage.admin.write(admin_address);\n        storage.oracle.write(admin_address); // Default oracle = admin\n        storage.admin_initialized.write(true);\n    }\n\n    #[public] \n    fn set_initial_admin(admin_address: AztecAddress) {\n        assert(!storage.admin_initialized.read(), \"Admin already initialized\");\n        assert(admin_address != AztecAddress::zero(), \"Invalid admin address\");\n        \n        storage.admin.write(admin_address);\n        storage.oracle.write(admin_address); // Default oracle = admin\n        storage.admin_initialized.write(true);\n    }\n\n    #[public]\n    fn emergency_set_admin(new_admin: AztecAddress) {\n        let current_admin = storage.admin.read();\n        assert(current_admin == AztecAddress::zero(), \"Admin already set\");\n        assert(new_admin != AztecAddress::zero(), \"Invalid admin address\");\n        \n        storage.admin.write(new_admin);\n        storage.oracle.write(new_admin); // Default oracle = admin\n        storage.admin_initialized.write(true);\n    }\n\n    // ADMIN FUNCTIONS - Set addresses after deployment\n    \n    #[public]\n    fn set_profile_registry(registry: AztecAddress) {\n        let caller = context.msg_sender();\n        assert(caller == storage.admin.read(), \"Only admin\");\n        assert(registry != AztecAddress::zero(), \"Invalid registry address\");\n        storage.profile_registry.write(registry);\n    }\n\n    #[public]\n    fn set_oracle(oracle: AztecAddress) {\n        let caller = context.msg_sender();\n        assert(caller == storage.admin.read(), \"Only admin\");\n        assert(oracle != AztecAddress::zero(), \"Invalid oracle address\");\n        storage.oracle.write(oracle);\n    }\n\n    #[public]\n    fn transfer_admin(new_admin: AztecAddress) {\n        let caller = context.msg_sender();\n        assert(caller == storage.admin.read(), \"Only admin\");\n        assert(new_admin != AztecAddress::zero(), \"Invalid admin address\");\n        storage.admin.write(new_admin);\n    }\n\n    // NEW: Better change admin function\n    #[public]\n    fn change_admin(new_admin: AztecAddress) {\n        let caller = context.msg_sender();\n        assert(caller == storage.admin.read(), \"Only admin\");\n        assert(new_admin != AztecAddress::zero(), \"Invalid admin address\");\n        \n        storage.admin.write(new_admin);\n    }\n\n    // PRIVATE FUNCTIONS - Process data privately\n    \n    #[private]\n    fn prepare_twitter_verification(\n        profile_id: Field,\n        handle_hash: Field\n    ) -> Field {\n        let verification_hash = handle_hash + profile_id + 1000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_discord_verification(\n        profile_id: Field,\n        handle_hash: Field  \n    ) -> Field {\n        let verification_hash = handle_hash + profile_id + 2000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_telegram_verification(\n        profile_id: Field,\n        handle_hash: Field\n    ) -> Field {\n        let verification_hash = handle_hash + profile_id + 3000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_github_verification(\n        profile_id: Field,\n        handle_hash: Field\n    ) -> Field {\n        let verification_hash = handle_hash + profile_id + 4000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_farcaster_verification(\n        profile_id: Field,\n        handle_hash: Field\n    ) -> Field {\n        let verification_hash = handle_hash + profile_id + 5000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_email_verification(\n        profile_id: Field,\n        email_hash: Field\n    ) -> Field {\n        let verification_hash = email_hash + profile_id + 6000000;\n        verification_hash\n    }\n\n    // PUBLIC FUNCTIONS - Store verification with profile tracking\n    \n    #[public]\n    fn complete_twitter_verification(\n        profile_id: Field,\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        assert(!storage.twitter_verified.at(profile_id).read(), \"Already verified\");\n        \n        // Set individual verification\n        storage.twitter_verified.at(profile_id).write(true);\n        storage.twitter_verified_at.at(profile_id).write(1); // Should be block.number\n        \n        // Update profile verification count\n        let current_count = storage.verification_count.at(profile_id).read();\n        storage.verification_count.at(profile_id).write(current_count + 1);\n        \n        // Update global counters\n        storage.total_twitter_verifications.write(\n            storage.total_twitter_verifications.read() + 1\n        );\n        storage.total_verifications.write(\n            storage.total_verifications.read() + 1\n        );\n    }\n\n    #[public]\n    fn complete_discord_verification(\n        profile_id: Field,\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        assert(!storage.discord_verified.at(profile_id).read(), \"Already verified\");\n        \n        storage.discord_verified.at(profile_id).write(true);\n        storage.discord_verified_at.at(profile_id).write(1);\n        \n        let current_count = storage.verification_count.at(profile_id).read();\n        storage.verification_count.at(profile_id).write(current_count + 1);\n        \n        storage.total_discord_verifications.write(\n            storage.total_discord_verifications.read() + 1\n        );\n        storage.total_verifications.write(\n            storage.total_verifications.read() + 1\n        );\n    }\n\n    #[public]\n    fn complete_telegram_verification(\n        profile_id: Field,\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        assert(!storage.telegram_verified.at(profile_id).read(), \"Already verified\");\n        \n        storage.telegram_verified.at(profile_id).write(true);\n        storage.telegram_verified_at.at(profile_id).write(1);\n        \n        let current_count = storage.verification_count.at(profile_id).read();\n        storage.verification_count.at(profile_id).write(current_count + 1);\n        \n        storage.total_telegram_verifications.write(\n            storage.total_telegram_verifications.read() + 1\n        );\n        storage.total_verifications.write(\n            storage.total_verifications.read() + 1\n        );\n    }\n\n    #[public]\n    fn complete_github_verification(\n        profile_id: Field,\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        assert(!storage.github_verified.at(profile_id).read(), \"Already verified\");\n        \n        storage.github_verified.at(profile_id).write(true);\n        storage.github_verified_at.at(profile_id).write(1);\n        \n        let current_count = storage.verification_count.at(profile_id).read();\n        storage.verification_count.at(profile_id).write(current_count + 1);\n        \n        storage.total_github_verifications.write(\n            storage.total_github_verifications.read() + 1\n        );\n        storage.total_verifications.write(\n            storage.total_verifications.read() + 1\n        );\n    }\n\n    #[public]\n    fn complete_farcaster_verification(\n        profile_id: Field,\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        assert(!storage.farcaster_verified.at(profile_id).read(), \"Already verified\");\n        \n        storage.farcaster_verified.at(profile_id).write(true);\n        storage.farcaster_verified_at.at(profile_id).write(1);\n        \n        let current_count = storage.verification_count.at(profile_id).read();\n        storage.verification_count.at(profile_id).write(current_count + 1);\n        \n        storage.total_farcaster_verifications.write(\n            storage.total_farcaster_verifications.read() + 1\n        );\n        storage.total_verifications.write(\n            storage.total_verifications.read() + 1\n        );\n    }\n\n    #[public]\n    fn complete_email_verification(\n        profile_id: Field,\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        assert(!storage.email_verified.at(profile_id).read(), \"Already verified\");\n        \n        storage.email_verified.at(profile_id).write(true);\n        storage.email_verified_at.at(profile_id).write(1);\n        \n        let current_count = storage.verification_count.at(profile_id).read();\n        storage.verification_count.at(profile_id).write(current_count + 1);\n        \n        storage.total_email_verifications.write(\n            storage.total_email_verifications.read() + 1\n        );\n        storage.total_verifications.write(\n            storage.total_verifications.read() + 1\n        );\n    }\n\n    // INDIVIDUAL VERIFICATION CHECKERS\n    \n    #[public]\n    fn is_twitter_verified(profile_id: Field) -> bool {\n        storage.twitter_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn is_discord_verified(profile_id: Field) -> bool {\n        storage.discord_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn is_telegram_verified(profile_id: Field) -> bool {\n        storage.telegram_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn is_github_verified(profile_id: Field) -> bool {\n        storage.github_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn is_farcaster_verified(profile_id: Field) -> bool {\n        storage.farcaster_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn is_email_verified(profile_id: Field) -> bool {\n        storage.email_verified.at(profile_id).read()\n    }\n\n    // GET ALL VERIFICATIONS FOR A PROFILE\n    \n    #[public]\n    fn get_profile_verifications(profile_id: Field) -> [bool; 6] {\n        [\n            storage.twitter_verified.at(profile_id).read(),\n            storage.discord_verified.at(profile_id).read(),\n            storage.telegram_verified.at(profile_id).read(),\n            storage.github_verified.at(profile_id).read(),\n            storage.farcaster_verified.at(profile_id).read(),\n            storage.email_verified.at(profile_id).read()\n        ]\n    }\n\n    #[public]\n    fn get_profile_verification_count(profile_id: Field) -> Field {\n        storage.verification_count.at(profile_id).read()\n    }\n\n    // GLOBAL VIEW FUNCTIONS\n    \n    #[public]\n    fn get_total_verifications() -> Field {\n        storage.total_verifications.read()\n    }\n\n    #[public]\n    fn get_all_global_counts() -> [Field; 6] {\n        [\n            storage.total_twitter_verifications.read(),\n            storage.total_discord_verifications.read(),\n            storage.total_telegram_verifications.read(),\n            storage.total_github_verifications.read(),\n            storage.total_farcaster_verifications.read(),\n            storage.total_email_verifications.read()\n        ]\n    }\n\n    #[public]\n    fn get_admin() -> AztecAddress {\n        storage.admin.read()\n    }\n\n    #[public]\n    fn get_oracle() -> AztecAddress {\n        storage.oracle.read()\n    }\n\n    #[public]\n    fn get_profile_registry() -> AztecAddress {\n        storage.profile_registry.read()\n    }\n\n    // NEW: Check if admin is initialized\n    #[public]\n    fn is_admin_initialized() -> bool {\n        storage.admin_initialized.read()\n    }\n}\n"
    },
    "68": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "69": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "71": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "75": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "97": {
      "path": "/home/babi/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    }
  }
}
