{"transpiled":true,"noir_version":"1.0.0-beta.5+0000000000000000000000000000000000000000","name":"AztlanNFTProfile","functions":[{"name":"constructor","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBEJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAAPyUAAABAKAIAAQSARCcCAgQAOw4AAgABJiUAAABmJwIBAAUnAgIAADAKAAIAAScCAQAGJwICAAEwCgACAAEmKACABAR4AA0AAACABIADJACAAwAAAI4qAQABBfeh86+lrdTKPAQCASY=","debug_symbols":"pZPBjoMgEIbfhbOHAQXBV2kag4oNCUFDdZON8d0XLNp6oIf1wjAM/wfzJ7OgTjXzo9a2H56oui2ocdoY/ajN0MpJD9afLgjCwgSqaIbK4hVeGaeowpAhATFu+bpmaAfUk1Mq6D+I/p1ROmUnVNnZmAz9SDNvl56jtFucpPNVT1S289EDe21U2K3ZWw1pqWB5FAsuDjk963FajwvAEYALUh4EzPITgqQRHHIWERwoPxDs/Ik8TSh5LiKh5AJShOJLG7jgdO8DU8JSjC9WYgCyI4AkzWTXzSwvm8kvmyn+a+bdZ7LV7jQ7a6A5LRujYtrPtv2oTr/jXtlnb3RDq7rZqUB6DyD2641ARuh9Da/9AQ==","brillig_names":["constructor"]},{"name":"get_address_by_username","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAAB/CcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAEnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAiUtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAIlLQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA1MtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAARmLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAIkKgEAAQX3ofOvpa3UyjwEAgEmJQAAAfwtCwQGCyIABoBEAAckAgAHAAACRycCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALfIwAAAmAtCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKKJQAABHguAgAHgAMoAIAEBAAEJQAABIouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAACyiUAAAUYLQ4KAS0OCAItDgUDLQ4JBCMAAANSJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA1MtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASKLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADUiYlAAAB/C4IgEUABSMAAANjDSIABYBDAAYkAgAGAAAD0yMAAAN4LQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAPpIwAABFUtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASKLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABFUBIgAFgEYABi0KBgUjAAADYyoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABKUjAAAEsC4AgAOABSMAAAUXLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABQMuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABNIoAYAFBAABAwCABgACgAYjAAAFFyYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZfRaiM7DIbfZa5zYUm2bPdVllLSNl0CIS3Z5sCh5N1XsiVPszADO7A3/T97rH9kWx6nX9Pr4fn68+l4fnv/NT38+JqeL8fT6fjz6fT+sv88vp+l92sK+gdCnR7ybgKIpqUrkqm1ydpk7Yim3DWBaerKwVR8i2hJprVrtf7a2xiiqbWBTHNXRFPuSmDafTEGU/Fh1dI1kWnuymDKXXMwtbhcu2q+Ta1d+3MKMr6qpq5gbV2/pqWr5tuUu5KNIxtHtWu0drQ4zbdp7qr5NrX3scVlG5dtXLH3FWtXiQNQkEDA3RQDGQA4sAFKckAKyaEa6L53yAYRHHxw8vA0ejycNTwKZHDQMVIZsQSHYlC5QwoyGCWxlGR1kBRkDEp40n1roBvWoRoUcpBUMe0mDholu8aADmygU+4QDcjH6Ewb6AQb6AQxK7CBzqtDMWj5NKgGxXt0gijFyTpBhdwm2KAaaP10sMFZK6iDR2mto2xu1mLvEB2KQUIHNmAfzB6evSd7ePbw4uFFwikIVHSoHYoe1QZa+x2SgX41OtgaFj2nHWwxS/QeljEkJVp0fUi2u7R3NeAOVReqQ+qVUPWlHaJDNUDvQe8h7yHvid6T3CeNnmLA6MAG2QdnH6y7rMlXrTqSHggt106pZw2hLVGnua86teWKjYoTjT6tQ0pK+rE1Yqc0nBM7aVUaFSfN2Gi8t4y+Msb52gu5H4QwqMXebrvJ75Cnz8vhoFfIt0tFrpqP/eVw/pweztfTaTf9tz9d26BfH/tz08/9RZ5KiRzOr6Ji+HY8HZRuuzk6LIdizWjR8jHOwyDdO8Cyg66TOQAADQdI8c4CVywSmwMGHAYEfGdAywa5xmQOcrDmHOT+ubOIyxaUfRUjxdngfhnSykIieAqIREsOvOyQYjaDFMuGeB4J8PL712ZA4BuJctFucZBPqTvktLiKEP6pBchV4QWZv9XT31jk6nsBBXiTRaVxLGpctlhxgFLcAWNaPFiwsiMpVV9OLjgvZy33FitllRn8aOW5LIFp0ycGlz8xZW0pxvkG2dPFLKCuzCONspBLfF5Ovk8DV2aSqfie5oi4aLG6qZR5TCWGumSyVlphnBG5cupSaa05SA3N64mbHMqYBoZNOUT0woLvi/kXDimOWaQMmxzqOKQMtMWB5mNOadMsiMcxp7JlFlLOo7Djhvg6LvCaeUs8+uGU34Nb4ovnf3d3b8n/j/hHae1fjpe7f9Vv6nQ57p9PB2u+Xc8v355+/v/hT/xf/Y/L+8vh9Xo5qNP8/778+YHyAx9TeNTfetKUH6Q7+UmkTdCnCeQpPd40md8=","brillig_names":["get_address_by_username"]},{"name":"get_profile_by_address","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAInAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZjbbuM4DIbfxde5EEmd2FcZFEXapoMAQVpkmgUWRd59SYmUmwVszBiYm/KTLP6mSFp28zW9Hp6vP5+O57f3X9PDj6/p+XI8nY4/n07vL/vP4/tZZr+moH8g8PRQdhNANFu7RTJrY7Ix2Tii2dxtArOp2xzMim4VW5NZ7pZtnvsYQzRrYyCzpVtEs7lbArNdF2MwKzpZbe02kdnSbQazudsSzJpf4W413mZtzP06BVnPalO3YGPNX7O1W4232dwt2TqydcTdRhtH89N4my3darzN2v2y+RVbV2xdtftVG7P4ASiII+BuioEMAByyAUpwQArJgQ207h2KQQQHX5zcPY0Zd8/qHgUKOOga6YxYg0M14NwhBVmMqCA3RfFKgA4+o4nAJKCZQClNquDABlq0DrVDDqojt8ja31gVioF2VIfkwAbR1yQ00PbuoIsl4Vk32KEaVHJggxZPA5spWhQKAlqUDtkAowMbkC/WWjSI7qUlIFBIDmygJehQDDTUDr64unsdM+7O7s7mXrU6hArFQJu/AxtoIzXQvu9QDaLlsOrR0SAFB5/RbibpH275iQrFoCWqQTbQ7tVOYL1pB+sN1qetg89En4k+k3wm+Ux2He8xbj3WoBi0Zmvgi6sv1iq34LXrSGYgtFgbabAatVByojGn8Rqpb1aKNGjMaR9SaVSc9KQwGsoFBlWnSoPYicd92efAUy9UnDz5An4PaH0ab7fd5K+Xp8/L4aBvl2/vG3kLfewvh/Pn9HC+nk676Z/96doW/frYn5v93F/kqnTz4fwqVgTfjqeD0m03e4dlV8whmzfKcz0E0r0CLCtI7sgUZIs0FCDFOwlckUgjhoBDgCDfCdCyQOGYTKEwzzHIq+lOIi5LUPEsRqnMELhPQ1pJJIKHgEi0pJCXFVIsJpBi3eCfRwB5+f5rOyDwQqK8g7colOhJxJIWswjhr0pArtEbsnzrpz+RkJPbJSrkTRJM47HguCyxogC1ugLGtPhgwUpFUmJPZ644p5PrvcRKW5UM/miVuS0h06YjhuriEVPXUjGeb5CaLkYBvLKPNNqi5DCnM9+HgSs7KVS9piUiLkqsFpVKHluJgZdE1rdS5q1gWIxj5cRMBf2wqXMMRPF3qyqvVu8sfSsu9feagjTyXFTcpFBHLjFsiiGidzd8r+gfKKQ4dpEKbFLgcVJkoC0KNJ81lDbtgvI4a6hu2YU8U6Ml4wZ/Hl8RXPIWf/QTQr5Xt/hXj//uA2JL/P/zf5TR/uV4ufsp4aZKl+P++XSw4dv1/PLt6ue/H37Ff4r4uLy/HF6vl4Mqzb9HyJ8f8sLeyf/tj/o5KkN5OHfyXapD0KvyoGHKjzcN5j8=","brillig_names":["get_profile_by_address"]},{"name":"get_token_id","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAAB/CcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAMnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAiUtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAIlLQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA1MtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAARmLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAIkKgEAAQX3ofOvpa3UyjwEAgEmJQAAAfwtCwQGCyIABoBEAAckAgAHAAACRycCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALfIwAAAmAtCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKKJQAABHguAgAHgAMoAIAEBAAEJQAABIouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAACyiUAAAUYLQ4KAS0OCAItDgUDLQ4JBCMAAANSJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA1MtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASKLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADUiYlAAAB/C4IgEUABSMAAANjDSIABYBDAAYkAgAGAAAD0yMAAAN4LQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAPpIwAABFUtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASKLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABFUBIgAFgEYABi0KBgUjAAADYyoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABKUjAAAEsC4AgAOABSMAAAUXLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABQMuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABNIoAYAFBAABAwCABgACgAYjAAAFFyYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZfRaiM7DIbfZa5zYVmWbPdVllLSNl0CIS3Z9sCh5N1XsiVPsjADO7A3/T97rH9kWx6n39Pr4fnr59Px/Pb+a3r48T09X46n0/Hn0+n9Zf95fD9L7/cU9A+EOj3k3QSQTEvXiKbWRmujtVM05a4EptSVg6n4FtFCprVrtf7a2zEkU2sDmuauMZpyVwTT7htTMBUfVi1dCU1zVwZT7pqDqcXl2lXzbWrt2p9jkPFVlbqCtXX9mpaumm9T7oo2Dm0c1q7J2sniNN+muavm29TexxaXbVy2ccXeV6xdJQ5AQQIh7qYU0ADAgQ2iJAeoQA7VQPe9QzZI4OCDycNp9Hg4a3gSyOCgY6QyUgkOxaByBwoyOEpiRLI6ERVkTJRw0n1roBvWoRoUdJBUI+0mDholu8YQHdhAp9whGaCP0Zk20Ak20AnGrMAGOq8OxaDl06AaFO/RCUYpTtYJKuQ2wQbVQOungw3OWkEdPEprPcrmZi32DsmhGFB0YAP2wezh2Xuyh2cPLx5eJByDQI0OtUPRo9pAa78DGehXo4OtYdFz2sEWsyTvYRmDUqJF1wdlu0t7VwPuUHWhOlCvhKov7ZAcqkH0nug96D3oPcl7yH1o9BQDjg5skH1w9sG6y5p81apD6YHQcu1EPWsIbYk6zX3VqS1XalSccPRpHSIp6cfWiJ1oOBM7aVUaFSfN2Gi8t4y+Msb52gu5H4QwqMVer7vJ75Cnz8vhoFfIzaUiV83H/nI4f04P56/TaTf9tz99tUG/Pvbnpp/7izyVEjmcX0XF8O14Oihdd3N0WA6NOYJFy0cbhwHdO8Cyg66TOQDA7ACU7iziigWx5xDiMEDgOwNcNsg1kTnIwZpzkPvnziItW2D2VUyYZoP7ZaCVhYzgKcSIuOTAyw6UshlQKhvieSTAy+9fmwGCb2SUi3aLg3xKRzHR4ipC+KcWIFeFF2S+qae/scjV9wIK8CaLiuNY1LRsseIApbhDTLR4sGBlR4iqLyeXOC9nLfcWK2WV2T8Qcq/NSTBu+sTcbOmfn5iythTjfIPs6WIWUFfmQaMs5BKfl5Pv04grM8lYfE9zinHRYnVTMfOYSgp1yWSttMI4I3Ll1KXSWnOQGprXM25yKGMaMWzKIY2ygNvF/AsHSmMWlGGTQx2HlAG3OOB8zJE2zQJ5HHMsW2Yh5TwKO22Ir+MCr5m3xEc/nPJ7cEt88fzv7u4t+f8R/yit/cvxcvev+lWdLsf98+lgzbev88vN08//P/yJ/6v/cXl/Obx+XQ7qNP+/L39+RPmBHyk86m89acoP0p38JNIm6FMCeYqPV03mNw==","brillig_names":["get_token_id"]},{"name":"get_token_uri","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAAB/CcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAQnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAiUtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAIlLQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA1MtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAARmLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAIkKgEAAQX3ofOvpa3UyjwEAgEmJQAAAfwtCwQGCyIABoBEAAckAgAHAAACRycCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALfIwAAAmAtCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKKJQAABHguAgAHgAMoAIAEBAAEJQAABIouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAACyiUAAAUYLQ4KAS0OCAItDgUDLQ4JBCMAAANSJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA1MtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASKLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADUiYlAAAB/C4IgEUABSMAAANjDSIABYBDAAYkAgAGAAAD0yMAAAN4LQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAPpIwAABFUtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASKLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABFUBIgAFgEYABi0KBgUjAAADYyoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABKUjAAAEsC4AgAOABSMAAAUXLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABQMuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABNIoAYAFBAABAwCABgACgAYjAAAFFyYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZfRaiM7DIbfZa5zYVmWbPdVllLSNl0CIS3Z5sCh5N1XsiVPszADO7A3/T97rH9kWx6nX9Pr4fn68+l4fnv/NT38+JqeL8fT6fjz6fT+sv88vp+l92sK+gdCnR7ybgJIpqVrRFNro7XR2imaclcCU+rKwVR8i2gh09q1Wn/t7RiSqbUBTXPXGE25K4Jp940pmIoPq5auhKa5K4Mpd83B1OJy7ar5NrV27c8xyPiqSl3B2rp+TUtXzbcpd0UbhzYOa9dk7WRxmm/T3FXzbWrvY4vLNi7buGLvK9auEgegIIEQd1MKaADgwAZRkgNUIIdqoPveIRskcPDB5OE0ejycNTwJZHDQMVIZqQSHYlC5AwUZHCUxIlmdiAoyJko46b410A3rUA0KOkiqkXYTB42SXWOIDmygU+6QDNDH6Ewb6AQb6ARjVmADnVeHYtDyaVANivfoBKMUJ+sEFXKbYINqoPXTwQZnraAOHqW1HmVzsxZ7h+RQDCg6sAH7YPbw7D3Zw7OHFw8vEo5BoEaH2qHoUW2gtd+BDPSr0cHWsOg57WCLWZL3sIxBKdGi64Oy3aW9qwF3qLpQHahXQtWXdkgO1SB6T/Qe9B70nuQ95D40eooBRwc2yD44+2DdZU2+atWh9EBouXainjWEtkSd5r7q1JYrNSpOOPq0DpGU9GNrxE40nImdtCqNipNmbDTeW0ZfGeN87YXcD0IY1GJvt93kd8jT5+Vw0Cvk26UiV83H/nI4f04P5+vptJv+25+ubdCvj/256ef+Ik+lRA7nV1ExfDueDkq33RwdlkNjwWLR8pEuw4DuHWDZQdfJHAAAhwNQurOIKxbEnkOIwwCB7wxw2SDXROYgB2vOQe6fO4u0bIHZVzFhmg3ul4FWFjKCpxAj4pIDLztQymZAqWyI55EAL79/bQYIvpFRLtotDvIpdYdMi6sI4Z9agFwVXpD5Wz39jUWuvhdQgDdZVBzHoqZlixUHKH40ISZaPFiwsiNE1ZeTS5yXs5Z7i5Wyygx+tPJclsC46RPDdfETU9aWYpxvkD1dzALqyjxolIVc4vNy8n0acWUmGYvvaU4xLlqsbipmHlNJoS6ZrJVWGGdErpy6VFprDlJD83rGTQ5lTCOGTTmk6IUF3xfzLxwojVlQhk0OdRxSBtzigPMxR9o0C+RxzLFsmYWU8yjstCG+jgu8Zt4SH/1wyu/BLfHF87+7u7fk/0f8o7T2L8fL3b/qN3W6HPfPp4M1367nl29PP///8Cf+r/7H5f3l8Hq9HNRp/n9f/vyI8gM/UnjU33rSlB+kO/lJpE3QpwTyFB9vmsxv","brillig_names":["get_token_uri"]},{"name":"get_total_minted","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAABbJwIBAAUvCgABAAItCgIBJigAgAQEeAANAAAAgASAAyQAgAMAAACDKgEAAQX3ofOvpa3UyjwEAgEm","debug_symbols":"fZLdzoMgDIbvhWMOBORn3sqyGFRcSAgaBl/yxXDvg0V0HLiTltK+D23oBiY1hGev7by8QHffwOC0MfrZm2WUXi823W6gyYZT0FEIRApojBCUit47pXLBlySBVumU9aCzwRgI/qQJn6LXKu3He+lStoFA2Sn5BJy1UfkU4alurqUEs3ZXEyxuB4DWBHRNQKilOwEhfraAGKkQ+BrBqShNcNbQA8HqJsgPAhGkEFqMrwjtrzEIZ8ccbXOrGI8UyVG76kdjpjktB6P2cA52/Mr6/7VkykasbhnVFJzKpHMtULJ3JCAmj5hfewM=","brillig_names":["get_total_minted"]},{"name":"has_profile","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAInAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZjdaiM7DMffJde5sCR/qa+ylJK26RIIackmBw4l734kW/IkCzOcHdib6meP9R9Z0nim+d6871+vP18Op4/PX5unH9+b1/PheDz8fDl+vu0uh8+TzH5vgv6BwJunst0ARLO1WySzNiYbk40jms3dJjCbus3BrOhWsTWZ5W7Z5rmPMUSzNgYyW7pFNJu7JTDbdTEGs6KT1dZuE5kt3WYwm7stwaz5Fe5W423WxtyvU5D1rDZ1CzbW/DVbu9V4m83dkq0jW0fcbbRxND+Nt9nSrcbbrN0vm1+xdcXWVbtftTGLH4CCOAJuNzGQAYBDNkAJDkghObCB1r1DMYjg4IuTu6cx4+5Z3aNAAQddI50Ra3CoBpw7pCCLERXkpiheCdDBZzQRmAQ0EyilSRUc2ECL1qF2yEF15BZZ+xurQjHQjuqQHNgg+pqEBtreHXSxJDzrBjtUg0oObNDiaWAzRYtCQUCL0iEbYHRgA/LFWosG0b20BAQKyYENtAQdioGG2sEXV3evY8bd2d3Z3KtWh1ChGGjzd2ADbaQG2vcdqkG0HFY9Ohqk4OAz2s0k/cMtP1GhGLRENcgG2r3aCaw37WC9wfq0dfCZ6DPRZ5LPJJ/JruM9xq3HGhSD1mwNfHH1xVrlFrx2HckMhBZrIw1WoxZKTjTmNF4j9c1KkQaNOe1DKo2Kk54URkO5wKDqVGkQO/G4L/sceOqFipMnX8DvAa1P4+223fjr5eVy3u/17XL3vpG30NfuvD9dNk+n6/G43fyzO17bol9fu1Ozl91Zrko370/vYkXw43DcK922k3eYdyUq7i3nKwyB9KgA8wqSOzIF2SINBUjxQQIXJFI2BQw4BAjygwDNCxSOyRQK8xSDvJoeJOJCIkYeolRmCDymIc37I4KHgEg0p5DnFVIsJpBiXeGfRwB5/v5LOyDwQqK8g9colOhJxJJmswjhr0pArtEbstz1059IyMntEhXyKgmm8VhwnJdYUIBaXQFjmn2wYKEiKbGnM1ec0sn1UWKhrUoGf7TK1JaQac0RE+/q8fsRU5dSMZ5vkJrORgG8sI802qLkMKUzP4aBCzspVL2mJSLOSiwWlUoeW4mB50SWt1KmrWCYjWPhxEwF/bCpUwxE8f9WVV6tXlV9K87195KCNPJUVFylUEcuMayKIaJ3N9xX9A8UUhy7SAVWKfA4KTLQGgWazhpKq3ZBeZw1VNfsQp6p0ZJxhT+PrwgueY0/+gkh36tr/KvH//ABsSb+3/yfZbR7O5wffkq4qdL5sHs97m34cT293V29/PvlV/yniK/z59v+/Xreq9L0e4T8+SEv7K383/6sn6MylIdzK9+lOgS9Kg8apvx802D+Aw==","brillig_names":["has_profile"]},{"name":"is_username_taken","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACBScCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAEnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAi4tAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAIuLQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA1wtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAQkAgAEAAAB9SUAAARvLwoAAwABCioBAgMWCgMBJigAgAQEeAANAAAAgASAAyQAgAMAAAItKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgUtCwQGCyIABoBEAAckAgAHAAACUCcCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALoIwAAAmktCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKTJQAABIEuAgAHgAMoAIAEBAAEJQAABJMuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC0yUAAAUhLQ4KAS0OCAItDgUDLQ4JBCMAAANbJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA1wtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASTLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADWyYlAAACBS4IgEUABSMAAANsDSIABYBDAAYkAgAGAAAD3CMAAAOBLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAPyIwAABF4tCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASTLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABF4BIgAFgEYABi0KBgUjAAADbCoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABK4jAAAEuS4AgAOABSMAAAUgLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABQwuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABNsoAYAFBAABAwCABgACgAYjAAAFICYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tVjRaiM7DP2Xec6DLVm21V9ZSknbdAmEtGSbC5eSf7+SLTnJhRm2s+xLz7FHOiNLsj3N1/S6ez7/fNof395/TQ8/vqbn0/5w2P98Ory/bD/370eZ/ZqC/omBp4eymWJMhrUjoKGN0cZo4wSGuSNFQ+qYg6HoVsFKhtyRbZ77GEIytHFEw9IRwDB3xGjYdSEFQ9HJirUjoWHpmKNh7liCofkV7qjxNrQx9+cYxJ4VqWO0seavYe2o8TbMHdHs0OyQOyYbJ/PTeBuWjhpvQ3tfNr9idsXsqr2v2pjFL0Yl4hhhM6WARmJ0ko2ABBdRCTlhI1r3ToqRFJ24Mbk7jRl3z+qehJToRG2kM1INTqoRzp1QEGMAJfJSEC+KsjwQQVJBICX6SCpCKthIRSfVCIMTUQZRztpOIH2SITohJ2xEl9xIchtt8kYoOVFjyXPWujRSwEkx0uJppBphn2GxwbCZirZRI9pHnVQjugM7cWPt+U7cS7sHoxI2ov3TSTGiHdQJOXHj4u7FZ6q7V3dnd9dGQilK1ep0Uo3oZu2EjUAyguDEclh1p3ZiyazkM0VsUKpcW36k7tze1QgZaYlqJPVOYH1pI4BOqhH0GfSZ5DPJZ8hnyHW8x7j1mBLt3k7IiRtXN9Yqa/CsXYcyE0OLtbPUoxbGzmDMabydtXTlxoqzNOa0D1FP1aDHrTEabChncqZdaaw4azXubLyXx5ynPkbPvTAazN/RLgpMl8tm8lvl6fO02+mlcnPNyOXzsT3tjp/Tw/F8OGymf7aHczP69bE9NvzcnuSpdPPu+Coogm/7w07ZZXP1DvOuGGM2b5R7aAjQvUKcV5CMoSnIwnAoREp3ErAgQR4DBBgCGPOdAM4LFE5kCoX5GoPcSHcSaSERxbOYpDJD4D4NNO8PED0EAMQ5hTyvQKmYAKW6wj+PAPL8+5dWgNELCXL1rlEoyZMIhWazGMNflYi5Jm/IctNP35Eo7LWINeZVEoxjW3Cal1hQiLW6AiSa3VhxoSJE7OnMcq8MDa73EgttJXegb61ybcuYcdURU+aPmLqUirG/o9R0NorIC+ug0RYlh2s6830YsLCSgtVrWhLArMRiUbHksZQUeE5kqbXkHwUeGlRudgndB7JwZPI4c5mvNZFP/N+OIoydKpchzzX48jrStaqwSqGOZEJYFUMCb+94W9JvKFAaq6Cb9v6OAo+jIkdco4DXwwZp1Sowj8MG65pVyKYa2yut8OfxGcElr/EHPyI4rXp/DWND4J/F/z//RxltX/anu58QLqp02m+fDzsbvp2PLzdPP//98Cf+E8TH6f1l93o+7VTp+juE/Pkhl/cGCB71K1SG8gm8kV2pw6hPCeUpPV40mP8A","brillig_names":["is_username_taken"]},{"name":"mint_profile","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"},{"name":"ipfs_uri_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"927969722087551220":{"error_kind":"string","string":"Address already minted profile"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10226152426468428447":{"error_kind":"string","string":"Username already taken"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["mint_profile"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"927969722087551220":{"error_kind":"string","string":"Address already minted profile"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"4802591818712997969":{"error_kind":"string","string":"No profile found"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10226152426468428447":{"error_kind":"string","string":"Username already taken"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["public_dispatch"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"nZPdjoMgEIXfZa69QP7xVZqmQcWGhKChusnG+O6LDbS6CZtNbxhw5nweYFihN+1yv1k/jA9oLiu0wTpn7zc3dnq2o49fV0D7UBNoSAU1hYbFwKARMXBo1LZVkOtvczBmLz8AInbSwfgZGr84V8GXdsuz6DFp/4yzDjGLKjC+jzECB+vMPtuqtxqVpTWitUzyOBfihVDsxKjLDCF5IkhEX3qOT3pc1jPMkp6x9xZqIv5rQBKRDTBVMkDLekpU0lMuPzIgaTagZMkAL+s5yifAMf/EgMI4ARRhJQPyDwMy95BAv67gGpe6s+HU2tuOCla3zqTlsPjukJ2/p5zJT2MKY2f6JZiddHgfcbzEHsTkuu1/+wE=","brillig_names":["sync_notes"]},{"name":"update_token_uri","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"new_ipfs_uri_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4802591818712997969":{"error_kind":"string","string":"No profile found"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZjRbts6DIbfJde9kEhKlPoqwzBkbToECNIiaw9wUPTdR0qknAyQ0XlYL6ovtPiblGjKyfvu8fD97ce34/np+efu/sv77vvleDodf3w7PT/sX4/PZ7G+74L+i5F393i3iwC7+6Qj9xHtM+Y+UrCRbKx9TPY5lT5m8SsycrCx9LHkPta4u496wyo3iuIBARzcEtWSBSA4JAFxBwwOw1INCB3YIIGDW3J0EHeIAowGJTpUgyqpgdwdVRDFgik6ZIPsluwWdgsng+KW4nMqOJgyBQkDQQDIoRigX0K3kFvILZppB7dkn5OrAbtyCQ7JQecEgYoOpUPS3emQDWJ0SA7mnlrwCrpNHYbF55B6SQGkFBzIoRhoEXXIBuyT2SdzNShuKe7esmjAHXKIDsnB3HNEB58M4OAWVPekoO5SErltgUIriQbZIGuorJAcqoEWWwc2aLXRwCdXd6/DYu7cikSql9sWKLTyqwoymWR5WW/RQJU7ZANV7iArRlJ1RXeQQKEaADqwgebeweeQX9KqI1QoBi0MBd2vDtmgxdPALS0eUigdqibYQBPskA0gOJCDe6HGI7tTCRyygdZYB3IoBtknZ3dnt7C7F3cv7q41RrLLta2hQAxaW0bZSTuYETtpDzOylYwBcRA70bBp3RArtaUqjWhQMYpt2Tpxr4cYNQKj7ARx0LDhsOGw0bDRsKWhl4atVXonGlSceHjw8GhFwI10NdQGLfpObHm0E8Bo2DR6I/FNQUn7jNFi05MpKrWzqlNxSkM5+fq1w6ATh0HZqYz7lmEb+wFjP2DsBwa/B7Y6Lh8fdzs/er+9Xg4HPXmvzmI5oV/2l8P5dXd/fjud7nb/7U9vbdLPl/25ja/7i1yV/A7nRxlF8Ol4Oih93C3eYe4K8mfeALQIpFuFOFeggmQKVAiGQr5VgLlCSewxSMvgmcJaFqjvDj0LRJplQXMFeapcQR4NHAryIvNpiViKSwClqUSeS6RUfS9zgSWPWm4UeK4grd8EmMsSQsZNS0k8W8q6tg7aEm0pOUyDiCtRsBzfnocczrOSiCt1yVg8ESaY1mWEtUyQ80iFQp2KrKbCSyoQphIrlbU8H6ksMWihf3pTcx6bytNNXVMg7dRdgVKd9gn++0dsVeOTz1isf/2QQfiXT9n1cjLOlhPWipOCBxEJeBoF4ErnDeh1UUIq0969UptcRiYsr25TibTaMMrSMRLkDSeAvH74eoblWceYb6NY65x1tC2uddkS4HqrUeYayF5ZdHUKwW9LUdeO45jGcYw4k8CVlUj6ItWbBZUtAnmEkOcRrCZxfYRc7eafSDD5SgKn6VIi/VMJeWv11i0HGWyS4OrbIW+5eZNExdE35SvMTGLt4QhjKWK4OkH+QEEa7HKmwyaFMo5SCJtiILhqeJtiSDSySBw3KdSxFzniFgVcdhPTpiwwjzNQfkTaoCCvVOONhDb413GQy3fiLf7gHabSpvsXj/+mUW+J/zf/r/Jp/3C83Pwk+qFKl+P+++lgH5/ezg9XV1//f/Er/pPqy+X54fD4djmo0vK7qvz7AhnuoOBX/bIuH1O6y0E/RL0mDUe+T3790FB+AQ==","brillig_names":["update_token_uri"]}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"AztlanNFTProfile"}},{"name":"fields","value":{"fields":[{"name":"username_hash_to_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"has_minted","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"token_id_of","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"token_uri","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"total_minted","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"next_token_id","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AztlanNFTProfile::constructor_parameters"}}],"kind":"struct","path":"AztlanNFTProfile::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"username_hash","type":{"kind":"field"}}],"kind":"struct","path":"AztlanNFTProfile::get_address_by_username_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanNFTProfile::get_address_by_username_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanNFTProfile::get_profile_by_address_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"AztlanNFTProfile::get_profile_by_address_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanNFTProfile::get_token_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AztlanNFTProfile::get_token_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanNFTProfile::get_token_uri_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AztlanNFTProfile::get_token_uri_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AztlanNFTProfile::get_total_minted_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AztlanNFTProfile::get_total_minted_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanNFTProfile::has_profile_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"AztlanNFTProfile::has_profile_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"username_hash","type":{"kind":"field"}}],"kind":"struct","path":"AztlanNFTProfile::is_username_taken_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"AztlanNFTProfile::is_username_taken_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"username_hash","type":{"kind":"field"}},{"name":"ipfs_uri_hash","type":{"kind":"field"}}],"kind":"struct","path":"AztlanNFTProfile::mint_profile_parameters"}}],"kind":"struct","path":"AztlanNFTProfile::mint_profile_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_ipfs_uri_hash","type":{"kind":"field"}}],"kind":"struct","path":"AztlanNFTProfile::update_token_uri_parameters"}}],"kind":"struct","path":"AztlanNFTProfile::update_token_uri_abi"}]}},"file_map":{"137":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"154":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"163":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"20":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"25":{"path":"std/meta/expr.nr","source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"},"261":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"279":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"316":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"334":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr","source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"},"335":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"354":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"43":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"50":{"path":"/root/x/aztlan/contracts/aztlan_profile/src/main.nr","source":"use dep::aztec::macros::aztec;\n\n#[aztec]\npub contract AztlanNFTProfile {\n    use dep::aztec::macros::{functions::{public}, storage::storage};\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n\n    #[storage]\n    struct Storage<Context> {\n        // Username mapping (untuk cek unik)\n        username_hash_to_address: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        \n        // Cek apakah address sudah mint\n        has_minted: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        \n        // NFT Token ID per address\n        token_id_of: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n        \n        // IPFS URI untuk NFT image & metadata\n        token_uri: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n        \n        // Stats\n        total_minted: PublicMutable<Field, Context>,\n        next_token_id: PublicMutable<Field, Context>,\n    }\n\n    #[public]\n    fn constructor() {\n        storage.total_minted.write(0);\n        storage.next_token_id.write(1);\n    }\n\n    #[public]\n    fn mint_profile(\n        username_hash: Field,\n        ipfs_uri_hash: Field  // Hash dari IPFS URI\n    ) {\n        let caller = context.msg_sender();\n        \n        // Validasi 1: Address belum pernah mint\n        let already_minted = storage.has_minted.at(caller).read();\n        assert(!already_minted, \"Address already minted profile\");\n        \n        // Validasi 2: Username unik\n        let username_owner = storage.username_hash_to_address.at(username_hash).read();\n        assert(username_owner == AztecAddress::zero(), \"Username already taken\");\n        \n        // Get token ID\n        let token_id = storage.next_token_id.read();\n        \n        // Set data\n        storage.username_hash_to_address.at(username_hash).write(caller);\n        storage.has_minted.at(caller).write(true);\n        storage.token_id_of.at(caller).write(token_id);\n        storage.token_uri.at(caller).write(ipfs_uri_hash);\n        \n        // Update counters\n        storage.total_minted.write(storage.total_minted.read() + 1);\n        storage.next_token_id.write(token_id + 1);\n    }\n\n    #[public]\n    fn update_token_uri(new_ipfs_uri_hash: Field) {\n        let caller = context.msg_sender();\n        \n        // Check user has profile\n        let has_profile = storage.has_minted.at(caller).read();\n        assert(has_profile, \"No profile found\");\n        \n        // Update URI\n        storage.token_uri.at(caller).write(new_ipfs_uri_hash);\n    }\n\n    // VIEW FUNCTIONS\n\n    #[public]\n    fn get_profile_by_address(user: AztecAddress) -> bool {\n        storage.has_minted.at(user).read()\n    }\n\n    #[public]\n    fn get_token_id(user: AztecAddress) -> Field {\n        storage.token_id_of.at(user).read()\n    }\n\n    #[public]\n    fn get_token_uri(user: AztecAddress) -> Field {\n        storage.token_uri.at(user).read()\n    }\n\n    #[public]\n    fn get_address_by_username(username_hash: Field) -> AztecAddress {\n        storage.username_hash_to_address.at(username_hash).read()\n    }\n\n    #[public]\n    fn is_username_taken(username_hash: Field) -> bool {\n        storage.username_hash_to_address.at(username_hash).read() != AztecAddress::zero()\n    }\n\n    #[public]\n    fn get_total_minted() -> Field {\n        storage.total_minted.read()\n    }\n\n    #[public]\n    fn has_profile(user: AztecAddress) -> bool {\n        storage.has_minted.at(user).read()\n    }\n}\n"},"60":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"},"62":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/utility_context.nr","source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"},"88":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr","source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"},"95":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr","source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"},"98":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/storage.nr","source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"}}}