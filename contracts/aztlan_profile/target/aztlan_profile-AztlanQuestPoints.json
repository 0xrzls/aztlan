{
  "transpiled": true,
  "noir_version": "1.0.0-beta.5+0000000000000000000000000000000000000000",
  "name": "AztlanQuestPoints",
  "functions": [
    {
      "name": "_record_quest_completion",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "quest_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "points_earned",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15353289549725070351": {
            "error_kind": "string",
            "string": "Quest already completed"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_record_quest_completion"
      ]
    },
    {
      "name": "complete_quest",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "quest_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "points_earned",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "rZdLbuMwDIbv4nUWIqlnr1IUhZt6CgOGE7jJAIOidx8qtiS7gIhMPJswfn0mf1I09dW8d2/Xj9d+/HX6bJ6ev5q3qR+G/uN1OB3bS38a+exXo+KPNs0THhptZ+Nm42cT2HwfGog3Ah/ANx8lxutl6rp4ZQXlV53bqRsvzdN4HYZD87sdrrebPs/teLOXduKr6tB04ztbBv7qhy7++z6Up1X9Ue1wediizo+DNvcCDMECMM6uAO5eABrtFgJawIJQeoMgAYE6SYBoC8Jto9B1AqlgFgKB9TWCqRPABEhx8H8quUDvNxArQKzxiWGdywhSWz+cgEBvEwJDeAhBlhJCg6oiZDWMLmqsFP2pBkilAZhiwViSNUcA9utxL4PL4zHGnaKKenBx5zp3dT0khPZQVhtVVxsIVaoBUm41mBKK9fd6Ac5kQT2VQMy2b4EXEFAKDEJpXSzMlhHE5WazH7z06lWKQjAu6NQ7XAhUZwjVQS41ME2rWLZyIAp5JUjlhYS2iiBJ0dVKUaGGkNJqXW5fTtlaWlFqHF5RbqNeWVurLhQKlMjmbq6p2s1R6IEeISE8Gqwn1f+Hwgg7C4PU7sIgsXVRbl201uIHQijPkJtfcPYRAPenJAQoH3b6sE7GP+hw3wIRs+HKpOJMPaHS19mFskCgLqbfmw2/V0q/P52SDqFUZdD1jic3mxCKlspVm40MceVjBkg1iJbmz9w4NUF1ipbdgKKHB1eNRUvzZzAhd/BgwVQhTpratFmNbd485onDXCHBu7qqQvMMxuQRAf1Du5sQUihWraa227j0woftsZ+2G0EgfjFv8/RszGxsfC1bt1gfF/Jh3geyRRU/VWxhsbhYWqyOsxZbs1i7WObFjwwyT3PmMMyW1O2rGwOb+vZt6KJr0fvreEye8uHlzzldSZva83Q6du/XqYtRlZ0t+/HMzVXjCzvNZ54NHIx9yfvZeIoHHORTUZi/",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_registry",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "social_verifier",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBHJwAABAMnAgQEAycCBQQAHwoABAAFgEQuCIBEAAEuCIBFAAIuCIBGAAMlAAAAUSUAAABSKAIAAQSARycCAgQAOw4AAgABJiUAAAB5JwIEAAEwCgABAAQnAgEAAjAKAAIAAScCAQAIMAoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAChKgEAAQX3ofOvpa3UyjwEAgEm",
      "debug_symbols": "tZTBjoMgEIbfhbMHBlTAV2maBhUbEoKG6iYb47svdMXWAx7W7YUZGOYj/PkzM2pVPd1v2nb9A1WXGdVOG6PvN9M3ctS99aczwmHhDFVFhgT5DRxVgDMEmMZE+MRXAPKQLEuGIuQ2OqUC443q3xqkU3ZElZ2MydCXNNPz0mOQ9hlH6XzVs5VtffTAThsVsiV7deN0KxBO126gQDdAsSfAASHHEAk5YRsBGNkhSBrBMS1XBMcF3xCl2BFomsA4FSuBcYFThPzgG5DzIv4DClKmGEdi0nyTgjKcErM8LyY7LSY/Lab4tJiCbVJAmXTmP1gTznsTzpsT/uzOq9/JRrvdSFoCzWlZG7Vuu8k2b9Xxe4iVONIG1zeqnZwKpNdcA79eCM0Ivy7htR8=",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "create_quest",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "_quest_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "_quest_data",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "15371982489698173836": {
            "error_kind": "string",
            "string": "Only admin"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQuCIBEAAEuCIBFAAIlAAAASyUAAABMKAIAAQSARicCAgQAOw4AAgABJiUAAAB0HgIAAwEnAgQACC8KAAQABQoqAwUEJAIABAAAAHMlAAAAnSYoAIAEBHgADQAAAIAEgAMkAIADAAAAnCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEF1VRAoU/8A4w8BAIBJg==",
      "debug_symbols": "nZPLjsMgDEX/xWsWPGOSX6mqiqa0QkIkoslIoyr/PtDm0SzIYjZxjPFB94JfcLPX8XFx4d49oTm94Bqd9+5x8V1rBteFtPoCmj+aQSMI6AoaTaBmn4DQ1AQY5Z/I0tZ6mggs/ZchWpvbv4DpmN5EGwZowug9gR/jx/emZ2/COw4mpiolYMMtxQS8O2/z30S2blpuFZUWc7dAylaA2hNYmSC1kDNBaslXQlXvCLxM0Ar5TNBKY4lwpAIFXVVIXVIhywTGpJoJjOFmJEO+Q6gyApVejMCKqpKM6oAg1stAyYtW4pEMgdWqQ9L6X2byzUxFd2aeU2ZaF3fvfsqs6MzV2zm9j6H9qg6//VJZ5qaPXWtvY7SZtA1PnosT54TjOU9JTjQR9Dzlo/8A",
      "brillig_names": [
        "create_quest"
      ]
    },
    {
      "name": "get_public_points",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "tZjdbts8DIbvJcc5kEjqh72VoSjSNh0CBGmRtR/woci9j5RIuRlgY3O2k+gxLb6mKEpy/Ll53j9+fH84nF5ef2zuvn1uHs+H4/Hw/eH4+rR7P7yexPq5CfoTY97cwXYTIVpr1xisJWtrbwmttesE1opfkjZTbwv0tgZr0+YuBgGWB0X14NwBgllAnxlJIRmQW4gcqoE+uEMxyG7J2aCoe1GoBjUbMDmwDECejlkeCkWBDQo5uKW6pbqF0cEsFKwPxeBgytSSXAUIHLJB8lvJLdkt2S06nA5uqd6nFgN2Za4dUkAH7ZMFYnTIBhAcyIENEB3cvQXfoBoktyTvk9WLFaqBFkSHbKCl0YEcvDN7Zy4dcgAHc89tFA2SAxsAOrg7emf0zhQchkXcMQokcUcpiaxT0IENtCQ6SKiIAhUdioFWeIfkwB1KQAdzL9Et0dyLFgmSAhu0MJKCCkp6S0EDLYAO2YCDg4YqVVc1P1gV2EDz06EYaH46eB9dcQ10cjtoZ0lU1cltoAXZIRm0eBpkA3aLZoNkB2BNQodqoHXYQMfewTtrEhqge2n5UVQoBrp2OiQHNtBQO3jn4u7FLdXdq7tXd9fVTaDAHWLQ+uukBWhUnACcdDMzskwKVSeCQcOmtUWo1FJFjdgotqx1qk4RemEIFSeIg7ITDhsOGw0bDVsatjT08rC16uvETq0QOw2POjy0CNqIolYlqQ1a9I00+jYOaPlrBMOm0XdqmcyNkhMNm9YplUbspAvYaChnz187FYw8z9BqoNN4Lg/bmA8Y84FjPjD4M7DVMV0u242ftA/v5/1eD9ovR68cyG+78/70vrk7fRyP281/u+NH6/TjbXdq7fvuLHel2venZ2lF8OVw3CtdtpN3mHclqMW8CWMaAulaIc4rxJDRFKS8cCjEjL8tEWt1CaA0K4HzEimxZyFXoEkilCsJmpeQ7dMUSqmTQIFVuUSYy2VeSoRWvOWyhNkgysIo5JT0YeQw5TLzlUJdUMDqE1oIYE6Bl4aBJY9xUOA5jcVxlGkcEOYU4kJZyauEKaQ6hYCEvz2hSDwmtODs4sC/sDrw9uUR0+3rI+Z/uUC+5pPDbD7r7Ssk8s1LBMLNawTiX1gkC2HIvylTgDAFgZCuo1ioLXn783wWeYsZGlDrtcbCxokljFmdKguuJxUWihMgehAAiLMSC7WZyLde+bexRiCPEPJCBEuDwOglAQh5lUQhz6S8csymEsM/lYh5LA9ZYbBKorBPh7zl5VUSjGPjZJqVWFIIIxXyKsxrFGKiabOBVQp1rHEIq2Ig8F03ft1p/kAh0RhFKnGVAo+5yBHXKOA0m5hWjQLzOASxrhmF7PVj16cV/jxOci5r6pHBdximVc+vHv/VRr0m/l/87+Vq93Q4X333u6jS+bB7PO7t8uXj9PTl7vv/b37Hvxu+nV+f9s8f570qTR8P5ecbZNpCTff6Z1UuE28z6UXUe7JI5MC5v2goPwE=",
      "brillig_names": [
        "get_public_points"
      ]
    },
    {
      "name": "get_quest_count",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAAB/CcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAQnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAiUtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAIlLQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA1MtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAARmLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAIkKgEAAQX3ofOvpa3UyjwEAgEmJQAAAfwtCwQGCyIABoBEAAckAgAHAAACRycCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALfIwAAAmAtCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKKJQAABHguAgAHgAMoAIAEBAAEJQAABIouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAACyiUAAAUYLQ4KAS0OCAItDgUDLQ4JBCMAAANSJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA1MtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASKLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADUiYlAAAB/C4IgEUABSMAAANjDSIABYBDAAYkAgAGAAAD0yMAAAN4LQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAPpIwAABFUtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASKLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABFUBIgAFgEYABi0KBgUjAAADYyoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABKUjAAAEsC4AgAOABSMAAAUXLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABQMuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABNIoAYAFBAABAwCABgACgAYjAAAFFyYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZfdaiM9DIbvZY5zYEmWf3orSylpmy6BkJZs88FHyb2vZEueZmEGdmBP8j72WO/Itjwz+ZpeD8/Xn0/H89v7r+nhx9f0fDmeTsefT6f3l/3n8f0svV9T0B8IdXrIuwkgmpauSKbWJmuTtSOapq4Mptw1BVPxLaKFTWvXav21tzFEU2sDmeauiKapK4Fp98UYTMUnqZauTKa5awLT1DUHU4vLtavm29TatV+nIOOrKncFa+v6NS1dNd+mqSvZOLJxVLtGa0eL03yb5q6ab1O7X7K4bOOyjSt2v2LtKnEAChIIuJtiIAMAh2SAkhyQAjtUA933DtkggoMPZg/n0ePhScOjQAYHHSOVEUtwKAY1deAgg1ESY5bVQVKQMSjhrPvWQDesQzUo5CCpIu+mFDRKdi0BOiQDnXKHaEA+RmfaQCfYQCeIWSEZ6Lw6FIOWT4NqULxHJ4hSnEknqJDbBBtUA62fDjY4awV18CitdZTNzVrsHaJDMWB0SAbJBycPz96TPTx7ePHwIuEUBCo61A5Fj2oDrf0ObKBPjQ62hkXPaQdbzBK9J8kYkhItuj4k213avRqkDlUXqgP3Sqh60w7RoRqg96D3kPeQ90TvYffh0VMMEjokg+yDsw/WXdbkq1YdSQ+Elmsn7llDaEvUae6rTm25YqPiRKNP65BYSR+2RsmJhzMnJ61Ko+KkGRuN+5bRV8Y4X3sh94MQBrXY2203+Tvk6fNyOOgr5NtLRV41H/vL4fw5PZyvp9Nu+m9/urZBvz7256af+4tclRI5nF9FxfDteDoo3XZzdFgOjRCzRUcoswHfO8Cyg66TOQAADQdIdGeBKxaczAEDDgNCvjOgZYNcI5uDHKw5ByzlziIuW1D2VYwUZ4P7ZeDleETwFBCJlhzSsgOPneBYNsSnkUBavv/aDAh8I1FetFsc5FHqDpkXVxHCP7UAeVV4QeZv9fQ3Frn6XkCBtMmi0jgWNS5brDhAKe6AkRcPFqzsCHP15UwF5+WUx9e9x0pd5QR+tvJcl5Bx0zOm5sVnTFlbi3HAQTZ1MQuoK/PgURfyFp/XM9X759TKTDIV39QcERctVneVchpTiaEumazVVhiHRN45dam21hyA47yeuMmhjGlg2JRDRC8s+L6Yf+HAccyCM2xyqOOUJqAtDjSfc+JNs6A0zjmVLbOQch6FHTfE1/EGrzltiUc/nPJBuCW+eP53L+8t+f8R/yit/cvxcvdf/aZOl+P++XSw5tv1/PLt6uf/H37F/+t/XN5fDq/Xy0Gd5j/88vMD5QsfOTzqx5405Yt0J99E2gS9yiBX6fGmyfwG",
      "brillig_names": [
        "get_quest_count"
      ]
    },
    {
      "name": "is_on_leaderboard",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAYnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=",
      "debug_symbols": "tZjdbuM4DIXfxde5EElRP32VQVGkbToIEKRFpllgUeTdl5RIuVnAxoyBuen5JIvHlETLbr6m18Pz9efT8fz2/mt6+PE1PV+Op9Px59Pp/WX/eXw/S+/XFPQPhDo95N0EEE1LVyRTa5O1ydoRTVNXBlPumoKp+BbRwqa1a7X+2tsYoqm1gUxzV0TT1JXAtPtiDKbik1RLVybT3DWBaeqag6nF5dpV821q7dqvU5DxVZW7grV1/ZqWrppv09SVbBzZOKpdo7WjxWm+TXNXzbep3S9ZXLZx2cYVu1+xdpU4AAUJBNxNMZABgEMyQEkOSIEdqoHue4dsEMHBB7OH8+jx8KThUSCDg46RyoglOBSDmjpwkMGICnJTlCgGdPAeXQhkAV0JlK3hAg7VQDetQ+mQgvrILZLWNxaFbKAV1YEdqkH0MYwGWt4ddLAseNIJdigGhRyqQcungfVk3RQKAropHZIBRodqQD5Y96JB9CjdAgIFdqgGugUdsoGm2sEHFw8vo8fDq4dXCy+6O4QK2UCLv0M10EJqoHXfoRhEW8OiR0cDDg7eo9VMUj+1rU9UyAZtoRokA61erYSqN+1gtVH1aevgPdF7ovew97D3JPfxGqutxhpkg1ZsDXxw8cG6yy15rTqSHggt10aarGYtxE40+jRfI41NSpEGjT6tQ8qNspOeFEbDOcOg4lRoUHWq477V+8CXXig7+eIL+D2g1Wm83XaTv16ePi+Hg75dvr1v5C30sb8czp/Tw/l6Ou2mf/anaxv062N/bvq5v8hVqebD+VVUDN+Op4PSbTdHh+XQyNGjI6cyDPjeAZYdZO3IHGSKNBwg0Z0FrlhwMgcMOAwI+c6Alg1yjWwOudY5ByzlziIuW1Ae6yA7Mwzul4GX4xHBU0AkWnJIyw4csxlwLBvi00ggLd9/bQYEvpEo7+AtDnkUE2ZeXEUIf9UCUolekPlbPf2JhZzcblEgbbKoNB6LGpctVhygFHfAyIsPFqzsCHP15UwF5+WU8+neY6WucgJ/tvJcl5Bx0xlTePGMKWtrMR5wkE1dzALqyjx41EVOYU4j1ftzamUmmYpvao6Iixaru0o5janEUJdM1qeS56lgWMxj5cjkjH7alDkHivS7uyrvVt9VfS0uFfiaA3CcNxU3OZSxlhg25RDRqxu+7+gfOHAcs+AMmxzqOCoS0BYHmg8b4k2zoDQOGypbZiHP1CjJuCG+js+ImtOWePQTQj5Yt8QXz//uC2JL/v+Lf5TW/uV4ufst4aZOl+P++XSw5tv1/PLt6ue/H37Ff4v4uLy/HF6vl4M6zT9IyJ8f8sbeyT/uj/o9Kk15OHfyYapN0KvyoCGnx5sm8x8=",
      "brillig_names": [
        "is_on_leaderboard"
      ]
    },
    {
      "name": "is_quest_completed",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "quest_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBLJwAABAMnAgMEAicCBAQAHwoAAwAEgEguCIBIAAEuCIBJAAIlAAAAUSUAAAB1LgIAAYBKKAIAAgSASicCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgAAACgAgEcEAAEmJQAAARknAgMABScCBQQGLQgABi0KAwctCgEIAAgABQAlAAABQi0CAAAtCgcECyIABIBGAAELIgABgEQAAyQCAAMAAAC/JQAAArwnAgMEBS0IAAUtCgQGLQoCBwAIAAMAJQAAAUItAgAALQoGAQsiAAGARgACCyIAAoBEAAMkAgADAAAA/yUAAAK8LwoAAQACHAoCAwEcCgMBABwKAQIBLQoCASYoAIAEBHgADQAAAIAEgAMkAIADAAABQSoBAAEF96Hzr6Wt1Mo8BAIBJiUAAAEZLQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS4MgEYABQAiBQIFLgyARgAFACIFAgUuDIBGAAUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLgyARgAHACIHAgcuDIBGAAcAIgcCBy4MgEYABwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAALOLQIAACcCAQQHLQgABy0KBAgtCgMJLQoFCi0KBgstCgIMAAgAAQAlAAACzi0CAAAtCwYBCyIAAYBEAAIkAgACAAACgCcCBwQAPAYHAScCAQQHLQgABy0KBAgtCgMJLQoFCi0KBgsACAABACUAAAP8LQIAAC0LAwEBIgABgEcAAy0LAwItCgIBJioBAAEFAtxuJ4B2Ep08BAIBJiUAAAEZLQsEBgsiAAaARAAHJAIABwAAAvAnAggEADwGCAEtCwMGCyIABoBDAAckAgAHAAADiCMAAAMJLQsDBi0LAQctCwIILQsECQ0iAAaAQwAKJwILAQEkAgAKAAADMyUAAAUPLgIAB4ADKACABAQABCUAAAUhLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAA3MlAAAFry0OCgEtDggCLQ4FAy0OCQQjAAAD+ycCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAP8LQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAFIS4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA/smJQAAARkuCIBFAAUjAAAEDA0iAAWAQwAGJAIABgAABHwjAAAEIS0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAEkiMAAAT+LQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAFIS4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAAT+ASIABYBHAAYtCgYFIwAABAwqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAU8IwAABUcuAIADgAUjAAAFri4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWaLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVpKAGABQQAAQMAgAYAAoAGIwAABa4mKgEAAQVFp8pxGUHkFTwEAgEm",
      "debug_symbols": "tZjdbuM4DIXfJde5kCjqr68yKIq0TQcBgrTIJAssirz7khKP3Cxgo+PB3JSfafGYoijZzefmdf98/fl0OL29/9o8/PjcPJ8Px+Ph59Px/WV3ObyfxPu5cfrHE20eaCs2dxvsOqRu2Zlls7XbaNexdJskLorNzmzptqRuq988ZLWpWXLOLJst3fpg1q41v2YlzjuBwAZMBtEBooA8jJI8zGtUSgbZPKHNUxIOwQOSAcPD8ER4VLlBgidhTCYAlItMgcJ2wzq3DsXA45aHh+AheNoKNICHMaYVXyFCOTlABOgYL5ADoBgUAiQDXZUOEWDhsSWv4B1geDCGNIoFggMwoBjoMnVIBhGDIwbHapDgSQhvs2iQDYoH4OkF4RWDqw1OjgDweA1PChouLZHaEii0lmiQDFr3F4UIqAYxALJB640GGJwRnocH4a1JqkBbAoGsaQSnIIJByptDNNAG6FAMIgEk1SBdl7U+QRoga306REA10PooFOcByUAXt4MOlkIVXdwG2pAdskHLp0ExiPBoNYLswaJFaKBF6FAMdO4dMFiL0MGiqrZfSArVQPdOh2xAHhABGBwQHuBhhDPCI8J1dwdZ7qor2KEYaPt1qAaFDSoBrIbe6aFmxCA/fNpVoSi1IlWl9sROEdQK1ol7SwhVUAmDCqgOX4VPHjdo+Pzweeh5Gr7Wd410IxjFQSOCR0Rbfp2R137k5tPsjdjm4Vv2jcrwtewbaSHZN8pG5GiQVI3bG0p3rlEcBGUi1I9av3ZCnanl3AnPpTh8Yz1orAeN9aA0ntE6uN5u2w3epE+X836vL9Ivr1Z54X7szvvTZfNwuh6P280/u+O1Dfr1sTs1e9md5a5UaX96FSuCb4fjXum2naLdfCg7lyyaXaAhEO8V/LyCdFwwBW2MoeBT+LaELCIkiOOsRJiXkKMfVYiyDycJl+8keF4i1WoK2afZHL5bS85ztUx/Xsv057Us36plKsSztazzEjl51DKXSSDTqlqm+b5c7CqOo5jZzWbhaWEesTAmktxUzVTvJRY6M8t3HCSYaFaCl2YSchpTYVdnRRankqepkJuVWOitmAl7rEw5BP72DvER05CDeRKgeJ/CQm/mOhY11zrtECrlXmOhOUNGe3OYupvuO4sWpkHkkQRRCLMSC80ZOaOUXNYIpJFCWshgaRLBoy/lTZdWSWRGJSnH+VLGvyrh09ijss1plUSuWA5ffFolUcM4uivPSixtDjdKIZ9adY2C/Dc9nXi0SqGMg4bcqhyYcPT7r8fdbyhEHrOI2a9SqGMtkg9rFMK0miGumkVI4z0cyppZyAtnnNe8Ir6Ob4ma1/RjJZwwlVc9vyD/u4N6Tf7/i3+Uq93L4Xz3O9RNlc6H3fNxb5dv19PLl7uXfz9wB79jfZzfX/av1/NelaYfs+TPD/mW38p3+qP+MySXkbYx64XXe7luqfjHm6byHw==",
      "brillig_names": [
        "is_quest_completed"
      ]
    },
    {
      "name": "opt_in_leaderboard",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "tZjdbhs5DIXfxde5kChRP3mVoijS1C0MGE7gJgssirz7khIPbS8wg3SC3FjfcKQzEklx5Pmz+7H//vrr2+H08+n37v7Ln9338+F4PPz6dnx6fHg5PJ3E+mcX9CdS3t3HO2nbbFOyts8223W2+2z92a6L3S92XWl3n7Sts2123cpse7A2W9tHSyFb22YbZVyRloK1bbapzDZHeV5UKAYsIyIpVIMCSykGNQAyoBk0dG6wdFi6CaZAABNMMQAywIYn0s5VQS1NYPh2ACyZAMWAAyAD0LnAUmCpEKywNAg2CHYIdgzv0pnEx5nFh4kU2KAEACwVluqWbtBg6ejTywQOEaBpIM9idcKARADcyrBkWBgWLgYFloI+uvYJUG4Z0A269okKdULRCE4oBhrBCQzoBpQAzSBlACwZfbKOygIauAnNYEx+QDEYXh2AzhWdWwLA0jF8rEKgDvcOYIA9vcYEQGdCZ7Kn1wRL0uFFQYdLrtYRAoWREgojJQboVJtCNxghGFANWgQwAJ07hneztJAAOrwLjBAo6DRIZtg0EyYUA53PhAzoBhUWdeYA3Q7EApqiJKvoMU5Lj8VAYzqhG2gBGTB0FDQoE2DpNjyGEJ14PiQGjcIk9f6ksaZB7P2K91M/TeroF10vpuiEftH1YoVKbN7P9Uj3WQ5KWjPzKPaarJN0rZM0S40KSPM0k1LXsWkQO3WjpKE0qqCIfklruFEDaS3MeVAHaRGcpJXJqILG/Ca5rWo/HtRBWgYm6cYxqkY5RCd2wtisxTsXJd37RhWkUTBipw7KPiK7CruNXaW4SnEVTeGs0RpldpLmrlEFaUEzakaslWxShJ9Z30ZG8DiT2/Qdk5vS8F8fxE4dNDw5qVkOjZJqhLwaRdXIbdFt0W3kNnJbSk5uG3k6iZ06iH0E+4iRG22QeIOHTWdv1GwdZcx+Emx1zH6Sjh2HGK0SRm7TLGYaxE4dlKA8aumkkc+DODpVUPHnFrd5PKrHo3o8avNnjMzub293Oxzpvr2c93s90V2d8eTk9/xw3p9edven1+PxbvfPw/F1dPr9/HAa7cvDWe6Kl/anH9KK4M/Dca/0dncZHZaH1tqqjW5SiVxA6t17JVJobBJJCpxL8O0kaFlBC6kpxGsFSap3S8TWIEGZFyXysgRzhyNLo3zlinojwSveLNEUxK8XgUqbfJniki/riiOkRMIRUvsWJ9GWJeTNXpATgS/rKP1Goa/4oekxYDpC3t1LCjGsBTS7K6JUv7IksuZNCsirJO/RJW++V4HzkkJMqwu5rKOGxYDEldSsUsvhzxJ40Z9rqZkaVlIz0aJEWVtJqsWXIq/dTSEpxR16lRl/E5KLgmyXxZD0j+8RCh/eJBQ/vEuIPneXvLf6ho9XX+KPl18qn1h/IyOoFC57RLb+7RRWiqf8UUJA5K/SxZvyXeJWYyU/U4Uncro4gm4TPK0sgyhiEkQpLUqsJCdnnAs4ty0CxadQVmawtogUkZeUrjL7byRqhiep8rIr+VMl9CyL3VGv0upvJGpHOORPYtkk0ZNv854XJVYLhbtC//BuUZDvj5d3IW1SaP4KorBpDpmuiv+mOXD2VchfsE0K3WNRYtqikC7RTLxpFfId0hXallXIUcQPJXnD+O7vnV635GMnVJieNz2/Yf43hXrL/P83/qtcPTwezjdf7N9U6Xx4+H7c2+XP19Pj1d2Xf59xB1/8n89Pj/sfr+e9Kl0++8vPlyTel7h91W9OctniXSt6EfVeI7mXv77pVP4D",
      "brillig_names": [
        "opt_in_leaderboard"
      ]
    },
    {
      "name": "opt_out_leaderboard",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "profile_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAARSUAAABpKAIAAQSASScCAgQAOw4AAgABKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgAAACgAgEcEAAEmJQAAAQUnAgIABicCBAQFLQgABS0KAgYtCgEHAAgABAAlAAABLi0CAAAtCgYDCyIAA4BGAAILIgACgEQABCQCAAQAAACzJQAAAqgwCIBGAAMnAgIABycCBAQFLQgABS0KAgYtCgEHAAgABAAlAAABLi0CAAAtCgYDCyIAA4BGAAELIgABgEQAAiQCAAIAAAD+JQAAAqgwCIBGAAMmKACABAR4AA0AAACABIADJACAAwAAAS0qAQABBfeh86+lrdTKPAQCASYlAAABBS0IAQMnAgQEBAAIAQQBJwMDBAEAIgMCBC0KBAUuDIBGAAUAIgUCBS4MgEYABQAiBQIFLgyARgAFKwIABAAAAAAAAAAAAgAAAAAAAAAALQgBBScCBgQFAAgBBgEnAwUEAQAiBQIGLQoGBy4MgEYABwAiBwIHLgyARgAHACIHAgcuDIBGAAcAIgcCBy0OBActCAEEAAABAgEtDgMELQgBAwAAAQIBLQ4FAy0IAQUAAAECAS4MgEUABS0IAQYAAAECAS4MgEQABicCBwQILQgACC0KBAktCgMKLQoFCy0KBgwtCgENAAgABwAlAAACui0CAAAnAgEEBy0IAActCgQILQoDCS0KBQotCgYLLQoCDAAIAAEAJQAAArotAgAALQsGAQsiAAGARAACJAIAAgAAAmwnAgcEADwGBwEnAgEEBy0IAActCgQILQoDCS0KBQotCgYLAAgAAQAlAAAD6C0CAAAtCwMBASIAAYBHAAMtCwMCLQoCASYqAQABBQLcbieAdhKdPAQCASYlAAABBS0LBAYLIgAGgEQAByQCAAcAAALcJwIIBAA8BggBLQsDBgsiAAaAQwAHJAIABwAAA3QjAAAC9S0LAwYtCwEHLQsCCC0LBAkNIgAGgEMACicCCwEBJAIACgAAAx8lAAAE+y4CAAeAAygAgAQEAAQlAAAFDS4IgAUACgAiCgILACoLBgwtDgUMASIABoBHAAUOKgYFByQCAAcAAANfJQAABZstDgoBLQ4IAi0OBQMtDgkEIwAAA+cnAgYEBy0IAActCgEILQoCCS0KAwotCgQLAAgABgAlAAAD6C0CAAAtCwEGLQsCBy0LBAguAgAGgAMoAIAEBAAEJQAABQ0uCIAFAAkAIgkCCgEiAAqARQALLQ4FCy0OCQEtDgcCLgyARwADLQ4IBCMAAAPnJiUAAAEFLgiARQAFIwAAA/gNIgAFgEMABiQCAAYAAARoIwAABA0tCwIFLQsFBgAiBgIGLQ4GBScCBgQELQgBBycCCAQFAAgBCAEnAwcEAQAiBQIIJwIJBAQAIgcCCj8PAAgACi0LAQUtCwMGLQsECC0OBQEtDgcCLQ4GAy0OCAQmLQsDBgwqBQYHJAIABwAABH4jAAAE6i0LAgYAIgYCCAAqCAUJLQsJBy0LAQgAIggCCgAqCgULLQsLCQAqBwkKLQsDBy0LBAkuAgAGgAMoAIAEBAAFJQAABQ0uCIAFAAsAIgsCDAAqDAUNLQ4KDS0OCAEtDgsCLQ4HAy0OCQQjAAAE6gEiAAWARwAGLQoGBSMAAAP4KgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAFKCMAAAUzLgCAA4AFIwAABZouAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAFhi4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAFVSgBgAUEAAEDAIAGAAKABiMAAAWaJioBAAEFRafKcRlB5BU8BAIBJg==",
      "debug_symbols": "tZjdbuM4DIXfJde50A8lUX2VQVGkbToIEKRFJllgUeTdl5R4lGQBGzOe9ib6TIvHFEVJjj9Xr9vn88+n3eHt/dfq4cfn6vm42+93P5/27y+b0+79INbPldMf76UJa2lTb4NdB7KWexuDtaW3ZNeUe5vEL2nLvc25t4WsrasH7wRYHuTVozrAsNQOwUVAMfABAEvwAHWXR4QYDcgDqkHS0cjTowoGsUTvAdkgwBJgibDEZECwEPqkAIByljBCFmACsEHFrWoWchEAi460AywBfUI1iKZM5AAJoH1IIEUAG+QAyAbFAxIA7i14BZ2mDsNifZJTryLQiqgBAdggBEA2iOgc0TlWA4KF4N5G0aAYZA/A0zPcCzoXdGY8nWGp6l4VxD1KSWSdggZaEh2ygS6G6BUSoBposXUoBlobHdA5wT0NC9y1SKJUb9YpUCgtjKiggpLeokuygRZABzbQ1dhBQ5WqK5qfKAVQND8dEqAaaH4aMPpwNtDJ7aCdJVGsk9tAC7JDMWjxNGCDCEvLBgu0JCi0JDRggzb2BujcktAAXlp+sSpUA107HUqH6jwgAaxz9QSAJUQA3CPcdXWTTHfVGezABlp+HapBJoMSAJbDyg5gyazVLN5pSZFX0gyR7nauPa5TAmm2jKjXg1AF5TiIQWXYyrDxsPGw1WGr0POoOaECaqugUxo0PMLw0LlvI2pHAzVbi74T2Th8y1yjPGwafaeWRWpUQDxsWp6kp4fXZWuUBkE5OOSvnRNGyHPQmI3w3HZWGI1+Yz7CmI92gnRKzfdyWa9wij6djtutHqI3x6octh+b4/ZwWj0czvv9evXPZn9unX59bA6tPW2OclcqZ3t4lVYE33b7rdJlffV2064x1mTeUQ6HIZDuFfy0glaSKcjkXhV8jr8t4ZkhIfmalIjTEilVZCFzoKuEK3cSNC0hu50plMJXgRIW5ZL8VC7zTCLIIQZ5KSqTQZRpCXa6STQJ2Xav48j1ToFn8sC6k/VEcHVTCnVuPonTqAk5rac05pIp7xojmRwmC/MrKvMLStN/QW36by3Om3wm5ybz+QXV6f++PP3f16f/5gL1CQMJ7lqeMaQ7gTBTW/KihCDkVelan4H5XiPMTGtBacmL/FXhflLDTHHKfx8EIYdbnJSYqc1ExRTkXXuJQB4h5JkI5gYRPVZ6iDez+ScShZDJUNJ0KvlbJeRthlCX5aas/kSiVEyHZ58XSdQ4Ns5KkxJzi8ONVMh7Y12iIK99Y4WWsEiB89i63aIYKNxseItiSDRGkYpfpFDHXGQflyjE62zKJ4ZFCnkcgpGXjKJklEPJtMC/jpNc/iIt8Q/YYSotej4j/ruNekn8//N/lKvNy+549z3tokrH3eZ5v7XLt/Ph5ebu6d8P3MH3uI/j+8v29XzcqtL1o5z8/AgprmVzetQ/bHJJvE5RL7zeK0nulceLhvIf",
      "brillig_names": [
        "opt_out_leaderboard"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15353289549725070351": {
            "error_kind": "string",
            "string": "Quest already completed"
          },
          "15371982489698173836": {
            "error_kind": "string",
            "string": "Only admin"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=",
      "debug_symbols": "nZPdioMwEIXfZa69MJo/fZVSStRYAiFKqguL+O47KclWF7KU3mQyzpzPo5lsMOhuvd+MG6cHtJcNOm+sNfebnXq1mMnh0w3KsJAa2roAQqFlGBi0AgOHttn3AlL/bfFah/YDALGz8tot0LrV2gK+lF2fTY9ZuWdclMdqWYB2A0YEjsbqsNuLl7rMS0lJiYxy3Avxi8DsBCF5iJA8IiSKEkCQk77K61nFop6x1zcQyt81IGuRDLAmZ4Dm9bRuop5y+ZEBSZOBRuYM8Lyel+kP8Ip/YqCpqghoapYzIP8xINMQifLPEVwxVb3xp9neA8ob1Vkd03F1/aG6fM+pku7G7KdeD6vXgXS4ILhecAir+rqHt/0A",
      "brillig_names": [
        "sync_notes"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "AztlanQuestPoints"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "profile_registry",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "social_verifier",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_points_commitment",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "quest_completion_count",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "quest_completed",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "is_on_leaderboard",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_points",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "quest_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "points_earned",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::_record_quest_completion_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::_record_quest_completion_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "quest_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "points_earned",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::complete_quest_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::complete_quest_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_registry",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "social_verifier",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "_quest_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "_quest_data",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::create_quest_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::create_quest_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::get_public_points_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::get_public_points_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::get_quest_count_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::get_quest_count_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::is_on_leaderboard_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::is_on_leaderboard_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "quest_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::is_quest_completed_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::is_quest_completed_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::opt_in_leaderboard_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::opt_in_leaderboard_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "profile_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztlanQuestPoints::opt_out_leaderboard_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztlanQuestPoints::opt_out_leaderboard_abi"
        }
      ]
    }
  },
  "file_map": {
    "104": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "107": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "145": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "146": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "147": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "163": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "172": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "288": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "305": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "325": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "343": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "344": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "363": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "50": {
      "path": "/root/x/aztlan/contracts/aztlan_profile/src/main.nr",
      "source": "use dep::aztec::macros::aztec;\n\n// CONTRACT 3: PRIVATE QUEST POINTS\n#[aztec]\npub contract AztlanQuestPoints {\n    use dep::aztec::macros::{functions::{public, private}, storage::storage};\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable, FunctionSelector};\n\n    #[storage]\n    struct Storage<Context> {\n        // Contract references\n        profile_registry: PublicMutable<AztecAddress, Context>,\n        social_verifier: PublicMutable<AztecAddress, Context>,\n        \n        // Points data (stored as commitments)\n        total_points_commitment: Map<Field, PublicMutable<Field, Context>, Context>,\n        quest_completion_count: Map<Field, PublicMutable<Field, Context>, Context>,\n        \n        // Quest tracking\n        quest_completed: Map<Field, Map<Field, PublicMutable<bool, Context>, Context>, Context>,\n        \n        // Leaderboard (optional public data)\n        is_on_leaderboard: Map<Field, PublicMutable<bool, Context>, Context>,\n        public_points: Map<Field, PublicMutable<Field, Context>, Context>,\n        \n        // Admin\n        admin: PublicMutable<AztecAddress, Context>,\n    }\n\n    #[public]\n    fn constructor(\n        profile_registry: AztecAddress,\n        social_verifier: AztecAddress,\n        admin: AztecAddress\n    ) {\n        storage.profile_registry.write(profile_registry);\n        storage.social_verifier.write(social_verifier);\n        storage.admin.write(admin);\n    }\n\n    #[private]\n    fn complete_quest(\n        profile_id: Field,\n        quest_id: Field,\n        points_earned: Field\n    ) {\n        // Private function to complete quest\n        // In production: verify quest completion proof\n        \n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"_record_quest_completion(Field,Field,Field)\"),\n            [profile_id, quest_id, points_earned]\n        );\n    }\n\n    #[public]\n    fn _record_quest_completion(\n        profile_id: Field,\n        quest_id: Field,\n        points_earned: Field\n    ) {\n        // Check not already completed\n        let already_completed = storage.quest_completed\n            .at(profile_id)\n            .at(quest_id)\n            .read();\n        assert(!already_completed, \"Quest already completed\");\n        \n        // Mark as completed\n        storage.quest_completed\n            .at(profile_id)\n            .at(quest_id)\n            .write(true);\n        \n        // Update quest count\n        let current_count = storage.quest_completion_count.at(profile_id).read();\n        storage.quest_completion_count.at(profile_id).write(current_count + 1);\n        \n        // Update points commitment (in production: use homomorphic addition)\n        let current_commitment = storage.total_points_commitment.at(profile_id).read();\n        let new_commitment = current_commitment + points_earned; // Simplified\n        storage.total_points_commitment.at(profile_id).write(new_commitment);\n    }\n\n    #[public]\n    fn opt_in_leaderboard(profile_id: Field) {\n        // User chooses to make their points public\n        storage.is_on_leaderboard.at(profile_id).write(true);\n        \n        // Reveal points publicly\n        let points = storage.total_points_commitment.at(profile_id).read();\n        storage.public_points.at(profile_id).write(points);\n    }\n\n    #[public]\n    fn opt_out_leaderboard(profile_id: Field) {\n        storage.is_on_leaderboard.at(profile_id).write(false);\n        storage.public_points.at(profile_id).write(0);\n    }\n\n    // ADMIN FUNCTIONS\n    \n    #[public]\n    fn create_quest(\n        _quest_id: Field,\n        _quest_data: Field  // Hash of quest details\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.admin.read(), \"Only admin\");\n        \n        // In production: store quest details\n        // For now, just emit event or store in mapping\n    }\n\n    // VIEW FUNCTIONS\n    \n    #[public]\n    fn is_quest_completed(profile_id: Field, quest_id: Field) -> bool {\n        storage.quest_completed.at(profile_id).at(quest_id).read()\n    }\n\n    #[public]\n    fn get_quest_count(profile_id: Field) -> Field {\n        storage.quest_completion_count.at(profile_id).read()\n    }\n\n    #[public]\n    fn get_public_points(profile_id: Field) -> Field {\n        if storage.is_on_leaderboard.at(profile_id).read() {\n            storage.public_points.at(profile_id).read()\n        } else {\n            0  // Private by default\n        }\n    }\n\n    #[public]\n    fn is_on_leaderboard(profile_id: Field) -> bool {\n        storage.is_on_leaderboard.at(profile_id).read()\n    }\n}\n"
    },
    "68": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "69": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "71": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "75": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "97": {
      "path": "/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    }
  }
}
