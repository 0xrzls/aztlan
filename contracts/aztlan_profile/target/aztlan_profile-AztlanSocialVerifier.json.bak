{"noir_version":"1.0.0-beta.5+0000000000000000000000000000000000000000","name":"AztlanSocialVerifier","functions":[{"name":"constructor","hash":"14969540460539818843","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_registry","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"verification_oracle","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUuQ7CMAx1aBGEa+AY4CtSzo4MMDMwMEe0RQwIhCrmfjpUOKprytTkSZUT2X5+dtII+ELgl8NH24BfmJgtWlUPgUUu5VKncKSzNGQB/2F8M7SS5ed+z2LDktW1yR+q5VpW9GdR/0ISTgf8c8Pvu+FXLeTZZWV+YHX7UP55aY7x0Tu2R18b/WY9wLVkfC7OnWqyPbdRhX5Tq4u9jlmvHpmPJR1B78MxQS79uh0e53sUH9P7U1/i0/OaxsDAHwKP7UVFHAU/OIvNhLWbEWzfqIij6ELxwvlZkWfrpmxCpYwmD/mbUB46sPpNFj/FfYf0ZaxfQ2ey0UGy0Ile6ShanvWQ8dO55XN6A7pP1M3DBwAA","debug_symbols":"pdPNioUgFAfwd3HdQi0/6lUul7CyiyAW3hwYwncfvZNNLWwxbTyZnV/4h7OCQXbu1SozTm/QPFbQWaW1erV66sWiJhPergDGBRHQkAIg+lsYaBAMlcfqfQFSR7tYKWPDgQjwLKw0C2iM07oAX0K7z0fvWZhPXYQNp0GUZgg1gKPSMj754q8b5lsRgXjrRqTEO0DOAroQKoiSUGG2C4jhE4HzBIcl3QgOCd8JWp+EMi8wXtabwHgNc0J1cQ1UcZLugQimOeMyTAr3MOsyFya9Hya7HSa/HWb93zCfYSd6ZU/j4qNmlei03LajM/3hdPme00kat9lOvRyclVE6zFxYHxgWmDx9/NsP","names":["constructor"],"brillig_names":["constructor"]},{"name":"get_discord_commitment","hash":"3134864703723727607","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzYobRxDu2dFIGmkVKU4eZGZXWu3eBF5vcgvETzCRtIGE4CQkuQXmmEseIwGDX8IHv4XBYPDB+OKbwQZj9arL++mbmpEWdfunQPRMV3VVdf11TSsya4jcz0IL5hhkbubGbD/IPfLKIkXPxk1oC966MXXjAeBjjxtPFV188T/Nxmepqe7Zo/7HqeMZ0j7CMwD/rOP4fFNe8+e9WBiYzeTANV2Hl+dbsMbCt8Bb1oe028rvp4Htln9l6m0lMXe7DCL7WPifA3/jj38m/O+E0f89/4sw/PO+Wcfh0uix5tNWA7Ppe/SHyMWDxOM+x1r9jmkO5fdM2JyISJ7ow/YRP4jtEkXXkYLDXEMcykkUOR+KF/vbwsyN2c3giCcGik4cZ22Y9+jXya5xJvJ7io1CxFmb9Knzmdiuo+g6UnAcGx1FTkeR8znxkhgdmGrMRjWjyOE5lsP1DuXEHuUgTUJyEo9ykJeciSKn7VEO8jov16PkNvp15sZsP5gI7y7o5jFPz8RG3IOj/Xogm2OyT3oh7hBw7PsB4NqE+wJwmA8MMb2jnez4M/BlOoFUkePRvqcD0guBba/Zt0d6IQ5tz/ZF27N90fZaHgho9hU77WrfoSKnTfKFZ4vmBc7L9ZgQ/V03Bs6R7BbwNSQrVfbnUfaUz0WEgbJvjp+U9EIcxhbHD8YW+otBixGhs3r9D3yZTkCLkZj4af0q8pDvlKGyvlWjX6LQ8vkt77vGptDP3Wht8MQ925z82j0Xf/3y3a/ze4vl3T/u/V78uPx+WSyiGj3Z7kwX19BZH4r/W+Um/czNZ3vA9PT6Iisur+3AMYHyE6L/yb1jLMrY2kPPy2mRXx4Xl8WkWCzG84Jz2MIB2Am/RSWG2qSLPNfVLK034Jr1mxs/Zs3S9hc37C9W9ne7Zn//utHS/rmDvKGpnr8R4dBGB4TTzk7hITGVbNmD+AJrnoWZG7P9IE9In7/daPf11D1LfZS8QJuEzOEVjK0ez0AP1PXKfuWmXfuAixV6rqGHCr12voyIHs+liN6RF/r0gnQVG7YVeuTHcfyPG61t3pB+mFM9wuHeu4TTvoW077EUdP7PPQe+P7hxnxERDvOQv+l37WGb/szR+gyxxU37DO4/Ead9y2t1qEXyMG+F/8fIW/yO47zFHI0Ves7bbXl+p1yPI1P1Jcc35kxKOJTbIRz6/YLkYbyIbzBn+FzX7h1kD3bdfeCHfsTzA9fyGSj0D0GXB+55aKr1jONLq0usizF63Wu6+8R4DFhDxloNiUh2oH5n5/tPkd8z1XwPcf/ZJX04hvheOg3km6YaoN1HfmnW9zDsM9RPeGk9sBbvXGub+kGt1mq1hOvMLrVE6zm0WtI3N+uVtTrBdQTpH7nR4h/T/lEe12UtprRaIPSpQo/2TUg25kRKOK0HaIqtboNeTeeLphfGHq5l2dv2wDlfJ+MTOOMn2hmPe+czvqnXtsA+GCj0Wv89Inq0uZaX3Pui3D7hMJ84Z+v64se0j23/M0nvoP2f2Qa+0gP4vo/Ijhbzk+XR6spkepIfnS223Uf4lj+fnPwwH0+KbJlfabNN/lBsUl7jMf4tdNy73BEwvfBLiP650K5+L9yzxFWiyLN0rxvooprxiocy1yo359KySh+XVXqR3SurOgquDzjMTQuH7h3thbxEj4ToX7l38UkX1sj6kSK/S/I39FbmMEeZV6zMCb31z0vh50bcu+++6kom8cc51k1iJ0RerVJqOi+meX42zpfjfLItr94BC2u3U8UoAAA=","debug_symbols":"tZfdauM8EIbvJcc5kGZGGqm3spSStukSCGnJth98lN77zmT0Os2CDWvYk75P4uqJfkay/bl53j9+/Hw4nF5ef23ufnxuHs+H4/Hw8+H4+rR7P7ye7NvPTfI/uW/udLuhFJEjKIIjJKJE1AiNaBFh4bCwWZoFRXCERJSIGqERLaJfQlJEWCQsEhYJi5ilWtQIjWgR/RIlReQIiuAIiQhLCUsxS7doEf0SNUXkCIrgCIkoETUiLDUsNSwaFg2LhkXDomHRsGhYNCxqlpwtTZNpu2lpZB5JI02V2VJGlpF1pI5sI3tkTyPzSBrpPrGUke6zhe11pI5sI81H1o+c7AtiB//GWuacABlAAAbYz1BxMC9VhwboA7xAAzKAAAwQgPWX1KECFNAAfYAXbUAGuLk5MEAABVABCmiAPsArmLoDARgggAKoAAU0QB/gNR0Ac4HZK5uTgwAKoAIU0AB9QMX0VkxvxfRWTK8XM1s1Zi9g9uX2Eg4QQAHUUQleygGoDa/mC3g5B2QAARgggAKAucHcYG4wd5g7zF7Sl857TfPlGwW00WcvYwdKCZABPmRxYIAAfMjFoQIU0NAc5gxzhjkTgAECKIAKUADMdBF+fW03ONsf3s/7vR/t3w57uwW87c770/vm7vRxPG43/+2OH5d/+vW2O13yfXe2q1YL+9OzpQlfDse909f22jrNNxVuZbQWoTwJyq0hzxtyqjwMdlzwZLASvFHQgqLUYbAlmwRM5UbA8wLtglFo79c+UGs3CplXsGIWheUquJ2GMt+ebOExCGKeM9R5QxEdgiJtRfs6daDO//7SCDhjIYmprjGoYBJJy+ws5vRPFbk2QUHqt3r6G4V2rIUdc3WVovO0LbrMKxYMdkTCQFJmN1ZeWJFSOqazNrpOZ05661ioK60Ze0uvdWn3k1VnDLfZM6YtzcW0we15I832IveFcZSpLrSm63zWfntOLYxEuWFRVYhmFYurylqnoUjqc5Kl2krTJrGHtz5XW0sGe+K4zietMrRpGJRW9UEIhZW/T+ZfGIpMoyiaVxn6tEtr5jUGvu5zLqtGwXXa59zWjMLKeSpsWdG+T3fwrnVNe8Lm7LLq9xv6f3PzXtP/P9rf26fd0+F88w795abzYfd43I+PLx+np29X3/9/wxW8g7+dX5/2zx/nvZuuL+L25wfZozyVdO8vUPYxp7y1ZyL/mP1qyXaV77+8M78B","names":["get_discord_commitment"],"brillig_names":["get_discord_commitment"]},{"name":"get_twitter_commitment","hash":"15580361151470208991","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzY4bRRDu2fHYHnuNTeBBZnbH692bpWwWbkjkCQbbiwRCAQTckObIhccACYmX4MBbREJC4oByyS1SIkVxr7uyn7+pGXvl7vyUZPVMV3VVdf11TTsyG4jcz0IH5hhkbu7G7DDIPfLKIkXP1k1oC166MXXjEeBjjxtPFV188T/PiovU1PfsUf/T1PEMaR/hGYB/1nN8Pqlu+fNeLIzMdnLgmr7Dy/M9WGPhU+At60Pabe3388B2yz8yzbaSmLtfBZF9Kvwvgb/xxz8T/g/C6P+a/1UY/vnQbOJwZfRY82mrkdn2PfpD5OJB4nGfhVa/Y5pD+QMTNicikif6sH3ED2K7RNF1ouAw1xCHchJFzpvixf62MHdjdjc44YmRohPHWRfmPfp1um+cifyBYqMQcdYlfZp8JrbrKbpOFBzHRk+R01PkvE+8JEZHph6zUcMocniO5XC9QzmxRzlIk5CcxKMc5CVnosjpepSDvC6rzSi5jX6duzE7DArh3QfdPObphdiIe3C03wBkc0wOSS/EHQOOfT8CXJdwHwAO84Ehpne0kx2/Br5MJ5Aqcjza93xEeiGw7TX7DkgvxKHt2b5oe7Yv2l7LAwHNvmKnfe07VuR0Sb7w7NC8wGW1GROif+jGwDmS3QO+hmSlyv48yp7xuYgwUvbN8ZOSXojD2OL4wdhCfzFoMSJ0Vq/fgS/TCWgxEhM/rV9FHvKdMlbWdxr0SxRaPr/lfd/YFPqFG60N/nHPNic/ds/lT9989u3i0XL18IdH35dfrj5flcuoQU+2O9PFDXTWh+L/TrVNP3fz2QEwO7+9yIqrWztwTKD8hOi/cu8YizJ2DtDzelbm16fldTktl8tiUXIOWzgCO+G3qMRQl3SR56aapfUGXLO+c+PbrFna/uKW/cXK/u437O9XN1raH/eQNzb18zciHNroiHDa2Sk8JKaSHXsQX2DNszB3Y3YY5Anp87Mb7b7+dc9SHyUv0CYhc3gNhdXjP9ADdb2xX7Vt1yHgYoWea+ixQq+dLxOix3MponfkhT69Il3Fhl2FHvlxHP/iRmubF6Qf5tSAcLj3PuG0byHteywFnX9zz4HvD+7cZ0SEwzzkb/p9e9i2P3O0PkNscdc+g/tPxGnf8lod6pA8zFvh/zbyFr/jOG8xR2OFnvN2V54/qDbjxNR9yfGNOZMSDuX2CId+vyJ5GC/iG8wZPte1ewfZg133B/BDP+L5gWv5DBT6v0CXP93z2NTrGceXVpdYF2P0utd294nxGLCGFFoNiUh2oH5n7/tPkT8w9XwPcf/ZJ304hvheOg3km7YaoN1Hfmg29zDsM9RPeGk9sBbvXGvb+kGt1mq1hOvMPrVE6zm0WjI0d+uVtTrBdQTp/3ajxT+m/aM8rstaTGm1QOhThR7tm5BszImUcFoP0BZb/Ra92s4XTS+MPVzLsnftgXO+ScY7cMZPtTMe985nfFuvbYF9MFLotf57QvRocy0vufdFuUPCYT5xzjb1xY9pH7v+Z5LeQfs/swt8pQfwfR+RnSwXZ6uT9ZXJ7Cw/uVjuuo/wLX8xPftiUUzLbJXfaLNL/lhsUt3iMf4t9Ny73BEwvfBLiP5/oV3/nrhniatEkWfpnrfQRQ3jDQ9lrlNtz6VVnT6u6vQie1DVdRTcEHCYmxaO3TvaC3mJHgnRP3Pv4pM+rJH1E0V+n+Rv6a3MYY4yr1iZE3rrn6fCz424d9991Y1M4o9zrJvEToi8WqfUbFHO8vyiyFdFPt2VV68AYjcOGsUoAAA=","debug_symbols":"tZfdauM8EIbvxcc5kEbSjNRbWUpJ23QJhLRkkw8+Su59ZzJ6nXjBhjXsSd8ncfVEPyPZ/h7ed6+Xny/748fnr+Hpx/fwetofDvufL4fPt+15/3nUb7+HYH9iG55kM1DwiB7kkTyyR/FgD/GoHm5JbklqqRrkkTyyR/FgD/GoHu0WOXi4JbsluyW7JauFNdhDPKpHu0UJHtGDPJJH9nBLcUtRS9OoHu0WHDyiB3kkj+xRPNjDLewWdou4RdwibhG3iFvELeIWcYuoJUZN1UTaDDX0jD2pp6pi0sw9S0/uKT1rz+bZQs/Yk3qaL2vmnubThW3cU3rWnuoj7UcM+gUlA/tGW8YYABFAgATQn6FioF5igwpoHaxAHSKAAAmQAdpfEgMGCKACWgcrWocIMHM1SIAMKAAGCKACWgerYGoGBEiADCgABgigAloHq2kHmAvMVtkpGGRAATBAABXQOjCmlzG9jOllTK8Vc9JqjFbAyZbbStghAwqAeyVYKTugNqyab2Dl7BABBEiADCgAmCvMFeYKc4O5wWwlfeu81XS6fSOA2vtsZWxAIQAiwIacDRIgA2zIxYABAqhoDnOEOcIcCZAAGVAADBAAzHQTXq+bAWf7y/m029nR/nDY6y3ga3vaHc/D0/FyOGyG/7aHy+2ffn1tj7c8b096VWthd3zXVOHH/rAzum7urcN800wZrTMJj4IyNcR5QwycukGPizQatAQnClpQFO4GXbJRkKhMBGleIC2XbpDW7n2gWieKPK9IMs5DynfBdBrKfHvShccgKKU5A88bSpYuKLmuaM9jB3j+95dGkCIWkhLxGoOMxURSZmcxhn+qiFwzClIe6ulvFNKwFnrM8SpFS+O2aHlesWDQIxIGymV2Y8WFFSmlYTq50n06Y5CpY6GuhCP2ltzrUu8nq86Yh9355xlTl+Zi3OD6vBFmexHbwjjKWBfC4T6f3Kbn1MJIJFUsqmSiWcXiqibhcSg5tDnJUm2FcUL14a3N1daSQZ847vNJqwx1HAaFVX3IhMKKj5P5F4aSx1EUiasMbdylHNMaQ7rv81RWjSLxuM9TXTMKLeexsPOK9m28gzfhNe0Jm7PlVb9f0f/JzXtN//9o/6yftm/70+Qd+mqm0377etj1jx+X49vD1fP/X7iCd/Cv0+fb7v1y2pnp/iKuf36QPspTCc/2AqUfY4gbfSayj9GulqhX0/PVOvMb","names":["get_twitter_commitment"],"brillig_names":["get_twitter_commitment"]},{"name":"get_verification_oracle","hash":"2538917087935527758","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqQj73w/AJf4PC7PspHV7d28xL26VkLinrZeYtVwTgfOBWT4PfCJ+Sd4bd+XwsG8Wc657rsE/hUxvmN4qI7PH2G/Rfp19CborDMR1bGoRSqkTEoRWvzE8ukLXiT5KKkFAAA=","debug_symbols":"fdJNroMgEADgu7Bm4fAj1qs0jUHFhoSgofCSF8PdC41aWdgNI87MBwRWNKo+PDttp/mF2vuKeqeN0c/OzIP0erbp74qqPABDLccIeAoxYrRXdN4plQtOLQlapFPWo9YGYzD6kyZ8il6LtJ/opUvZCiNlxxQTOGmj8lfE3+7qupVxAls345weAC8FuBYAGN8EAPHdAghSEOSaELxhGyHqih9EfSsE+kOgDd0FRsiVwH4dg4r6OAerboXxSDM5aFfcaMya07I3aptOwQ6nrP9f9sz+IhY3D2oMTmXp9CzSeIcGE/qIebU3","names":["get_verification_oracle"],"brillig_names":["get_verification_oracle"]},{"name":"is_discord_verified","hash":"10996841799559503081","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzW7bRhBemqIkSlalpn0Q0pYs+yYgjttbgeYJWEluL2mKIih65L2XPkYLFOhL5JC3CBAgQA5BLrkFSBCttBN/+jikZGg3PwMIS+7MzszO3w5XkdlA5H4WWjDHIHMzN2aHQe6RVxYpejZuQlsQuYfUvR8BPva48VTRxRf/82x8kZrqnj3qf5o6niHtIzwD8M86js935Q1/3ouFgdlODlzTdXh5vgNrLHwPvGV9SLut/H4e2G75N6beVhJzd8sgsk+F/yXwN/74Z8L/Xhj9P/C/CsM/75tNHP5i9FjzaauB2fY9+kPk4kHicZ9jrX7HNIfyeyZsTkQkT/Rh+4gfxHaJoutIwWGuIQ7lJIqcj8WL/W1h5sbsdnDCEwNFJ46zNsx79Otk3zgT+T3FRiHirE361PlMbNdRdB0pOI6NjiKno8j5knhJjA5MNWajmlHk8BzL4XqHcmKPcpAmITmJRznIS85EkdP2KAd5XZabUXIb/TpzY3YYfOhdu6Cbxzy9EBtxD47264Fsjsk+6YW4Y8Cx7weAaxPuK8BhPjDE9I52suOvwJfpBFJFjkf7ng9ILwS2vWbfHumFOLQ92xdtz/ZF22t5IKDZV+y0r32Hipw2yReeLZoXuCw3Y0L0990YOEeyO8DXkKxU2Z9H2VM+FxEGyr45flLSC3EYWxw/GFvoLwYtRoTO6vUv8GU6AS1GYuKn9avIQ75Thsr6Vo1+iULL57e87xubQj93o7XBM/dsc/Jb91z88eCH3+YPF8v7jx7+Xvy8/HFZLKIaPdnuTBfX0MVGtyXSxqa671jhgeuOiIeNFYmzVrnNZ+bmswNgen5zYRY7/ompxh7KT4j+gXvHmJexdYCe19Mivz4trotJsViM5wXXCgP24m9eidU26SLPdbVR60G4Nj5y46esjdr+4ob9xcr+7tbs7283Wto/95A3pPUY00PFRkeE085o4SExlezYg/gCa6uFmRuzwyBPSB8ndr2v5+5Z6rDkBdokZA6vYGz1eAF6oK5r+5Xbdu0DLlbouVYfK/TaOTYiejz/InpHXujTK9JVbNhW6JEfx/FfbrS2eUf6YU71CId77xJO++bSvvtS0Pkf9xz4nuLW/UxEOMxDvjvYt1du+tNI62fEFrftZ7jPRZx2Z6DVoRbJw7wV/p8ib/F7kfMWczRW6Dlvd+X5vXIzjkzVlxzfmDMp4VBuh3Do9yuSh/EivsGc4XNdu9+QPdh1/wE/9COeH7iWz0Chfwy6/O+eh6Zazzi+tLrEuhij172mO1aMx4A1ZKzVkIhkB+p39r5nFfk9U833EPesXdKHY4jvv9NAvmmqAdq959dmc9/DPkP9hJfWA2vxzrW2qR/Uaq1WS7jO7FNLtJ5DqyV9c7teWasTXEeQ/okbLf4p7R/lcV3WYkqrBUKfKvRo34RkY06khNN6gKbY6jbo1XS+aHph7OFalr1rD5zzdTI+gzN+op3xuHc+45t6bQvsg4FCr/XfI6JHm2t5yb0vyu0TDvOJc7auL35K+9j1f5b0Dtr/pm3gKz2A7/uI7GQxP1uerK5Mpmf5ycVi132Eb/nzydlP8/GkyJb5Wptd8odik/IGj/FvoePe5Y6A6YVfQvQvhXb1e+WeJa4SRZ6le9tAF9WMax7KXKvcnkvLKn1cVulFdq+s6ii4PuAwNy0cu3e0F/ISPRKif+PexSddWCPrR4r8Lsnf0luZq9wfKvR9hd7657XwcyPu3XdftZZJ/HGOdZPYCZFXq5Sazotpnl+M8+U4n+zKq/c7bidOLSkAAA==","debug_symbols":"tZjbauNKEEX/Rc9+6OpLVXd+ZQjBSZzBYJzgsQ8cgv/9VLl6S/YBiRnBvGQvWdFSX6pbsr+H993r5efL/vjx+Wt4+vE9vJ72h8P+58vh82173n8e9dPvIdgfasOTbIYYPMgjeiSP7FE82EM8qodbkluSWqpG9Ege2aN4sId4VI92ixw83JLdkt2S3ZLVwhrsIR7Vo92iBA/yiB7JI3u4pbilqKVpVI92Cw4e5BE9kkf2KB7s4RZ2C7tF3CJuEbeIW8Qt4hZxi7hF1EKkqRqKm6GGntQz9lQVJc3cs/TkntKz9myeLfSknrGn+bJm7mk+ndjGPaVn7am+qO2goMKYDQgQO5B9UgzsEzZIgAwoAAbonaLegaxAYzUgQAQkQAYUAAMEoE2OzaB1sKJ1IEAEJEAGqDkFAwYIoAJaBytkBwJEgAoTGRQAAwRQAa2D1bQDASIgAWAuMFt9J5sdq3CHCmgdrM4dCBABGF7G8DKGlzG8VtIpGdhNbbqtkB0EUAGtV4KVswNqwwraIQEyoAAYIIAKgLnB3GBuMDeYG8xW1bfGW1mnYpthAJC3OVoZOyRABliX2YABArAu33bX1oECAGaCmWAmmKkAGCCACmgdbIE4wBxvwut1M2Dbfzmfdjvb9e+eA/p0+Nqedsfz8HS8HA6b4Z/t4XL7p19f2+Mtz9uTntWy3R3fNVX4sT/sjK6b6eowf2kOVkm3q3PgOArKo4HmDRQ4dYPuJGk0aHU+KOKConA36GyOghTLgyDNC6Tl0g3S2tSGWOuDIs8rkmAUs87MKHgchjJ/vU4umqDTm+YMPG8oWbqg5Lrieh4bwPP3X+pBIkxkTJHXGCRjEKOU2VGk8FcVxDWjIOWunv5EIQ1zoTsgr1K0NC6LlucVCwbdPWGIucwuLFqYkVIahpNrnIaTgjw6FupKmLC2ZKpLfbCs2mOkze4xdWksxgWuLx5hthXUFvpRxroQDtN4cnvcpxZ6IqliUiXHOKtYnNUkPHYlhzYnWe6KTF2JYbYdC1tmEcxJqVMbUk6/O6sUxpVK4U4Rf/vZoy+VeZrUuMpQx7GMYVUbckR10/2M/oGh5LEXRWiVoY1bBVNaY0jTZpPKql4kHjebVNf0QtfUWJJ5xfVtfI1owmuuj9ghWl51/4r2P7xBrGn//65/1qPt2/708B3/aqbTfvt62PXDj8vx7e7s+d8vnMFvBF+nz7fd++W0M9P0Q4H++aFP7E0s6dm+1+mhLs4NhWaHZGd1ocXCz1drzH8=","names":["is_discord_verified"],"brillig_names":["is_discord_verified"]},{"name":"is_twitter_verified","hash":"2209507939707655204","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzY7bNhCmVpZt2evaTfsgktde794MZLPtrUDzBKrtbS9piiIoetS9lz5GCxToS/TQtwhQoEAOQS65BUgQ0+ZkP38ayV6YzM8ABiXOcL7hcGZI0ZHZUuR+llrQxyR9c9dmx1HuUVcWKXY2TkIbELmH1L2fAD/2OPFUscWX/otscpma6pw92n+WOp0h/SM6A+jPOk7PV+Wtfp6LpYHZTQ4c03V8eb4HYyx9DbplfEi/rdf9IrDf8i9Mva8k5u6XQbDPRP8V6Df+9Gei/0EY+9/pvw6jP++bbRz+YPRY8+mrgdlde1wPwcWNxOM8J1r9jqkP8XsmbE5EhCf2sH9kHcR3iWLrSOFhriEPcRIF533p4vW2NHdtdjcac8dAsYnjrA39Htd1emicCX5P8VGIOGuTPXVrJr7rKLaOFB7HRkfB6Sg4n5IuidGBqcZsVNMKDvcxDtc7xIk94qBMQjiJRxzUJXui4LQ94qCuq3LbSm7jus5dmx1HY9HdBds85uml+IjP4Oi/HmBzTPbJLuSdAo/XfgC8NvE+Ax7mA1NM7+gn2/4IellOKFVwPPr3YkB2IbHvNf/2yC7koe/Zv+h79i/6XssDIc2/4qdD/TtUcNqELzpb1C90VW7bhOQfujZwjmT3QK8hrFSZn0fsGe+LSANl3hw/KdmFPIwtjh+MLVwvJi1GRM7a9SfoZTkhLUZi0qedV1GHfKcMlfGtGvsSRZb3b3k/NDZFfuFa64P/3LPNyS/dc/HLo29+Wjxerh4+efxz8f3q21WxjGrsZL+zXFwjFxvdlygbm+q8Y0UHjjshHTZWJM5a5a6euevPjqDZxe2FWez0J6Yae4ifkPwj944xL23rCDtvZkV+c1bcFNNiuZwsCq4VBvzF37wSq22yRZ7raqN2BuHa+MS1H7I2avOLG+YXK/O7XzO/311rZX89AG9I4zGmh4qPToin7dGiQ2Iq2TMHWQusrZbmrs2OozwhexzsZl7/u2epw5IX6JOQObymibXjGdiBtm78V+76tQ+8WJHnWn2qyGv72Ijkcf+L6B114Zpek63iw7Yij/o4jn9zrfXNG7IPc6pHPJx7l3jaN5f23ZeCzX+458D3FHc+z0TEwzzku4NDz8pNfxpp5xnxxV3PM3zORZ52Z6DVoRbhYd6K/g+Rt/i9yHmLORor8py3+/L8QbltR6a6lhzfmDMp8RC3Qzxc92vCw3iRtcGc4X1du9+QOdhxf4E+XEfcP3As74Ei/w/Y8rd7HppqPeP40uoS22KMXvea7lgxHgPWkIlWQyLCDnTeOfieVfB7pprvIe5Zu2QPxxDff6eB1qapBmj3np+b7X0PrxnaJ7q0M7AW71xrm86DWq3VagnXmUNqiXbm0GpJ39ztrKzVCa4jKP+vay3/Kc0f8bguazGl1QKRTxV59G9C2JgTKfG0M0BTbHUb7GraXzS7MPZwLGPvmwPnfB3GR7DHT7U9HufOe3zTWdsSr8FAkdfO3yOSR59reclnX8TtEw/ziXO27lz8lOax7/8sOTto/5u2Qa+cAXzfR2Tj5eJ8NV5fmczO8/Hlct99hG/8xfT8u8VkWmSrfGPNPvyh+KS85WP8W+q4d7kjYHnRl5D8c5Fd/164Z4mrRMGzcq8b5KKadqND6WuVu31pWZWPy6q8YPfKqo3C6wMPc9PSqXtHf6EusSMh+VfuXdakC2Nk/EjB7xL+jt1KX+X+UJHvK/J2fV6KPtfi3H2fqzaYpB/72DaJnRB5tU6p2aKY5fnlJF9N8um+vHoLkTlUpi0pAAA=","debug_symbols":"tZjdbuI8EIbvJccceMY/Y/dWVlVFW7pCQrRiyyd9qrj3nWH8JrBSom2kPen7APUT/4ydwNfwuns+/3zaH9/efw0PP76G59P+cNj/fDq8v2w/9+9HffdrCPaH2vAgm4GDB3mwR/RIHtmjeIhH9XBLdEtUS9Vgj+iRPLJH8RCP6tGukYKHW5JbkluSW5JaikbxEI/q0a6Rgwd5sEf0SB5uyW7Jamka1aNdowQP8mCP6JE8skfxcEtxS3GLuEXcIm4Rt4hbxC3iFnGLqIVIUzXEm6GGntSTe6qKombqmXuWntKz9myeLfSkntzTfEkz9TSfLmwrPaVn7ak+1n5QUCEnAwJwB7J3soG9UwwiIAEyoAD0SqxXICtQrgYEYEAEJEAGFIAAtMvcDFoHK1oHAjAgAhJAzTEYFIAAKqB1sEJ2IAADVBjJIAMKQAAV0DpYTTsQgAERAHOG2eo72upYhTtUQOtgde5AAAZgegumt2B6C6bXSjpGA7uoLbcVsoMAKqD1SrBydkBtWEE7REACZEABCKACYG4wN5gbzA3mBrNV9bXzVtYx22EYAOR9ZitjhwhIABtyMSgAAdiQr6dr60ABADPBTDATzJQBBSCACmgdbIM4wMxX4eWyGXDsP32edjs79W/uA3p3+NiedsfP4eF4Phw2w3/bw/n6T78+tsdrfm5P+qmW7e74qqnCt/1hZ3TZTK3DfNNYm/TWsbGMgnxvoHkDhRK7QU+SOBq0Ou8UvKDIpRt0NUdB5HwniPMCaSl3g7Q29YFrvVOkhYkQzGLSlRkF99OQ59vr4qILurxxzlDmDTlhJXKqK9qXsQNl/vpLI4iEheTIZY1BEiaRJc/OIoV/qqBSEwpSburpOwoZd4WegGWVosVxW7Q0r1gw6OkJA6c8u7FoYUVybpjOUnmaTgpy71ioKymEvSVTXeqNZdUZk9LsGVOX5mLc4PrgEWZ7QW1hHHmsCylhms/S7s+phZFIrFhUScyzisVVjVLGoaTQ5iTLQ5FpKBxm+7FwZGZhnDZ16kNM8W9XlcK4UyncKPiv7z36UJmmReVVhjrOJYdVfUiM6qbbFf2GIadxFFlolaGNR0WhuMYQp8Mm5lWjiGU8bGJdMwrdU2NJphXt2/gY0aSsac84IW7PmG+0r+j/3RPEmv7/0f5RX21f9qe77/gXM5322+fDrr98Ox9fbj79/P8Dn+A3go/T+8vu9XzamWn6oUD//NA79oZzfLTvdfpSN+eGQrOXZJ/qRuNcHi/Wmd8=","names":["is_twitter_verified"],"brillig_names":["is_twitter_verified"]},{"name":"public_dispatch","hash":"8348964729412326814","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2940325361005241554":{"error_kind":"string","string":"Only oracle can verify"},"4904135589298797358":{"error_kind":"string","string":"Only user can revoke"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZzRjhw3zoXfZa59UaJIUcqrBEHgJM7CgOEE3vgHfgR+9y1R51BtA907qV7f+Hye6T6qkkiVRJX998tv7375/K+f33/8/Y9/v/zw498vv3x6/+HD+3/9/OGPX9/+9f6Pj+dP/3455h8yXn4ob17qsaS8/CCnyJK6RJfYkrbEl/QlI0SPJctFl4suF10uulz0/IK+ebFjSVkiS+oSXXJ+wU5pS3xJXzJC2rHkdGmnyJK6RJfYkrbEl/QlI8SPJcvFl4svF18uvlx8ufhy8eXip0t/89KPJWWJLKlLdIktaUt8SV9yuow3L+NYUpbIkrpEl9iStsSX9CXLpRxzVI8JhSCESlCCERrBCZ0wAGWNdCkFKtBpG6AEIzSCE1bsFTmga8SLGLRBHdqhK3hKXeNeZtSGCrRCFWrQNW6lOrRDVwAUPaAFKtAKVahB4afwU/gp/Ax+Bj+Dn8HP4GfwM/gZ/Ax+Br8GPwR6QaSXtsKrNIUatEEd2qErVIsf0AIV6BzE2WEz7MtsYQb+gkZwQicMwEyBBYUghEqYzj7BCI0wnedlzJRYMAAzLRYUghAqQQlGaAQ6DzoPOMtxEAphOo8JlaAEIzSCEzphAGamLCiEmSvHhEpQghEawQmdMAAzbRYUAp2FzkJnobPQeWaVlAmdMAAzsRYUghAqQQlGaITpLBM6YQDiCRFQCEKoBCUYoRHorHRWOhudjc5G55lvUicowQiN4IROGICZdgsKQQiY7qQpwQiN4IQ13Ykf0DXNiTeoQzt0TXPSD+ia5qQLtEIVatAGXdOI9A5d04iMA1qgAq1QhRq0QeE34DeWXz0OaIEKtEIVatAGdWiHwq/Ar8CvwK/Ar6xprhaDNqhDO3RNc1UOaIEKtEJnVEzjyBGf0AhO6IQBiBwJKAQhVIISpvNsK3IkwAnTeUwYgMiRgEIQQiUowQiN4AQ6K52NzkZno/PMkXpMUIIRGsEJnTAAM0cWFIIQpvNcW84cWWCERnBCJwzAzJYFhSAEOjudnc5OZ6fzzKoaC9cBmHm1oBCEUAlKMEIjOGE61wkDMDNsQSEIoRKUYIRGcAKdB5z1OAiFIIRKmM46wQiN4IROGICZdQsKQQiVgFlOuahTLuqUizqd2ReAVZ3OtAtdqzvF6k6xulOs7hSrO8XqTrG6U6zuFKs7xepOsbpTrO4UqzvF6k6xulOs7hSrO8XqTrG6U6zuFKs71TWtqDaoQzt0TStqB7RABVqhCp2j4BPmKMRPnNAJcxTONNTIo4BCEEIlKMEIjeCETqCz09np7HR2Os880mOCERrBCZ0wAPF8CigEIVTCdJ5RMPNoQSM4oRMGYObRgkIQQiXQedB50HnQedB55pHK3HcehEIQQiUowQiN4IROGCvsLdZ7AYUghEqwSAmL7JmK3bBgOyzcD2NDLNgRI4VMsCcWbIoFu2LBtljWvtiQQlZXyFsVaIUq1KAN6tAOXSlkukLetEAFWqEKNWiDOrRDVwpZbP/nBUYBYLYQJYCASpj37BOM0AhO6IQBmHm0oBCEUAl0bnRudG50bnSeeaTzmmceLSgEIVSCEozQCE7ohOk8Zk3jIBSCECpBCUZoBCd0Ap0HnQedB50HnWce2THBCI3ghE4YC9rMowWFIIRKwFOjHUZoBCfgqdHKemq0UqAr5FsxaIM6tENXCjVBLUgKVKAVqlCDoiIkKAkJakIyUEU6oCguVVaXUF5CCrW6Qr7VBnVoh66Qb0ihhhRqSKGGFGpIoTZTyGYHzBxa4IROGICZRwsKQQiVoAQ6G52NzkZno3OU1ua4zDxaIIRKUIIRGsEJnTAAM49sjtjMI5tDMfNoQSUowQiN4IROGICZRwvo3Onc6dzpHJsmn9AITuiEARgIyqg6TEVQDgTlQFAOBOVYQenHAV1B6YdAK1ShBm1QVBixQ3LskLywVIlaJXZIjh2SF5QrC+qV2CE5dkiOHZJjh+TYITl2SI4dkmOH5KJQg87rC3BCJwxAPHsCCkEIlaAEI9C50rnSudJZ6TxzyMYEIVSCEozQCE7ohAGIPAooKzjdEDlulaAEIzSCEzoBMentIBQCnRudG50bnRti0psTOgEx6ZFHASsoPap3U1dQOsoKjrKCo6zgKCt4L1AEJcoKjrKCo6zgKCt4dyiCEmUFR1nBUVZwlBUcZQVHWcFRVnCUFXwgKAeCcrCQjkr6gVL6gVr6gWL6gWr6gXL6gXp6JM0xoRMGIPImoBCEUAlKMEIj0LnQudBZ6Cx0njnUbALGt4sSjNAITugERE6vB6EQhEDnSudK50rnisjptRMQOV0PQiGs0Okze0JX6HTt0BU6Hcc2Hec2HQc33VbodFOoQRvUoR26QqejsN1R2O4obHec4XQc4nSc4nQc43Sc43QUtjsK2x2F7Y7CdkdhuztCxxE6jtBxHsXgLCaOdKbxzJWAmSwLCkEIlaAEIzSCE+jc6TzoPOg86Dwzx+c4DI7v4PgOju9g5AxGzkDkjOMgFIIQKkEJRmgEJyByxoHIGeUgFIIQVugMbHEGHjUDj5qBR83Ao2bgUTPwqBl41Aw8aoY0qENPP5cJAzATZEEhCKESlGCERnACOnBUdqCyA5UdqOxAZQcqO1DZgcoOVHag0lnpbHQ2Ohs7MHIoQAlGaIRp2CYMQDxfAgpBCJWgBCM0ghPo3OjsdHY6O52dzk5np7PT2ensdHY6dzp3Onc6dzp3Onc6dzp3Onc6dzoPOg86DzoPOg86DzoPOg86DzoPOJ8nqkdSSZKkmqRJltSSPKknZRsl2yjZRsk2SrZRso2SbZRso2QbJdso2YZkG5JtSLYh2YZkG5JtSLYh2YZkG5Jt1GwjUlODJKkmaZIltSRP6kmDNHMUlG1otqHZhmYbmm1otqHZhmYbmm1YtmHZhmUbM+M87nKmHGi260GaZEmz3R7kST1pthun9zP1QCVJkmqSJs1Zcx3d96RBincTFpWkqFvFZY28/HjwLMrLH3n5M09AefkjL3+mSlC8fRCXFa8fgCSpJmmSJTVcYLxysKgcSSVJSPFgsaD5qGhBPWmQZlCCSpIk1SRNmp3qQfOq4vpiOx8/iw38ovxc1LmCoji8KD8XBeJFmmR0tmxjrpYWxQH/Ik3Kb8QqZ5Ek5Tdi+INi+BflN3q2ES+gLMpvjGxj5FUNfmMdcUu8kLGKnh7IHoxTbZAltSRP6kkcpTjbBrEH43R7tSyWP2NPx1E1SJM8aX+OIxdn0SD2R5xGg2oS+yPOmEH5jRylODkG5TdylOI8GJTfyFES16T8Ro5SnPiC8hvxesPq8pEdONiBcSgLKkmSVJM0yZIaOiaOaKO5OJRdPys1KT9X2KnrcHVRfk40yZLYHXHGCmIHxsEpyJLyGzlINQcpDkQX5SDVHKQ45gRlGzlIcXgJyjZykOJIctFMII8XiebQgCSpJmmSJbUkT+IcHSeHfb4CFUeHoMrfzkkYZEmcIONML/ziUA80SOVIKkmSVJM0iW3E4V5cS5zuLRJOwnGuB5IkXnOc2sV0HOd2JV76iaM7oibOuW9oUEvypJ40SHPAQCVJkmqSJmUbc4hHXNgcYlBPGqT58AWVJEmqSZpkSdmGZxuebXi2MQNq1KCSJEk1SZMsqSV5Uk8apJFtjGwjXiiMvo93ChdpkiW1JE/qSQMUp2mgkiRJNUmTLKkleVJPyjZKtlGyjRnIowfNNkaQJllSS4pXGo/AvnEkxqk1sGyUjXWjbrSNbWO0VgJ74pzSSrzqFgduxPnZeCktjt2II3E+rkqJu5jPK2IcLkZrUb0B6kbb2Db6xr4xnuhxkXZsjNuUwLjNGtg2+sa+cSS26FQNjO6zQN1oG9tG39g3jsR4k+qIUPCyUTbWjbrRNraN0VqMRbzTCByJ8V4jsGyUjXWjbowmYgjj1UZg3zgS4wVHYNkoG+tG3Wgbd2tjtxYvPB4RMPHKY2BbrwcvLBtlY92oG3Ow1kEe0DfmYMXxXYk3huPE7lywB/aNIzFSD1gYcm2l3sK6UTfaxrbRN/aNIzHeeAfu1upure7W6m6t7tbqbm1lbNzmytj4aeQmsOa9RW4CbWPbGB1VA/vGkRi5WTSwbJSNuzXbrdluzXZrtofF9rDYHpa2h6WVjbJxt9ZWE1++vHnhPzX4+a9P797Nf2lw828Pfvz75c+3n959/Ovlh4+fP3x48/J/bz98jg/9+8+3H0P/evvp/O3Zo+8+/nbqafj7+w/vJn15s7993P9qLXPRFt+utXgaDH+tg/S5Bw6HE/sFh3MhpnCYy4N7DvWBw1nC6LQ4yxQjPdp49VVYYT/OSezKfQxjX577v0t92Qpv49z/6D0Hv+9wnl85HM7jm30NZ6+81mIuSrIjqqSFHa93aLsrR73n8DCopO+gGvc6YqbT/ZgYO6zOqs3dmHh0I+dZCC3Ok4d7N1IehOa5PuVVnAtUuXcRc0a6Z3EeCHFAzjMhv3AfcigHRM7a2IUhlaPeOOgVhzIPaZaDHOVZhzKuOEi1dPDyrEO/dA1153hVe9ah1SsOpnkXdt9B9Om4Fvuucd2K5nyp7UpPtOPGoV9x8JJ96dfG89bh2ni6j5wuiz3rUC9dw3kenQ7XMuPG4TxXveBw1uk4X5/lubv5Xe3puK7te8Z1PfqR9zGuzLZVhuS6TuRZBz2uOFTzdBj1SYezMnfFwTK3qt2Pa33+Ca7f9QlezXI0zs3/lZ449yV0aKM86eDHlQyvLi0dmjzr0C9FZR8ZU0P8WQfVK8vb0dLhXFjdW97ag6g04xrAbhYyZ4H/1Tu/Y2RPlks7v3O27ekg9++ifd9Fuh6VqaHHpaD6ysGvBLZKLrD1fIY/63B/smyPdjwlV3XngO7xOA88v/aQB/vHsyYHDz9LWPeGoz2ITD/PeGihcne+bProTmoWFco8p7kSFrWzN/Q8hbkyJLcO9e7asPn/YEj680Mynh4SP77zkJjwAXIeZ12pC1QdYz/O290CyaPwZKrfVGi0vvYCemH756pgT7vtawN/sMA8S+GcuHu95NCEM8VZZ73mULZDu+ZgDIZ2U0/41uFRRx5Zp6p+16A/eojWfICdc6ddeQa+Nj378zNmf37G7P+LGfNRbxwtq12n3+6N14/qfEGGFnKzGf7Wovujlc3I6OyiNyXMr5O8P5ozc6XqNyXpb4f1YTU4Y+u4iW+xrwzGAwcfGVs+bh7o5+b4a4/yaLWba4Kb2Ua+ni6HPCpX7dKC3Gx/vrV4tNBUJqrd1Ef+gUHLS2gPrkAe1rtq1rukXbLwXQB1u9+V/l0tSsup4pxt5JKF596j9NIuWYyaaT70rsXDiSK7Yr4aecWhmO6JVy459Jzv5Lh0DZqrkXI76/4DB9O8i9td2D9xGDkWrdQrDnWPZrVLd1Fbztm1X7kLz+Meb3rh+yOfO8OvxOMQzjC32/F/8P2stn01UV+5/vvff7yG8L2GuNlJf3tIVB6tK32vK8fNYujVz+7XLUyPZ9elx7PL0ke3MBjJ7fBLV/DssvZcet1MKn536VFEHq6NGVD9uBmLb8NBHlYts2g5/G44/JfLqC0vw/r9y3gQld4rN0zex/3IlvZwld73Mt1uVgDT5afzb29/ff/pq/+18ct0+/T+7S8f3uGvv3/++OvNb//6/z/5G/6vj39++uPXd799/vRuOs3frf/68fzjx9LOKfJ8eo+f3rzU+Xet/qao+vn3Eh84zufZ+cf8wHzx7vyElfMTVn/6Mi/xPw==","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"revoke_discord_verification","hash":"8660602051128900254","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4904135589298797358":{"error_kind":"string","string":"Only user can revoke"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1aT2/rRBBfx3YSJy0NDwECiRsfwE7jpkVCivRayo0DB85+iYs4wEPVEycOPiNx4sCROxc+BkhIfAkOfIsnuu3Oyy8/j52k9fJAvJGqtT2z829nZmc3DcwaAjdG9G4UmoUb04dB1iGvVFW0DYTmPfeQuPce4MMOjU1Ibpf8T9PZWaLY16H+x4nj6dM/wtMD/3Tg+HxcrfmzLRYO3TvGkMwZ3vwdmPXzI/ec0Bwfa+vR9+kbiv49sM3C48qL7GPhfw78TYe2Cf8LP/q/4P+R4+9D90s/umdjcxfHM8fPxvaRey6++fKTr5dPV+Wn5Ver8hrTgUNxG2B6xcr8gHBC+7YbrYofuGdOBWO6L3ER6d0R/1xKS2zqILg+yO4RbqD4TPN/SO9ok/Xlh8CX6VgfLMd9ohX9eN0sSDoEJD9S5ls4rzZ5Cd37oPd37tmG6ZvueR2mz55eF5+Xn11/8aw0BD1SnB0kyvaMDh6DLn8VdHV92oKuqVhY4KATWyJlvoXzapOX0E9B75cWdLY4ywYQVZt8Fu57+gCYn6apOCOs1o4IFV0iwCP9mXsfgZ0yRg/Q82peZFfHxVWRF6vVbFk8Iv7ot7EH+bNZWl6t8nw1Pc3mT6blNvm4iXIQ4zzPyT7TEjRs8I1xfvPYdGdc/UUf9g8XnVjRdWLqhYwTPlbkxIqcf4oXr7eFhRvT/WDKH7TCznGGhb3LTWXXOBP5I1NfVx9x1id9mtZM29xk7oRwFjg2BoqcgSLnv8ILY/TQ1GM2aBhFDn9jOVzvUE7YoRykiUlO3KEc5HVRbcrhhkUbd5WDvM6ru1FyG9euw1w6FTuGpg6Cw8ssjpsR6YW4MeB4fQ4A1yfcIeA0XwpoTaj4ydrzPfBlOgGflzk3MOfag8C+1/ybkF6IQ9+zf9H37F/0fdvJXvOv0O3q3yNT92+f+N23cf/WjZ5zJOV+EGX9n+LnPjHyG/BlOgEtRkLiF5JMjhG5NBNeu1z2Ip2Pc0U6XS1PyunN0Wt+kk3PVvucK8SOPumCPpGYwO/aHhIT/Q9ulNgdkq8W97WXQMubYYt9YYt9oWLf4wb7fnGjpf1xB3lHpl4/AsKhj3qE0/ZH4SExFW+xQdYC887Cwo3pwyCLSZ+f3GjtCpwwyVE573OdsxABrsuzrNUjAj1Q11v/VZt+HQMuVOj5xvlAoddq3MTU98iYeGlnRVzTS9JVfNhX6JEfx/HPbrS+eTfY1A9zakS6o+1Dwmk9s9a3J6Dzr+7Z8zlz770uIBzmIZ/9du1T234R1/Y68cW+ex33QIgbKHZodSgieZi3wv9l5C3+OM15izkaKvSct9vy/KK6GyemvpYc35gzCeFQ7oBwuO6XJA/jRdYGc6bpvlA7U9p5vwM/XEfcP3Au74FC/yfo8od7PjL1esbxpdUl1sUYve41nZs5Hj3WkJlWQwKS7anf2fmeTOSPTD3ffdyTDUkfjqEe+SfxtDZtNUC7t3r95u81U18z1E94aT2wFu9ca9v6Qa3WarWE68wutUTrObRaMjb79cpaneA6gvR/udHin5P92g+FbTGl1QKhTxR69G9MsjEnEsJpPUBbbA1b9GrbXzS9MPZwLsveZgPnfJOMf8Een2t7PNrOe3xbr22B1+BQodf67wnRo8+1vOTeF+WOCYf5xDnb1Bc/Jzu2/R4hvYP2u1cf+EoP0PV9xDI/ebKc5UVaZvZ1uu0+Qv45qF+BXdXmnIF7lzM60+N/jSD9MFjbO4LYuqVV5Fm6d1rogobxlofyLao2vyVVnT6s6vQie1TVdRTcGHCYGxYO3Dv6C3mJHjHRv+UYyJoMYY7MnyjyhyR/Q2/lG98HjxX6sUJv1+fITXpx5wGyu+5rbmUSf/zGuknsePn/gbyYL4t5lp3NsnKW5dvy6m8nKi0/ii0AAA==","debug_symbols":"tZjRTuM6EIbfpddceMZje8yrrFaoQFlVqgrqwpGOEO9+Zur5U7pSoqMs3PB/Ie1XZzK2075vHnf3b7/u9sen59+b2x/vm/vT/nDY/7o7PD9sX/fPR/vv+yb5H+qb23yzYTsQCxrBI/LmtlrIiDKijmgjdEQ/R04jaIRZukUeISPKCLOQfUQ2DflrNbKPlBRJkRyZIyWyRLrPvNIiNbKPLOZj+7xqHrbjmiMlskTWyBapkX1kS5EUGb5mvpwsJbJE1sgWqZF9pKZIiuTI8Gn4NHwaPvXxqaVG9pE9RVIkR+ZIiSyRNTJ8PXzdx0c3G0oJQAAGZIAACqACGkABMBPMBDPBTDATzAQzwUwwE8znVrZeJm/mLA4EYEAGuLk4FEAFNIACeoA3+AACMCAD3FwdSoA3b24O/hp1EEABVEAD+Kdba1HxSZkcGJABAiiACmgABdhViBeqJgABGJABAigAN7NDAyigB/j0GEAABmSAC/02+dwY0AAK6AE+PwYQgAEZIACYFWafJuK32+fJgB7gM2UAARiQAShvR3k7ytujvOyzQIqDn/K10Ht+gAJ6wLnnmwMBGJABAiiACmgABfQAhplhZpgZZoaZYfZWPw/eW138P97YAzjG7I09QAAF4JesDg2gAL/k7ptHAhAAZoFZYBaYBcUUFFNQTEExfU0fQACYz/OifnzcbLDj3b2edjvf8D5tgbYxvmxPu+Pr5vb4djjcbP7ZHt7OL/r9sj2e83V7srN2n3fHR0sTPu0PO6ePm8u70/xbc6ES784l50lQrg00bxD1BetsEBWeDLVfGXjeoKVxGLRomzMsXkXh6SpqnbuKJUOtBEPtNGco8wbbVHIYbMu4VNLWrP+tsHUACuu1WUWbV5TS0Q1VWS6K1K4UOq9oUyVa04ug8ZpattRne2pBQZKgsO2pzY6CFhpTk+9uo61S0bm2ooXObOo73KiF9jSryEv3VLRMfVG4rmnvxnUqaOXZgn5Bd9IXtCd9QX/Stzbo53pqmqsnf0GD8t83KP99g/I3N6g91oWB06U9M5frUSz0VuuCQbTeL/3JqteOunRb0VqSL53Ff9zUhea0hxMMwp5K8qxioTeLP5ycDUV0jaBOQ6gLI1i6iEyY6faQVFcpmqCS3MpsKTN/q8Ke3/FgYQ/uvErROm6HPaHXVYqep4Wzy6xiaXKkqRT2NbOvMdgXqWmGNl5l0Dot3WnVGIQ/LXirxlBkuorSaJWhT/eiUl5jyJe7mcuqq8h12gSzrrmKVtEOrcqK9/dpJ+9tTT92xgrTZdXnK8Z/tVCvGf8f7/9pR9uH/enqd8APN5322/vDLg6f3o4Pn86+/vuCM/gd8eX0/LB7fDvt3HT5MdH+/GCrPiv99J967NC+N5TmB+TnlO2c/PzwofwH","names":["revoke_discord_verification"],"brillig_names":["revoke_discord_verification"]},{"name":"revoke_twitter_verification","hash":"16835195989481863697","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4904135589298797358":{"error_kind":"string","string":"Only user can revoke"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1aT2/rRBBfx3YSJy0NDwECiRsfwE6dpkVCivRayo0DB85+iYs4wEPVEycOPiNx4sCROxc+BkhIfAkOfIsnuu3Oyy8/j52k9fJAvJGqtT2z829nZmc3DcwaAjdG9G4UmoUb04dB1iGvVFW0DYTmPfeQuPce4MMOjU1Ibpf8T9P8LFHs61D/48Tx9Okf4emBfzpwfD6u1vzZFguH7h1jSOYMb/4OzPr5kXtOaI6PtfXo+/QNRf8e2GbhceVF9rHwPwf+pkPbhP+FH/1f8P/I8feh+6Uf3bOxuYvj3PGzsX3knotvvvzk6+XTVflp+dWqvMZ04FDcBphesTI/IJzQvu1Gq+IH7plTwXTnjqnwjkjvjvjPpLTEpg6C64PsHuEGis80/4f0jjZZX34IfJmO9cFy3Cda0Y/XzYKkQ0DyI2W+hfNqk5fQvQ96f+eebZi+6Z7XYfrs6XXxefnZ9RfPSkPQI8XZQaJsz+jgMejyV0FX16ct6JqKhQUOOrElUuZbOK82eQn9FPR+aUFni7NsAFG1yWfhvqcPgPlpmoozwmrtiFDRJQI80p+59xHYKWP0AD2v5kV2dVxcFbNitcqXxSPij34be5Cf52l5tZrNVtPTbP5kWm6Tj5soBzHO85zsuZagYYNvjPObx6Y74+ov+rB/uOjEiq4TUy9knPCxIidW5PxTvHi9LSzcmO4HU/6gFXaOMyzsXW4qu8aZyB+Z+rr6iLM+6dO0ZtrmJnMnhLPAsTFQ5AwUOf8VXhijh6Yes0HDKHL4G8vheodywg7lIE1McuIO5SCvi2pTDjcs2rirHOR1Xt2Nktu4dh3m0qnYMTR1EBxeZnHcjEgvxI0Bx+tzALg+4Q4Bp/lSQGtCxU/Wnu+BL9MJ+LzMuYE51x4E9r3m34T0Qhz6nv2Lvmf/ou/bTvaaf4VuV/8embp/+8Tvvo37t270nCMp94Mo6/8UP/eJkd+AL9MJaDESEr+QZHKMyKWZ8NrlshfpfJwr0ulqeVJOb45e85Nserba51whdvRJF/SJxAR+1/aQmOh/cKPE7pB8tbivvQRa3gxb7Atb7AsV+x432PeLGy3tjzvIOzL1+hEQDn3UI5y2PwoPial4iw2yFph3FhZuTB8GWUz6/ORGa1fghEmOynmf65yFCHBdnmWtHhHogbre+q/a9OsYcKFCzzfOBwq9VuMmpr5HxsRLOyviml6SruLDvkKP/DiOf3aj9c27waZ+mFMj0h1tHxJO65m1vj0BnX91z57PmXvvdQHhMA/57Ldrn9r2i7i214kv9t3ruAdC3ECxQ6tDEcnDvBX+LyNv8cdpzlvM0VCh57zdlucX1d04MfW15PjGnEkIh3IHhMN1vyR5GC+yNpgzTfeF2pnSzvsd+OE64v6Bc3kPFPo/QZc/3PORqdczji+tLrEuxuh1r+nczPHosYbkWg0JSLanfmfnezKRPzL1fPdxTzYkfTiGeuSfxNPatNUA7d7q9Zu/10x9zVA/4aX1wFq8c61t6we1WqvVEq4zu9QSrefQasnY7Ncra3WC6wjS/+VGi39O9ms/FLbFlFYLhD5R6NG/McnGnEgIp/UAbbE1bNGrbX/R9MLYw7kse5sNnPNNMv4Fe/xM2+PRdt7j23ptC7wGhwq91n9PiB59ruUl974od0w4zCfO2aa++DnZse33COkdtN+9+sBXeoCu7yOWs5Mny3xWpGVmX6fb7iPkn4P6FdhVbc4ZuHc5ozM9/tcI0g+Dtb0jiK1bWkWepXunhS5oGG95KN+iavNbUtXpw6pOL7JHVV1HwY0Bh7lh4cC9o7+Ql+gRE/1bjoGsyRDmyPyJIn9I8jf0Vr7xffBYoR8r9HZ9jtykF3ceILvrvuZWJvHHb6ybxI6X/x+YFfNlMc+yszwr82y2La/+Bl0TAJSKLQAA","debug_symbols":"tZjRTuM6EIbfpddceMZje8yrrFaoQFlVqgrqwpGOEO9+Zur5U7pSoqMs3PB/Ie1XZzK2075vHnf3b7/u9sen59+b2x/vm/vT/nDY/7o7PD9sX/fPR/vv+yb5H+qb23yzYTsQCxrBI/LmtlrIiDKijmgjdEQ/R04jaIRZukUeISPKCLOQfUQ2DflrNbKPlBRJkRyZIyWyRLrPvNIiNbKPLOZj+7xqHrbjmiMlskTWyBapkX1kS5EUGb5mvpwsJbJE1sgWqZF9pKZIiuTI8Gn4NHwaPvXxqaVG9pE9RVIkR+ZIiSyRNTJ8PXzdx0c3G0oJQAAGZIAACqACGkABMBPMBDPBTDATzAQzwUwwE8znVrZeJm/mLA4EYEAGuLk4FEAFNIACeoA3+AACMCAD3FwdSoA3b24O/hp1EEABVEAD+Kdba1HxSZkcGJABAiiACmgABdhViBeqJgABGJABAigAN7NDAyigB/j0GEAABmSAC/02+dwY0AAK6AE+PwYQgAEZIACYFWafJuK32+fJgB7gM2UAARiQAShvR3k7ytujvOyzQIqDn/K10Ht+gAJ6wLnnmwMBGJABAiiACmgABfQAhplhZpgZZoaZYfZWPw/eW138P97YAzjG7I09QAAF4JesDg2gAL/k7ptHAhAAZoFZYBaYBcUUFFNQTEExfU0fQACYz/OifnzcbLDj3b2edjvf8D5tgbYxvmxPu+Pr5vb4djjcbP7ZHt7OL/r9sj2e83V7srN2n3fHR0sTPu0PO6ePm8u70/xbc/JGPL87p0qToFwbaN4g6gvW2SAqPBlqvzLwvEFL4zBo0TZnWLwKTdNVdJm7iiUDd4whZ+Y5Q5k32KaCStqWkSeDrVn/W2HrABTWa7OKNq8opaMSVflSCdvprhQ6r2iVwtCaXgSNV9VS0mxPLShIEgZh21ObHQUtNKYm391GW6Wic21FC53Z1He4UQvtaVaRl+6paJn6onBd0965tKmgPc8W9Au6k76gPekL+pO+tUE/1VNodtHjL2hQ/vsG5b9vUP7mBrXHujBwuqydmcv1KBZ6q3XBIFr/1OKseu2oC7e1obUkXzqL/7ipC81pDycYhD2V5FnFQm8WQWcV0TWCOg2hLoxg6SIyYabbQ1JdpWiCSnIrs6XM/K0Ke37Hg4U9uPMqReu4HfaEXlcpep4Wzi6ziqXJkaZS2NfMvsZgX6SmGdp4lUHrtHSnVWMQ/rTgrRpDkekqSqNVhj7di0p5jSFf7mYuq64i12kTzLrmKlpFO7QqK97fp528tzX92BkrTJdVnz89a18t1GvG/8f7f9rR9mF/uvod8MNNp/32/rCLw6e348Ons6//vuAMfkd8OT0/7B7fTjs3XX5MtD8/2KrPSj/9px47LHxTmh+Qn1O2c/Lzw4fyHw==","names":["revoke_twitter_verification"],"brillig_names":["revoke_twitter_verification"]},{"name":"sync_notes","hash":"8749246762804774607","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"nZPdioMwEIXfZa69MJo/fZVSStRYAiFKqguL+O47KclWF7KU3mQyzpzPo5lsMOhuvd+MG6cHtJcNOm+sNfebnXq1mMnh0w3KsJAa2roAQqFlGBi0AgOHttn3AlL/bfFah/YDALGz8tot0LrV2gK+lF2fTY9ZuWdclMdqWYB2A0YEjsbqsNuLl7rMS0lJiYxy3Avxi8DsBCF5iJA8IiSKEkCQk77K61nFop6x1zcQyt81IGuRDLAmZ4Dm9bRuop5y+ZEBSZOBRuYM8Lyel+kP8Ip/YqCpqghoapYzIP8xINMQifLPEVwxVb3xp9neA8ob1Vkd03F1/aG6fM+pku7G7KdeD6vXgXS4ILhecAir+rqHt/0A","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"verify_discord","hash":"11954889440803503099","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_commitment","type":{"kind":"field"},"visibility":"private"},{"name":"verification_signature","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2940325361005241554":{"error_kind":"string","string":"Only oracle can verify"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1azW4jRRDu8XjGHjsmXljEYcWFE0ggzTh2nL1Z2oQAAoHgwHnWdhAHWBStOM8b8ARInDhw5M6FxwAJiZfgwIl00pV8/qZm/JNpNqvdkqKemaquv66qrm4nMFfQuvgL3HPbjaEpg9DM3JjeDrIGeaU+9QyeEz1bnvRcCYbABUwViFGpe0jcewvwYYNGJyS3Sf5H6fhxotjXoP4HiePZ9sw/8sM/7Tg+HxQ3/NEWkTtw7wH4UuYIDuPqQ8JhDH7kcN2Lv1fMzfN995yQLB8xgfo27dPXFP1bYJuFR4UX2QfC/xj4mwZtE/4nfvS/5v++4+9D91M/umd9cxXHp47f3sXfvnvOv//m0+/mTxbLL5bfLpbnmEaccnXA5aBB9xxZde+X1H365Dz/avn5Ml+wzjE8G8Lhc1RBx/hI8UVMOKF94Ebr7k/8++a6DHdAtwZD50jKZNeUQXCJ4jPB9QCHZYeB+0K0ycr+DPgyHeuD658QLa9pDHhJ7YDka9uOheNilZfQvw16/+iePcZAZvPjdceL8+PL86+fLg1Bi5wSVzipqh/zaMzkZUCX9XnWAT0FvSWgGw+6lkKHwM2RhZkb09vBNDFlRzcYdNMBORSBAxJt1AJy26ATm7YNOtwdu0Qr9Lz7WeCgE1vaynwLx8UqL6E/Ab0bC7qI3tsKHYLtnMT57eJmXlPBMT1K5UBrwuLGEdo1SRvwSP+xe8fKhPbNdtTzbJpnZwf5WT7JF4vxPH+V+KPf+h7kj47my9FocjjJ5/lovBitk48drna6k3meT8ZjLUHDCt8Y57eAaJrs/gOSJ/qwf7joRIquQ7M+4SNFTqTI+b948XpbmLkx3Q5G/GFg9LqCcj1tKpNN40zk90x5XX3EWUz6VK0Zb4o4d2jKG2ZVN4NyOoqc54UXxujAlGM2qBhFDn9jOVzvUE7YoByk4e45alAO8jopVuVwc6mNm8pBXsfF1XjXTikcNz3SC3F9wPH67AEuJtwAcJovBdadfH4Cvkwn4POmNd2hIWf/JqQX4tD37F/0PfsXfY83wAyaf4VuU//um7J/Y+K3a+P+gxs950jK/SDKepHiZ5cY+RP4Mp2AFiMh8QtJJseI3GgLr5bCa6DI8XmuSEeL+eFydHH0mh5mo4eLbc4VYkdMuqBPtFsWbQ/hW5af3Six2yVfzXa1l0DLm26NfWGNfaFi36MK+353o6X9ZQN5+6ZcPwLCaZcmgtP2R+EhMRWtsUHWAvPOwsyN6e0gi0ifX914+aujEyY5Kud9rnMW2oBr8ixr9XgD9EBdL/1XrPq1D7hQocf8xz0P6bUaNzTlPTIiXtpZEdf0lHQVH8YKPfLjOP7NjdY37wWr+mFO9Uh3tL1LOK1n1vr2BHT+wz3ftcvLgHCYh3z227RPrfsZct2l5zZ7HfdAiOsodmh1qE3yMG+F/7PIW/zlgPMWczRU6Dlv1+X5SXE1Dk15LTm+MWcSwqHcDuFw3U9JHsaLrA3mTNV9oXamtPP+An64jrh/4FzeA4X+H9Dlb/e8b8r1jONLq0usizF63as6N3M8eqwhY62GBCTbU7+z8T2ZyO+Zcr77uCfrkj4cQy3yT+JpbepqgHZvdc9c/XcUrxnqJ7y0HliLd661df2gVmu1WsJ1ZpNaovUcWi3pm+16Za1OcB1B+n/daPH3glX7UR7XZS2mtFog9IlCj/4VXbU9MCGc1gPUxVa3Rq+6/UXTC2MP57LsdTZwzlfJuAN7/ETb49F23uPrem0LvAYDhV7rv4dEjz7X8pJ7X5TbJxzmE+dsVV8s+VK3P2Kdld5B+90rBr7SAzR9HzGfHD6ejyd5uszs69rfOeU/9+IC7CpW53Tcu5zRmV74RUT/ILix902IrUtaRZ6le7eGLqgYL3ko39rF6rekKNOHRZleZPeKso6C6wMOc8PCnntHfyEv0SMi+negNlvowhyZP1Tkd0n+it7KN74P7iv0fYXers9bbtL1nQfIbrqvuZRJ/PEb6yax4+Oe7yKlpvN8mmUPx9lynE3W5dV/kXD0S7cyAAA=","debug_symbols":"tZndbuo6EIXfJde9sGdsj82rVFVFW7qFhGjFbo90VPXdzwyeFaBHifZO6Q3rC5AVe7L8E/gYnjYP77/ut/vnl9/D6vZjeDhsd7vtr/vdy+P6bfuy13c/hmAvFIcV3wxEw6qqcJc0rJpK7lK6yLCKUbW6tq4cXKMrubJrcs2uaheTqrhW19Y1mZ9eL0VX9SM9L7Frcs2uxVVcq2vrmoOr+pH6Z3Jl1+Rqfnq9rH5s3xfX6tq6luAaXcmVXZOr+rH6luIqrtXV/PR6VX2SHldyZdfkml2Lq7hW19a1BVf3a+aXVdk1uWbX4iqu1bV1jSEAIoAADEiADDBbNhBABTSHGAARQAAGJEAGwDnCOZpzMWgOFAARQAAGJEAGFIAA4ExwZjgznBnODGeGM8OZ4cxwtrinamDOev+jBb5DBBBAnXMwSIAMKAABVEBzsOh3iAACmHM0SA6W50wG9h0rryW6QwJkQAHY1TVtUexaFgCJAAIwIAEyoAAEYL2wQklzqAEQAQRgQAKYsxgUgAAqoDnYkOkQAQQwQ7tNNlw6FIAAKqB1IBsyHSKAAAxIgAwwZ5thbch0qIDmYEOmQwQQwMtLMQEywMtLNgpKMNCPis3elvkOAqiA1pNAlvkOEUAABiRABhSAACoAzgnOCc4JzgnOCc4W9WPjLerF3rFgd4jeZgt2BwYkgHXZ1jib2TsIwLqcDJqDze4d4FzgXOBc4FxQzIJiFhSzoJg2zR/BBkgHOMvR8PPzZsC6fP922GxsWT5bqHX5fl0fNvu3YbV/3+1uhn/Wu/fjl36/rvdHfVsf9FOt0Gb/pKqGz9vdxujz5nR2mD5Vi5X9bK0Sjwb50iFOO6Rqa9rRIdVEo0NpFw407VCzkDvUXGXKYa4XJaINeo/KVC/StIOuOqiDrjKnQupcdmGRpy0kVzRCSshT3SgzDlwZDokmSylz3WApYz9SaIuKGc6KWaeKOecgcQyVpDwZqhkL3U3w2I94yqUuTX/uoRM/POisGf/zmMlmzg2jq1RKJ48glx48c1ttzPe7KnUyWX9az5lBOhNOzQIaoZsMmWxFnIlnDYxs1ZDrVLTiTD6l2sa316K2MGlRZ0dqPQ3VTGVJxEXQDKpxMqB0hYDSFQJKVwgo/WxAz+rJkwGlKwSUvh9Q+n5A6acDWguNBa1tqqB8hYDyFQLKVwgo/2hAz+rZgkzW8woB5e8HlL8fUP7hgMaMjuiDzng+U77ccM04SBt3XNLaKZ+a90uPmb0nC6KV+JQs+rLrmwkn0WllpbOJ66vFTDZzEnfIZ5ulvzAoYxPKTAvmOsERI10f08oiC0lh3GHk6VLKj1rEMu6gdQ9Oiyyk4XborwZlkUXjceJsadJiduodS6G/gbUlDjGn0+MILXKo44MAhUVtSHQ24S1qQ05jL7LERQ5tvBcl8hIHPt1Nzot6wWVcBLku6YWUMD4YpgXnt3Elb7Ikj40ww7S06PoV7b+YqJe0/8v5d3q0ftweLv6f+DSnw3b9sNv44fP7/vHs07d/X/EJ/t94Pbw8bp7eDxtzOv3JoS+3pHtTDuHOfofWQ4k3UuxAf4y5ZV3TOfDdpzXlPw==","names":["verify_discord"],"brillig_names":["verify_discord"]},{"name":"verify_twitter","hash":"17223305789187634241","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_commitment","type":{"kind":"field"},"visibility":"private"},{"name":"verification_signature","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2940325361005241554":{"error_kind":"string","string":"Only oracle can verify"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZnbTuNMEITfxddczHT3nHiVFUIBwipSFFAWfukX4t23O9NlJyvZ2jXhJvU5icsz7ZqDk4/hafvw/vN+d3h++TXc/vgYHo67/X73837/8rh5270c9N2PIdgLxeGWbwai4baqcBcZbptK6pK7lOE2RtXq2rpycI2u5Mqu4ppc1S6KanGtrq2rmJ9eT6Kr+pGeJ+wqrsk1uxbX6tq6puCqfqT+iVzZVVzNT6+X1I/t+8W1urauObhGV3JlV3FVP1bfnF2La3U1P71eVR/R40qu7CquyTW7Ftfq2rq24Op+zfySKruKa3LNrsW1urauMQRABBCAAQJIALNlgwKogOYQAyACCMAAASQAnCOcozlng+ZAARABBGCAABIgAwoAzgRnhjPDmeHMcGY4M5wZzgxni7tUA3PW+x8t8B0igADqnIKBABIgAwqgApqDRb9DBBDAnKOBOFieExnYd6y8lugOAkiADLCra9pisWtZAEoEEIABAkiADCgA64UVqjSHGgARQAAGCMCci0EGFEAFNAcbMh0igABmaLfJhkuHDCiACmgdyIZMhwggAAMEkADmbDOsDZkOFdAcbMh0iAACeHkpCiABvLxkoyAHA/0o2+xtme9QABXQehLIMt8hAgjAAAEkQAYUQAXAWeAscBY4C5wFzhb1U+Mt6tnesWB3iN5mC3YHBgjAumxrnM3sHQrAuiwGzcFm9w5wznDOcM5wzihmRjEziplRTJvmT2ADpAOcy8nw8/NmwLp8/3bcbm1ZPluodfl+3Ry3h7fh9vC+398M/23276cv/XrdHE76tjnqp1qh7eFJVQ2fd/ut0efNdHaYP1UHCfvZOjriaJAuHeK8g1Rb004OUoVGh9wuHGjeoaZC7lBTLXMOC73QoYUa6FCiuV7IQh2irWG9DjqjjQ46l11YpHmLkioKUXJIc93ICw5ccTOK0Gwpy1I3uOSxHxLaqmLyWTFlrphLDroUwEEnxNlQLeUy5DGX2qnpfmT+ew+d+OFBkuY9FrKZUkMxcqWpGLrJufTghduaUY1S6myy/raesc3WcyGcmgVY6CajzLYiLsSzBka2akh1LlpxIZ+l2sa316K2MGtRF0dqnYZqorwm4rpmjQUtswGlKwSUrhBQukJA6VsDel7POhtQukJA6esBpa8HlL47oByRDN1npbmC8hUCylcIKF8hoPytAT2vZ+bZel4hoPz1gPLXA8rfHNCY8rhHmDYqTOlyw7XgUNq44yqtTbeEar30WNh7ckG0hKdk0R+7PlqauOI0cTHPWixkM0lxhyR1jUEem5AXWkCL4eYx3Gd3818syrSBLmm+lOVbLWIed9C6B6dVFqWV8Xkm5lUWjceJs8msxeLUO5ZCfwNraxxikulxhFY51PFBgMKqNgidTXir2pBk7EU622b9i0Mb70WOvMaBp7vJaVUvOI+LINc1vSg5jA+GsuL8Nq7krazJYyPMME1WXb+i/RcT9Zr2/3H+nR5tHnfHi/8nPs3puNs87Ld++Px+eDz79O3/V3yC/zdejy+P26f349acpj859OUHlXbDIdzZ79B6qI9SJduB/hjzg3VN58B3n9aU3w==","names":["verify_twitter"],"brillig_names":["verify_twitter"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"AztlanSocialVerifier::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::constructor_parameters","fields":[{"name":"profile_registry","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"verification_oracle","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"AztlanSocialVerifier::get_discord_commitment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::get_discord_commitment_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanSocialVerifier::get_twitter_commitment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::get_twitter_commitment_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanSocialVerifier::get_verification_oracle_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::get_verification_oracle_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanSocialVerifier::is_discord_verified_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::is_discord_verified_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AztlanSocialVerifier::is_twitter_verified_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::is_twitter_verified_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AztlanSocialVerifier::revoke_discord_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::revoke_discord_verification_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"AztlanSocialVerifier::revoke_twitter_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::revoke_twitter_verification_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"AztlanSocialVerifier::verify_discord_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::verify_discord_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_commitment","type":{"kind":"field"}},{"name":"verification_signature","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanSocialVerifier::verify_twitter_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanSocialVerifier::verify_twitter_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_commitment","type":{"kind":"field"}},{"name":"verification_signature","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"AztlanSocialVerifier"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"profile_registry","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"is_twitter_verified","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"is_discord_verified","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"twitter_handle_commitment","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"discord_handle_commitment","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"twitter_verifier","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"discord_verifier","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"verification_oracle","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}}]}}]}]}},"file_map":{"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"use dep::aztec::macros::aztec;\n\n// CONTRACT 2: HYBRID SOCIAL VERIFIER\n// Public: Verification status (true/false)\n// Private: Actual handles (stored off-chain)\n#[aztec]\npub contract AztlanSocialVerifier {\n    use dep::aztec::macros::{functions::{public}, storage::storage};\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n    use dep::aztec::protocol_types::traits::ToField;\n\n    #[storage]\n    struct Storage<Context> {\n        // Public registry reference\n        profile_registry: PublicMutable<AztecAddress, Context>,\n        \n        // Verification status - PUBLIC (only shows true/false)\n        is_twitter_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        is_discord_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        \n        // Handle commitments - PUBLIC (but meaningless without key)\n        twitter_handle_commitment: Map<Field, PublicMutable<Field, Context>, Context>,\n        discord_handle_commitment: Map<Field, PublicMutable<Field, Context>, Context>,\n        \n        // Verification metadata\n        twitter_verifier: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        discord_verifier: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        \n        // Oracle/Backend address for verification\n        verification_oracle: PublicMutable<AztecAddress, Context>,\n    }\n\n    #[public]\n    fn constructor(\n        profile_registry: AztecAddress,\n        verification_oracle: AztecAddress\n    ) {\n        storage.profile_registry.write(profile_registry);\n        storage.verification_oracle.write(verification_oracle);\n    }\n\n    // VERIFICATION FUNCTIONS\n    \n    #[public]\n    fn verify_twitter(\n        profile_id: Field,\n        handle_commitment: Field,  // hash(handle + user_salt)\n        verification_signature: Field  // Oracle signature\n    ) {\n        let caller = context.msg_sender();\n        \n        // In production: verify oracle signature\n        // For now, just check caller is oracle\n        assert(\n            caller == storage.verification_oracle.read(),\n            \"Only oracle can verify\"\n        );\n        \n        // Store verification\n        storage.is_twitter_verified.at(profile_id).write(true);\n        storage.twitter_handle_commitment.at(profile_id).write(handle_commitment);\n        storage.twitter_verifier.at(profile_id).write(caller);\n    }\n\n    #[public]\n    fn verify_discord(\n        profile_id: Field,\n        handle_commitment: Field,\n        verification_signature: Field\n    ) {\n        let caller = context.msg_sender();\n        \n        assert(\n            caller == storage.verification_oracle.read(),\n            \"Only oracle can verify\"\n        );\n        \n        storage.is_discord_verified.at(profile_id).write(true);\n        storage.discord_handle_commitment.at(profile_id).write(handle_commitment);\n        storage.discord_verifier.at(profile_id).write(caller);\n    }\n\n    // USER FUNCTIONS\n    \n    #[public]\n    fn revoke_twitter_verification(user: AztecAddress) {\n        let caller = context.msg_sender();\n        assert(caller == user, \"Only user can revoke\");\n        \n        // Get profile ID from registry\n        // In production: call registry contract\n        let profile_id = user.to_field(); // Simplified\n        \n        storage.is_twitter_verified.at(profile_id).write(false);\n        storage.twitter_handle_commitment.at(profile_id).write(0);\n    }\n\n    #[public]\n    fn revoke_discord_verification(user: AztecAddress) {\n        let caller = context.msg_sender();\n        assert(caller == user, \"Only user can revoke\");\n        \n        let profile_id = user.to_field();\n        \n        storage.is_discord_verified.at(profile_id).write(false);\n        storage.discord_handle_commitment.at(profile_id).write(0);\n    }\n\n    // VIEW FUNCTIONS\n    \n    #[public]\n    fn is_twitter_verified(profile_id: Field) -> bool {\n        storage.is_twitter_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn is_discord_verified(profile_id: Field) -> bool {\n        storage.is_discord_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn get_twitter_commitment(profile_id: Field) -> Field {\n        // Returns commitment hash (meaningless without user's salt)\n        storage.twitter_handle_commitment.at(profile_id).read()\n    }\n\n    #[public]\n    fn get_discord_commitment(profile_id: Field) -> Field {\n        storage.discord_handle_commitment.at(profile_id).read()\n    }\n\n    #[public]\n    fn get_verification_oracle() -> AztecAddress {\n        storage.verification_oracle.read()\n    }\n}\n","path":"/root/x/aztlan/contracts/aztlan_profile/src/main.nr"},"69":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"71":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"97":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"104":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"107":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"146":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"163":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"172":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"288":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"325":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"343":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"344":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"363":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}