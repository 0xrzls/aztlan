{"noir_version":"1.0.0-beta.5+0000000000000000000000000000000000000000","name":"AztlanPrivateSocial","functions":[{"name":"complete_discord_verification","hash":"14209123240857460767","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"_verification_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"10694658649089935141":{"error_kind":"string","string":"Only oracle"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/8VVPU/DMBB1mkRgSoXEx8oCEqvTJk26dWBHgoHZ1A5igKKoYu5PB0t3SnI4gSp2e1JlX3159967yAlYHQGsEcmZpWYJqxgWiUMsYSXaF1hzByuHddQ4Dx2K5aSvS/xCpBm36HPIf8YB06c/iOkBXxwBzv22xqdaTEwgb75D+Mzxz++U1fsJ7Dl5xsdsPXovLiz8sdcYtF5DbvSfwV5+vT98rtZKP+kPpaumZZRuX9DRM3fSpobu5S+6m3UlX/Wjlopy7rr/aF3YUUfPY4sXETnDWuRp7L4l3oyYc2/SXb0J/+lN19w50e9QS4L94h7O2NfovurQ/Vy9bTTh3TI/sOSxpc4m3MMQF/seItVswz2Y0eaywg9htG2TW8L/YkDkhRBoSAj4MWvfXIz0j0n9DeQnDV24RgN4lrlMypksZSaVSlfynOA3fRt76L9I5y+inAutElHk0+yv/t+HOAYKfgoAAA==","debug_symbols":"tZbBjoIwEIbfpWcOnZmWTnmVjTGouCEhaFjYZGN49x2Uoh7KgcYLvxX6MfPPH9KbOlWH4Xtft+fLjyq+burQ1U1Tf++by7Hs60sr/96Uni5gVEGZAqsKFskf4lThRfgh/i4oz4MRhVlR1IrSrEJCLSoonNb5rALDXFRoBOOYqVDFvu+qairipSwp9lp2Vduroh2aJlO/ZTPcH/q5lu1d+7KTu/Kmqj2JCvBcN9X0a8yeu3V8qwHn590GvFsA9p0AKwQmEwhscCHk/o2AcQJbhzOBLbsYYa0LnFx91IDGxrowcQKAsTMBwD2NBIdvCBtHOMvBCJdrG2sjXyEQUyBISzGCW2uDXL70YbTfZCa8mBmNxCrBL5EgomiodPo8AJIHApg8EaAPj4R4GQl5u2UktPgpsCgBVtIptUPow6CLj2Qln6wpNMLactRPXhkJU/hiOfY6ivCr4eJnuizmW0YiFgRDjfUxQxHSM46YnHGk5Iyj+XDGrV4SasFsybhxsBB0lIAuPePIyRlHn5xx0lszvpNVeay7t1PQONG6ujw01bw8D+3x5W7/dw13winq2l2O1Wnoqon0cpSS65eUR3YnhyaYFnlGvBunV/8D","names":["complete_discord_verification"],"brillig_names":["complete_discord_verification"]},{"name":"complete_email_verification","hash":"13883871207732438749","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"_verification_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"10694658649089935141":{"error_kind":"string","string":"Only oracle"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/8VVPU/DMBB1mkRgSoXEx8oCEqvTJk26dWBHgoHZ1A5igKKoYu5PB0t3SnI4gSp2e1JlX3159967yAlYHQGsEcmZpWYJqxgWiUMsYSXaF1hzByuHddQ4Dx2K5aSvS/xCpBm36HPIf8YB06c/iOkBXxwBzv22xqdaTEwgb75D+Mzxz++U1fsJ7Dl5xsdsPXovLiz8sdcYtF5DbvSfwV5+vT98rtZKP+kPpaumZZRuX9DRM3fSpobu5S+6m3UlX/Wjlopy7rr/aF3YUUfPY4sXETnDWuRp7L4l3oyYc2+KXb0J/+lN19w50e9QS4L94h7O2NfovurQ/Vy9bTTh3TI/sOSxpc4m3MMQF/seItVswz2Y0eaywg9htG2TW8L/YkDkhRBoSAj4MWvfXIz0j0n9DeQnDV24RgN4lrlMypksZSaVSlfynOA3fRt76L9I5y+inAutElHk0+yv/t+PCKXmfgoAAA==","debug_symbols":"tZZNboMwEIXv4jULz4x/xlyliiKSkAoJkYhCpSri7h1SDMnCLEDd8OKAP2bmPSE/1KU89Z/HqrnevlT+8VCntqrr6vNY385FV90a+feh9HgBo3LKFFiVs4j7E6/yIMJ/Ep6C8jwYUZgURa0oTSok1KKCwnHtJhUYOlGhEQxDpmIVx64ty7GIl7Kk2HvRlk2n8qav60x9F3X/fOjrXjRP7YpW7sqbyuYiKsBrVZfjryFbduv0VqeRpt1OG5gB9p0AaYJhMhPBsMGZ4MIbAdMEth4nAlv2KcJqF17PXXBIdWHSBABjJwKAXwYJHt8QNo3wluMgvNM21YZbIRBHM7zB5Cj9Whvk3dyH0WHTMN0yzJCMxBoBiCMBvE2GSu/3A2C3IYC7HQH6Z0sQI8Ih2U2WsJ8JmLZkJZ1SO8Q+DPq0JSv5ZE2xEdaWk/PkFUuYQrSEg04iwmq4eEmXRbfJErcMNCQ/OQj7M464O+NIuzOO5p8zTvM0HFmzJeMEMBNMkoB+f8aRd2ccw+6Mk96a8YOsinPVvp2ChpHWVsWpLqfltW/OL3e7n3u8E09R9/Z2Li99W46kl6OUXD+kPLIHOTTBuHAZ8WEYX/0L","names":["complete_email_verification"],"brillig_names":["complete_email_verification"]},{"name":"complete_farcaster_verification","hash":"14470315298506417287","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"_verification_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"10694658649089935141":{"error_kind":"string","string":"Only oracle"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/8VVPU/DMBB1mkRgSoXEx8oCEqvTJk26dWBHgoHZ1A5igKKoYu5PB0t3SnI4gSp2e1JlX3159967yAlYHQGsEcmZpWYJqxgWiUMsYSXaF1hzByuHddQ4Dx2K5aSvS/xCpBm36HPIf8YB06c/iOkBXxwBzv22xqdaTEwgb75D+Mzxz++U1fsJ7Dl5xsdsPXovLiz8sdcYtF5DbvSfwV5+vT98rtZKP+kPpaumZZRuX9DRM3fSpobu5S+6m3UlX/Wjlopy7rr/aF3YUUfPY4sXETnDWuRp7L4l3oyYc2/yXb0J/+lN19w50e9QS4L94h7O2NfovurQ/Vy9bTTh3TI/sOSxpc4m3MMQF/seItVswz2Y0eaywg9htG2TW8L/YkDkhRBoSAj4MWvfXIz0j0n9DeQnDV24RgN4lrlMypksZSaVSlfynOA3fRt76L9I5y+inAutElHk0+yv/t+F9C4xfgoAAA==","debug_symbols":"tZbNbqswEIXfxWsWnrHHHvMqVRSRhFRIiEQUrnQV8e4dUkyIKrMAdcPBGH/MzwH8UJfy1H8eq+Z6+1L5x0Od2qquq89jfTsXXXVr5OpD6fEAVuUmU0AqZxH3I17lQYR/JDwF5X6wojApipKomVRIqEUFhePYTSowdKJCMzAMmYpRHLu2LMcgFmFJsPeiLZtO5U1f15n6V9T986ave9E8tStamZUnlc1FVIDXqi7HsyF7rdbppUQOptVEPswAeidAmmDZ2Ilg2eJMcOGNgGkCk8eJwMQ+RVjLwmmOWTj0qSxsmgBgaSIA+FchweMbgtIITxwL4Z2mVBpuhWDYRILFZCn9WhrGuzkPq8OWYlJYFDNpidV2zEGQh2Q7QO/vB8DuhgDu7giYP26Jn98Q8gxbWuIxzASfJMCKOyX2+KkAu3jJfrVkxZ+sTawFa+JkPXmlJWxiJp6DTiLCqrn45S5Ct6UlDNEZYjNKFRRhv8cRd3sczW6Po/1jj3OY/0RB6y0elx/J3JKQJKDf73Hk3R7HsNvjRm/1+EFGxblq33ZBw0hrq+JUl9Pw2jfnxWz3/x5n4i7q3t7O5aVvy5G02ErJ8UPCM3SQTROMA5cZPgzjo78B","names":["complete_farcaster_verification"],"brillig_names":["complete_farcaster_verification"]},{"name":"complete_github_verification","hash":"7397631031184415582","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"_verification_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"10694658649089935141":{"error_kind":"string","string":"Only oracle"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/8VVPU/DMBB1mkRgSoXEx8oCEqvT5qtbB3YkGJhN7SAGKIoq5v50sHSnJIcTQLHpSZV99eXde+8iJ2BNBLBGJGeWmhWsYlwkDrGElehQYM0NrBzWSes8dCiWk74u8UuRZtyizyH/BQdMn/4gpgd8cQA4t7sGn2oxMYO8/Q7hM4dfv2PW7Gew5+QZH7P16L04s/DHXlPQegm50X8Ce/nxeve+3ij9oN+UrtuWUbpDQUfP3EmbG7rn3+huN7V81vdaKsq57/6jdWFPHT2PLV5E5Axrkaex+5p4M2HOvcn/6k34S2/65s6JfodaEuwXD3DGvkb3RY/ux/plqwnvjvmBJY8tdTbhHoa4/O8hUs023L0ZbS4r/BBGuy65FfwvRkRRCoGGhIAfs+7NxUj/mNRfQX7U0oVrNIJnVcikWshKZlKpdC1PCX7bt6mH/ss0fxJVLrRKRFnMs5/6fwJ7T8knfgoAAA==","debug_symbols":"tZbPjoIwEMbfpWcOnem0nfIqG2NQcUNC0LCwycbw7jsoRT2UA8QLH6X0x/z5gN7UqTz03/uqOV9+VP51U4e2quvqe19fjkVXXRq5elN6PACp3GQKrMpZxD3EqzyI8EPCXVDuBxKFSVHUippJhYRaVFA4jt2kAkMnKjQDw5CpGMW+a8tyDOIlLAn2WrRl06m86es6U79F3d9v+rkWzV27opVZeVLZnEQFeK7qcjwbsudqnV5qQcO02gKEGWDfCZAmEBuaCMSEM8GFNwKmCWw9TgS27FOExSyI5yycT2VBaQIA2YkA4J+FBI9vCJtGeMuxEN5pm0rDLRAMm0ggTJbSL6VhvJvzIB1WFdO8FDNpiSUCQgzCoqWkqfT2fgBsbgjg5o6A+XBLjJ4LasCuaol7EnSSAAvulNjjpwIIfbolC/5kbWIYrC0n68kLLWETYks46CQiLJqLn+6S0qxqCfm5oD75liBs9zjiZo+j2exxpA97nDBWw5KhNR43Yf6XESYJ6Ld7HHmzxzFs9rjRaz2+k1FxrNq3XdAw0tqqONTlNDz3zfFltvu7xpm4i7q2l2N56ttyJL1speT4JeEZu5NNE4wDlxneDeOj/wE=","names":["complete_github_verification"],"brillig_names":["complete_github_verification"]},{"name":"complete_telegram_verification","hash":"6979078801101678500","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"_verification_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"10694658649089935141":{"error_kind":"string","string":"Only oracle"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/8VVPU/DMBB1mkRgSoXEx8oCEqvTJk26dWBHgoHZ1A5igKKoYu5PB0t3SnI4gSp2e1JlX3159967yAlYHQGsEcmZpWYJqxgWiUMsYSXaF1hzByuHddQ4Dx2K5aSvS/xCpBm36HPIf8YB06c/iOkBXxwBzv22xqdaTEwgb75D+Mzxz++U1fsJ7Dl5xsdsPXovLiz8sdcYtF5DbvSfwV5+vT98rtZKP+kPpaumZZRuX9DRM3fSpobu5S+6m3UlX/Wjlopy7rr/aF3YUUfPY4sXETnDWuRp7L4l3oyYc2+yXb0J/+lN19w50e9QS4L94h7O2NfovurQ/Vy9bTTh3TI/sOSxpc4m3MMQF/seItVswz2Y0eaywg9htG2TW8L/YkDkhRBoSAj4MWvfXIz0j0n9DeQnDV24RgN4lrlMypksZSaVSlfynOA3fRt76L9I5y+inAutElHk0+yv/t95g+EcfgoAAA==","debug_symbols":"tZbLboMwEEX/xWsW9vgxY36liiKSkAoJkYhCpSri3zukGEgls8DKhhvH+DCPa/BDXMpT/3msmuvtS+QfD3Fqq7quPo/17Vx01a3hfx9CjhdlRK4zoazIicX9CYrcs9Cf+KcA368Mq5oUWC2rnpRJIFkZBePYTcowcKxM02oYMhGiOHZtWY5BrMLiYO9FWzadyJu+rjPxXdT986ave9E8tStanuUnlc2FlYHXqi7HX0O2rJbxpcaZsNo4SzPAvhLUBoG0CQQyMBOcfyFAnEAWYSKQJYwRNrMgDDGgdLEsTJyglLETQSlcCqkQXhA2jkBLoRDopI2l4TYImnQgGIiWErfS0OjmPIz0u4qJq2JGLbFFQGtngrdRU8n0fiiV3BAFyR1R+s0tIePnPWZ3tYQkLrs0vs833Mmxq5CHAYy3ZMOfJHWoBclVIv/rSRstIR1qgeRlFOE3zUWLuyy4XS3x84vTr5zxr6Cg0j0OkOxx0MkeB/Nmj3tHc0ER93jcL18i76IEwHSPAyV7HHyyx7Xc6/EDj4pz1b6cgoaR1lbFqS6n4bVvzqvZ7uceZsIp6t7ezuWlb8uRtDpK8fWDw9P2wIcmNQ5cpukwjI/+BQ==","names":["complete_telegram_verification"],"brillig_names":["complete_telegram_verification"]},{"name":"complete_twitter_verification","hash":"1546001035790772056","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"_verification_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"10694658649089935141":{"error_kind":"string","string":"Only oracle"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/8VVPU/DMBB1mkRgSoXEx8oCEqvTJE26dWBHgoHZ1A5igKKoYu5PB0t3SnI4ARSbnlTZV1/evfcucgLWRABrRHJmqVnBKsZF4hBLWIkOBdbcwMphnbTOQ4diOenrEr8UWc4t+hzyTzlg+vQHMT3giwPAud01+FSLiRnk7XcInzn8+h2zZj+DPSfP+JitR+/FmYU/9pqC1kvIjf4T2MuP17v39UbpB/2mdN22jNIdCjp65k7a3NA9/0Z3u6nls77XUlHOffcfrQt76uh5bPEiImdYizyN3dfEmwlz7k36V2/CX3rTN3dO9DvUkmC/eIAz9jW6L3p0P9YvW014d8wPLHlsqbMJ9zDE5X8PkWq24e7NaHNZ4Ycw2nXJreB/MSKKUgg0JAT8mHVvLkb6x6T+CvKjli5coxE8q0ImVSormUulsrU8Jfht36Ye+i+zxZOoFkKrRJTFPP+p/yd9G7BqfgoAAA==","debug_symbols":"tZbdjoIwEIXfpddcdGb6M+VVNsag4oaEoGFhk43h3XdQQL0oFzTecKzQj5kzJ6Q3dSoP/fe+as6XH5V/3dShreq6+t7Xl2PRVZdG/r0pPV7AqJwyBVblLOIe4lUeRPgh4S4oz4MRhUlR1IrSpEJCLSooHNduUoGhExUawTBkaq5i37VlORbxUpYUey3asulU3vR1nanfou7vD/1ci+auXdHKXXlT2ZxEBXiu6nL8NWTP3Tq+lTyEaTd58gvAvhMgTjBMZiIYNrgQXHgjYJzA1uNEYMs+RljtwrmlC7axLkycAGDsRADwTyPB4xvCxhHe8myEd9rG2nArBGKaCQajVvq1NsSKpQ+jwyYz7YuZ0UisEZ6RIPYUDZVOnwdA8kAAkycC9OGRBFxGEshuGgnbhYBRAqykU2qHuQ+DPj6SlXyyprkR1pajfvLKSJjmL5bnoKOIsBoufqbLots0EucXQ0OIGYqQnnHE5IwjJWcczWczbvTihtHWbMi45BMWgokS0KdnHDk54xiSM056a8Z3siqOVft2ChpGWlsVh7qclue+Ob7c7f6u8535FHVtL8fy1LflSHo5Ssn1S8oju5NDE4wLlxHvhvHV/w==","names":["complete_twitter_verification"],"brillig_names":["complete_twitter_verification"]},{"name":"constructor","hash":"4796960344882644688","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"oracle","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1YvW7CMBB2SAJJAQm16ns4xImTLUP3Dh062/mpKrWiRbQzj95GsuXjCDDEkTLkk9DdcZf7+4wFOMTAUdJDNumIKZSk/RBZzEU7G70GHfOjZKjkDPhdi8OGqK7N/BllSdgxn8X+41DlHHI/OucA+elC5Xk6mvx4lhZrZcMzpJ8J/l8rYvS10kP0zBDcDrh7+tDRv661VLN+oP3MwH6cC5KQUz41ZmhvOKawNNeG3ObZtTiHB3yF5RlgfQ/N4FucYW5/hu0G9Qnr6LqLjrrbusykbJqIiVQmMeMyriRLq7KKEsaEbPK8zhOWZnEuOKMyr2MuU5bJMqkjnjY6d2B/pqi9Bx5VLvH7+fxV7qr65bDbi7f6df9+qAkC/sAEyF50xEH0LjhHtnOjIL7VWhRK0n6I8WmzfKPxNTk/VRraF4DaM+QLUV/Qdwd8PvItgc9BvhXwXfua5SIb7qnteQ/y4jiNAbljE3dGxxg5d8nEndExRs5dOnFndIyRc8cn7oyOMXLusok7o2OMnLt84s7oGDa4W4IZvCM5maVQ79Me4Bmlup6r8vvkvHdY30fx38qG+9TS69Fnw0XUxKIRiagqVop7lL/FpX9Rev+Y85Dtd8RBtA38AVfSKA/wFQAA","debug_symbols":"tdbdjqowFIbhe+GYg67+rVVvZTIxqDghIWgY3cmO8d53a78yeoCZQPaJTx2GV1gpCbfq0O6uX9tuOJ6+q83HrdqNXd93X9v+tG8u3WmIf71VKn2QrTZUV+QyPsMZyYQHWmUoozMmkys6V3Ss+AhnJJMq8aBJGR0lqKGBFjroIUOBIWvRs6lnohoaaKGDHjIUGLJOQfRc6tmogRY66CFDgSHrFSSInk89F7XQQQ8ZCgxZVpCghuhx6sV5s4MeMhQYsqIgQQ0NRE9Sj6MeMhQYskFBghoaaCF6IfUkylBgyJJSZUFlocvClIUtC1cWyFLa2Vrf73VVNv/2MrZt2vtPT0N8Rs7N2A6XajNc+76u/jT99fFP3+dmeHhpxnhU1VU7HKIxeOz6Nq3u9c/Zav5UZmGcLUQ8BeLV/zZBekqQeUq414vQbwpWUSlY/XQRrF8SZj4hyvhyH8rJlPDhpWDfTEJMQIElqLmCe3MbZMWV+yCn/Vzj3TCtNdMovJkbJq8fpqweZlg9TFL/e5oyzcJpmpvmu4IzdiqwXVT4eTy8liUFb6e78KIWFcK0q9i4JQW2MhXELyqEsiVIjF5S+OXOprB6a2u1em9rWrq3P+O3Zt+NL29G91Qbu2bXt/h6vA77p6OXv+dypLxZncfTvj1cxzaVnl6v4ucHKamJzOc9/d4/","names":["constructor"],"brillig_names":["constructor"]},{"name":"get_all_verification_counts","hash":"16527856327511816172","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/81WXU/CMBRtWTcoSCTgDxkyGA+aEPXdRH9Bw8AngzHG5/10V22zs7sucdAlu0nTj3t77j2n61LO/iwsGjdjwarGoY/I+qBogdkTsgb77yab6NH00vQD8Ot9OzOPL7OlZHWCvvC3caIkqwvpsf6VNJi8G/xYwnl1gT80OE95ic/Jd6JtVLQ5jBesGj8AjQOCw8AvgYNvPsV5JxZfdIBf2GZqOeZ1jaxP5NXc6AvBJ0DPW6JPF+eN+nShv9Zn0VC/tonhek+44nfiqY7VVYFxY7DU9/vzx/6UHV6/Tp/q7fByUBnmpPUy4sMxb4jrkEvSlkvQXy7rtlxEf7ls2nIJ+8slbcsl6i+XbVsuwwu5TFmdCyc8R7Du8X+bumqi9x/zj1mn75UlJ/lsPU3vAauddNQ6c/jwP40+zCMdeVxYgUcs4REr9IgVecSy92TCyrMc5lW83x7W7HvHvn9GGE98EnwiL/NqG5u5gDyIZesISfydmV+bPoI9dv/MkT8i+St1O9bo+0E64qUjXp/P2oy1rlZvkZd4vu5nuo1jW5/VPoT60AT4Mf7BzMeEr70DuzPrPKZqeVypo1qrLEv2ak7wUTOt0w8WrPa/NQ8AAA==","debug_symbols":"tZbBjoIwEIbfpWcOnXZawFcxxqBWQ0LQIGyyMbz7TnUAOZTDFi58MrWfnckf05e4uFN3O5b19f4Uu/1LnJqyqsrbsbqfi7a811R9Cekfip4mEQo+UGIHkqiZSPR1w7Rip3w9ZWZEX88/1GTTVNfAJJ+yRM1EpmFaZsrMmPmHKJnAZB+yD9mH7EP2Ifvw7ev7RAydH9vGOd/41yhoQI+icXUrdnVXVYn4Karu/aXno6jfbIuGVqkjV1+IJLyWlfOf+mTaLcNbU42Gd6c6w1Fg5gYIGwBGA0A6HQFSNVOohUOYDIdDWGlGhc1nBr3URqYHAyoVMuBSGzq1Yx8o85BjaZgo5XgKnYeGaeOHmUYPM4seZr71MM2YTMxNMJkrRBPiswnx4YSt02n8rD7HMBhMJ6wQT4jPJ8QHFLZOqLFm6sSGBqrW+POMT6iKT6jaOqHW98mdmGBC1QoJVfEJVfEJVf9O6IHeinPZzK5Ovbc1ZXGqHL9eu/r8tdr+PoaV4er1aO5nd+ka503T/YsuMnsjEysPiQCq7C0k1h56/8t/","names":["get_all_verification_counts"],"brillig_names":["get_all_verification_counts"]},{"name":"get_discord_verification_count","hash":"16322175806952311457","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqQj6Xw/AJf4PC7PspHV7d28xL26VkLinrZeYtVwTgfOBWT4PfCJ+Sd4bd+XwsG8Wc657rsE/hUxvmN4qI7PH2G/Rfp19CborDMR1bGoRSqkTEoRWvzE8ukL5YqnLakFAAA=","debug_symbols":"fdJNroMgEADgu7Bm4cif9SpNY1CxISFoKLzkxXD3QqNVFnbDADPzEQIrGlUfnp220/xC7X1FvdPG6Gdn5kF6Pdu0u6IqD0BRyzAClkKMGO0VnXdK5YJTS4IW6ZT1qLXBGIz+pAmfotci7Sd66VK2wkjZMcUETtqoPIv46K6uWzkH2Lo5ZwfASgGuBQDKNgFAHAKIuiDqa0Kwhm6E4BX7EvxWCOSHQBqyC7SurwT66xpE8O89aHUrjEdayUG74kVj1pyWvVHbcgp2OGX9/7Jn9h+xuHlQY3AqS6dvkcY7NLgmj5hPewM=","names":["get_discord_verification_count"],"brillig_names":["get_discord_verification_count"]},{"name":"get_email_verification_count","hash":"3295635158916431366","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqQj73w/AJf4PC7PspHV7d28xL26VkLinrZeYtVwTgfOBWT4PfCJ+Sd4bd+XwsG8Wc657rsE/hUxvmN4qI7PH2G/Rfp19CborDMR1bGoRSqkTEoRWvzE8ukLXiT5KKkFAAA=","debug_symbols":"fZLBDoMgDIbfhTMHKqDOV1kWg4oLCUHDZMliePfBIk4Oemkp7f/Rhq5okJ17tsqM0ws19xV1Vmmtnq2eerGoyYTbFZFogKGGYwQ8OO8xShXtYqWMBQdJAM3CSrOgxjitMXoL7X5Fr1mYn1+EDVmCkTRD8AE4Ki3jyeO/mpxLKyCwqSug9Q7gOQHOCQCMbwSA6t8CVEWGKC6a4DVLTZSE74jylhHoBYHWNBFYUZwR2NUYtCr3ORi5ZYxHiESvbPajPtKsEp2WWzg60x+yy2dOmbQRs516OTgrI+mwFsHeocYFffj42hc=","names":["get_email_verification_count"],"brillig_names":["get_email_verification_count"]},{"name":"get_farcaster_verification_count","hash":"15140834411524581901","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqQj63w/AJf4PC7PspHV7d28xL26VkLinrZeYtVwTgfOBWT4PfCJ+Sd4bd+XwsG8Wc657rsE/hUxvmN4qI7PH2G/Rfp19CborDMR1bGoRSqkTEoRWvzE8ukL++OUt6kFAAA=","debug_symbols":"fdLRCoMgFADQf/HZBzXN6lfGCCsbglg4HYzw36cjVz60F2927z0quoFJDv7RKzMvT9DdNjBYpbV69HoZhVOLiX83gNKAKegYBJjFEAIEuaJ3VspUcGqJ0CqsNA50xmsNwUto/y16rsJ8oxM2ZhEE0kwxRnBWWqavAI9udN1at7zduzkiB8BKAV8LGFO2CxjzQ8CcFAS5JjhraN5EjdiPqNtCqP4IVVNlgRJyJdB/x6h4/TsHRW1h3ONMjMoWNxqSZpUYtNynszfjKevea87kF7HaZZSTtzJJp2cRxxtuIKnuIa32AQ==","names":["get_farcaster_verification_count"],"brillig_names":["get_farcaster_verification_count"]},{"name":"get_github_verification_count","hash":"15199058822408744890","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUyw6CMBBsBaMVuaCJfkYJIBw5eDfRL2h4eDIYYzzz6ZZkmy6NEBPKJM1u2TI7Ozwo0aAQXdIHJX+Ajlw7QmQQF6juyJXDnk9DyIy+NvkzHifsx3wW9UcMOOk8/Fzxz+Q/XwHPudX8eBbVdy3XFuU+5P7I/XNql882ZojTNr9EuBvQ38EDHwJjVvxNWdJx6nzfA5f4PC7Poimr27t5iXt1rUSJe5p6iVHDOR0455Ph98Aj+p/gtn1fcgvzphnnqq8D/EuifcdwUR2fP8B+g/Sr6E7QWacirCNRi0SUZVyIwOAnhk9f8cSFwakFAAA=","debug_symbols":"fdLdCoMgFADgd/Hai8zfepUxwsqGIBZOByN89+molhftxpOdcz4VXcGo+vDotJ3mJ2hvK+idNkY/OjMP0uvZpr8rqPKACGgpBIimECMEe0XnnVK54NSSoEU6ZT1obTAGgpc04Vv0XKT9Ri9dylYQKDummMBJG5W/Ivx1V9etTFC2dTPRkAOgpYCuBYQI3QSE+G8LiNcFUV8TnAqyEZxV9CBYUwj4j4AF3gVS11cC+XcMzNlxDlI1hXFPMzloV9xozJrTsjdqm07BDqesfy97Zn8Ri5sHNQansnR6Fmm8IQFrfI95tQ8=","names":["get_github_verification_count"],"brillig_names":["get_github_verification_count"]},{"name":"get_oracle","hash":"17220221185349596114","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUyw6CMBBsBaMVuaCJfkYRCBw5eDfRL2h4eDIYYzzz6ZZkmy6NEBPKJM1u2TI7Ozwo0aAQXdIHJX+Ajlw7QmQQF6juyJXDnk9DyIy+NvkzHifsx3wW9UcMOOk8/Fzxz+Q/XwHPudX8eBbVdy3XFuU+5P7I/XNql882ZojTNr9EuBvQ38EDHwJjVvxNWdJx6nzfA5f4PC7Poimr27t5iXt1rUSJe5p6iVHDOR0455Ph98Aj+p/gtn1fcgvzphnnqq8D/EuifcdwUR2fP8B+g/Sr6E7QWacirCNRi0SUZVyIwOAnhk9fmF6wwqkFAAA=","debug_symbols":"fZLLroQgDIbfhTULuYn6KpOJQcUJCUHDwElODO8+MBFHFrppKe3/0YZuYJKDf/XKzMsbdI8NDFZprV69Xkbh1GLi7QaqZBAFHYMAsehCgCBX9M5KmQpOkghahZXGgc54rSH4E9p/i96rMF/vhI3ZCgJppugjcFZaplOAP3V1LeWctLuac9YcAFYS0DUBIcp2AkL81wLiuEDgmyZYQ3MTdcUORN0WBHJDIA3JBIrxFYHejUF4fcxBq7ZgPGMkRmWLHw2JZpUYtNzD2ZvxlHX/a87kjVjtMsrJW5lIp7WI9oEaiMkzpNc+","names":["get_oracle"],"brillig_names":["get_oracle"]},{"name":"get_profile_registry","hash":"9788322171004632960","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqWj8/0AXOLzuDzLRla3d/MS9+paCYl72nqJVcM5HTgXkOH3wCfmn+C1fV8KB/NmOee67xL4V8T4juGhOj5/hP0W6dfRm6CzzkRUx6IWqZAyKUVo8RPLpy+GN4NYqQUAAA==","debug_symbols":"fZLBDoMgDIbfhTMHERDmqyyLQcWFhKBhsGQxvPtgEScHvbSU9v9oQ1cwyt4/O2Wm+QXa+wp6q7RWz07Pg3BqNvF2BVUyiICWQoBodCFAkCs6Z6VMBQdJBC3CSuNAa7zWELyF9r+i1yLMzzthY7aCQJox+giclJbpFOBfXZ1LGcd8UzPesB1ASwI6JyBE6EZAiP1bQKwuEPVFE5ST3ERT0R3R3AoCviBgjjOB1PUZgVyNgVmzz0GqW8F4xEgMyhY/GhLNKtFruYWTN8Mh6z5LzuSNWOw8yNFbmUiHtYj2jjis8SOk174=","names":["get_profile_registry"],"brillig_names":["get_profile_registry"]},{"name":"get_telegram_verification_count","hash":"14840877183981229015","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqQj7Xw/AJf4PC7PspHV7d28xL26VkLinrZeYtVwTgfOBWT4PfCJ+Sd4bd+XwsG8Wc657rsE/hUxvmN4qI7PH2G/Rfp19CborDMR1bGoRSqkTEoRWvzE8ukL7622W6kFAAA=","debug_symbols":"fZLdzoMgDIbvhWMO5N95K8tiUHEhIWgYfMkXw70PFnFy4E5aSvs+tKEbmNQQnr228/IC3X0Dg9PG6GdvllF6vdh0u4EmG0RBxyBALLkYISgVvXdK5YKTJIFW6ZT1oLPBGAj+pAmfotcq7cd76VK2gUDZKfkEnLVR+RThV91cS7kgdFdzIegBYDUBXRMQomwnICS+LSCBKwS+RgjWliYEb9iB4LeKQH4QSEsKgWJ8RaC/xiCCH3PQ5lYxHimSo3bVj8ZMc1oORu3hHOx4yvr/tWTKRqxuGdUUnMqk01oke0ctxOQR82tv","names":["get_telegram_verification_count"],"brillig_names":["get_telegram_verification_count"]},{"name":"get_total_verifications","hash":"6685081770872391011","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUyw6CMBBsBaMVuaCJfkYJEPDGwbuJfkHDw5PBGOOZT7ck23RphJhQJml2y5bZ2eFBiQaF6JI+KPkDdOTaESKDuEB1R64c9nwaQmb0tcmf8ThhP+azqD9iwEnn4eeKfyb/+Qp4zq3mx7Oovmu5tij3IfdH7p9Tu3y2MUOctvklwt2A/g4e+BAYs+JvypKOU+f7HrjE53F5Fk1Z3d7NS9yrayVK3NPUS4wazunAOZ8Mvwce0f8Et+37kluYN804V30d4F8S7TuGi+r4/AH2G6RfRXeCzjoVYR2JWiSiLONCBAY/MXz6AlQD6F6pBQAA","debug_symbols":"fZLNDoMgDMffhTMHPsX5KstiUHEhIWgYLFkM7z5Y1MlBLy2l/f9oQxcwqC48W23H6QWa+wI6p43Rz9ZMvfR6sul2ASgbzEDDIcA8uRgh2Cpa75TKBQdJAs3SKetBY4MxELylCb+i1yztz3vpUhZBoOyQfAKO2qh8ivCvRudSQTBb1YKwagfwkoDPCRgzvhIwFv8WsCAFglw0weu9iQrxHVHdCgK9INCabgRGyBmBXY1BRbXPwdCtYDxSJHvtih+Nmea07IxawzHY/pD1n3nLbBsxu6lXQ3Aqkw5rkewd15DQR8yvfQE=","names":["get_total_verifications"],"brillig_names":["get_total_verifications"]},{"name":"get_twitter_verification_count","hash":"15864808768519233678","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqQj7nw/AJf4PC7PspHV7d28xL26VkLinrZeYtVwTgfOBWT4PfCJ+Sd4bd+XwsG8Wc657rsE/hUxvmN4qI7PH2G/Rfp19CborDMR1bGoRSqkTEoRWvzE8ukLknmhtKkFAAA=","debug_symbols":"fdLdCoMgFADgd/HaizT/6lXGCCsbglg4HYzw3aejWl60G092zvlUdAWj6sOj03aan6C9raB32hj96Mw8SK9nm/6uoMoDIqClECCaQowQ7BWdd0rlglNLghbplPWgtcEYCF7ShG/Rc5H2G710KVtBoOyYYgInbVT+ivDXXV23MiKarZtRLA6AlgK6FhAidBMQ4r8tII4LAl8TnAqyEZxV9CBYUwj1H6EW9S4QjK8E8u8YNWfHOUjVFMY9zeSgXXGjMWtOy96obToFO5yy/r3smf1FLG4e1BicytLpWaTxhgTE9T3m1T4=","names":["get_twitter_verification_count"],"brillig_names":["get_twitter_verification_count"]},{"name":"prepare_discord_verification","hash":"16538382865518490702","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"rZbLrqMwDIbfJWsWsePc+ipVVdGWc4SEaMWBkUYV7z5OIVAWiTrt2fBz8xc78U+4i0t1Gr6Pdft1/RG7/V2curpp6u9jcz2XfX1t+e5dyHAgLXZQCDKT2EncJJ5lHAsRw459V1Uh6onD9FvZVW0vdu3QNIX4UzbD46WfW9k+tC87fioLUbUXVgZ+1U0VzsZijZbpUK1gDtbWLOFA9lUAarIzAQ3gipC0QWAGgRQrQDQrwuoNQaUJSno9ExQYlyJQmgDaa5oRfP7EQOc2EJ0pBNDEQoD0glBym4fJ5IEuIgC9fwuhjIoIAplE5ArhZVhWxKYLyfUFOVj7QiX7AjIMAohrQqDXSox7PQu5dCcpWAhavkWgdwjkbGxOcs6lZ4JyWYBZ67CpBs8ZfTWZRpNZj0xnWTCRYcH61HqA/djr4D42O/jfcDvKz+2O8Lnfs4wXDZ+t5UXH59vDR8tb3hZS7YGZD4+yLlrlya3/sR1p7+N8Gvk0F482P/Blea677WYNSux4VKBJ9CRh1+ZqwM7K+zbyLIOfFOWsMCuG79wYEuvq8tRUAR1GH9pzHIkv+7+3+CT+ONy667m6DF0Vslr/HjipvcKC8MCD8p29hkKbwxiq+Ac=","names":["prepare_discord_verification"],"brillig_names":["store_in_execution_cache_oracle_wrapper"]},{"name":"prepare_email_verification","hash":"11490786147906450563","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"email_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9XdBXSTZ9/H8dC0hcIYNtiYYdtwSJqWpri7O8xooR1MYNjGvHN3d6Zsw93d3d3d3f39/R+SlxC65z3vw90955tzvqchSZPPdTctbXLf15XJdeWUze1yHYi4cj6Tcgc+2kUFwy4Lfgw9H5XO7bKlc1n2dC7Lkc5ludK5LJ+qGnZZgXRuVzCdywqlc1nhdC4rGrgs9JQp8LFq4KPPUy4uLiUhNsXr8yZ5YhOT/fGeuPjkcn6v3xvvj+8U6/f5Uvxx/oTE5MQET6I3zpfiTY1P9KV6rpwuRVy9L88NnWI7ZqTz8n/u9IVfYLbcKjLEatvhUuB8MdfV88VDzl8O3Cb4efaFyqQilNsdcnngFBG2DTw3dvIWdXB7Rrqdc4U+Z+1+C4ZtB7fD26GYg/dV3MFtGuXINo1P9nfye0K3n9PfS9HOfe0z1Jn5P3fGhl/wf33P29cueD465Hxm97Xf81n07xiV1X3l/6nIkOvcrr8/VXVme3uD/9f9u+3uubGTN+ofen54buzkzZJBzv89hf8Av9EntJODL+HKmME7PeZMDo65JGTMEQ6OuRRkzG4Hx1z6Hxqz58ZO3jIObj+XmzHmsg6OOQvkPxqPi+H0QpyxEKcP4oyDOOMhznIQZwLE6Yc4EyHO8hBnBYizIsRZCeKsDHFWgTirQpzVIM7qEGcNiLMmxFkL4qwNcdaBOOtCnPUgzvoQZwOIsyHE2QjibAxxNoE4m0KczSDO5hBnC4izJcTZCuJsDXG2gTjbQpztIM72EOf9EOcDEOeDEOdDEOfDEGcHiDMJ4kyGODtCnJ0gzhSIMxXifATi7AxxdoE4H4U4H4M4H4c4n4A4u0Kc3SDOJyHO7hBnD4izJ8TZC+LsDXE+BXE+DXH2gTifgTifhTifgzifhzhfgDhfhDhfgjjTIM6XIc5XIM5XIc7XIM7XIc43IM43Ic63IM63Ic53IM53Ic73IM73Ic4PIM4PIc6PIM6PIc5PIM5PIc7PIM7PIc4vIM4vIc6vIM6vIc5vIM5vIc7vIM7vIc4fIM4fIc6+EOdPEOfPEOcvEOevEOdvEOfvEGc/iPMPiPNPiPMviLM/xDkA4hwIcQ6COAdDnEMgzqEQ5zCIczjEOQLiHAlxjoI4R0OcYyDOsRDnOIhzPMQ5AeKcCHFOgjgnQ5xTIM6pEOc0iHM6xDkD4pwJcc6COGdDnHMgzrkQ5zyIcz7EuQDiXAhxLoI4F0OcSyDOpRDnMohzOcS5AuJcCXGugjhXQ5xrIM61EOc6iHM9xLkB4twIcW6CODdDnFsgzq0Q5zaIczvEuQPi3Alx7oI4d0OceyDOvRDnPohzP8R5AOI8CHEegjgPQ5xHIM6jEOcxiPM4xHkC4jwJcZ6COE9DnGcgzrMQ5zmI8zzEeQHivAhxXoI4L0OcdocEZyaIMwLidEOckRBnFMQZDXFmhjizQJwxEGdWiDMbxHkTxJkd4rwZ4swBceaEOHNBnLkhzjwQ5y0QZ16IMx/EeSvEeRvEmR/ivB3ivAPivBPivAvivBviLABxFoQ4C0GchSHOIhDnPRDnvRDnfRBnUYizGMRZHOIsAXGWhDhLQZylIc4yEGdZiNMDcXohzliI0wdxxkGc8RBnOYgzAeL0Q5yJEGd5iLMCxFkR4qwEcVaGOKtAnFUhzmoQZ3WIswbEWRPirAVx1oY460CcdSHOehBnfYizAcTZEOJsBHE2hjibQJxNIc5mEGdziLMFxNkS4mwFcbaGONtAnG0hznYQZ3uI836I8wGI80GI8yGI82GIswPEmQRxJkOcHSHOThBnCsSZCnE+AnF2hji7QJyPQpyPQZyPQ5xPQJxdIc5uEOeTEGd3iLMHxNkT4uwFcfaGOJ+COJ+GOPtAnM9AnM9CnM9BnM9DnC9AnC9CnC9BnGkQ58sQ5ysQ56sQ52sQ5+sQ5xsQ55sQ51sQ59sQ5zsQ57sQ53sQ5/sQ5wcQ54cQ50cQ58cQ5ycQ56cQ52cQ5+cQ5xcQ55cQ51cQ59cQ5zcQ57cQ53cQ5/cQ5w8Q548QZ1+I8yeI82eI8xeI81eI8zeI83eIsx/E+QfE+SfE+RfE2R/iHABxDoQ4B0GcgyHOIRDnUIhzGMQ5HOIcAXGOhDhHQZyjIc4xEOdYiHMcxDke4pwAcU6EOCdBnJMhzikQ51SIcxrEOR3inAFxzoQ4Z0GcsyHOORDnXIhzHsQ5H+JcAHEuhDgXQZyLIc4lEOdSiHMZxLkc4lwBca6EOFdBnKshzjUQ51qIcx3EuR7i3ABxboQ4N0GcmyHOLRDnVohzG8S5HeLcAXHuhDh3QZy7Ic49EOdeiHMfxLkf4jwAcR6EOA9BnIchziMQ51GI8xjEeRziPAFxnoQ4T0GcpyHOMxDnWYjzHMR5HuK8AHFehDgvQZyXIU5XBMOZCeKMgDjdEGckxBkFcUZDnJkhziwQZwzEmRXizAZx3gRxZoc4b4Y4c0CcOSHOXBBnbogzD8R5C8SZF+LMB3HeCnHeBnHmhzhvhzjvgDjvhDjvgjjvhjgLQJwFIc5CEGdhiLMIxHkPxHkvxHkfxFkU4iwGcRaHOEtAnCUhzlIQZ2mIswzEWRbi9ECcXogzFuL0QZxxEGc8xFkO4kyAOP0QZyLEWR7irABxVoQ4K0GclSHOKhBnVYizGsRZHeKsAXHWhDhrQZy1Ic46EGddiLMexFkf4mwAcTaEOBtBnI0hziYQZ1OIsxnE2RzibAFxtoQ4W0GcrSHONhBnW4izHcTZHuK8H+J8AOJ8EOJ8COJ8GOLsAHEmQZzJEGdHiLMTxJkCcaZCnI9AnJ0hzi4Q56MQ52MQ5+MQ5xMQZ1eIsxvE+STE2R3i7AFx9oQ4e0GcvSHOpyDOpyHOPhDnMxDnsxDncxDn8xDnCxDnixDnSxBnGsT5MsT5CsT5KsT5GsT5OsT5BsT5JsT5FsT5NsT5DsT5LsT5HsT5PsT5AcT5IcT5EcT5McT5CcT5KcT5GcT5OcT5BcT5JcT5FcT5NcT5DcT5LcT5HcT5PcT5A8T5I8TZF+L8CeL8GeL8BeL8FeL8DeL8HeLsB3H+AXH+CXH+BXH2hzgHQJwDIc5BEOdgiHMIxDkU4hwGcQ6HOEdAnCMhzlEQ52iIcwzEORbiHAdxjoc4J0CcEyHOSRDnZIhzCsQ5FeKcBnFOhzhnQJwzIc5ZEOdsiHMOxDkX4pwHcc6HOBdAnAshzkUQ52KIcwnEuRTiXAZxLoc4V0CcKyHOVRDnaohzTQY5I8KcPk+5uLiUhNgUr8+b5IlNTPbHe+Lik8v5vX5vvD++U6zf50vxx/kTEpMTEzyJ3jhfijc1PtGXGrjvog6Oee0/NGbPjZ286yKc236RbsbXOdLB7bce8tyOcnDMGyBjjnZwzBshY87s4Jg3QcacxcExb4aMOcbBMW+BjDmrg2PeChlzNgfHvA0y5pscHPN2yJizOzjmHZAx3+zgmHdCxpzDwTHvgow5p4Nj3g0Zcy4Hx7wHMubcDo55L2TMeRwc8z7ImG9xcMz7IWPO6+CYD0DGnM/BMR+EjPlWB8d8CDLm2xwc82HImPM7OOYjkDHf7uCYj0LGfIeDYz4GGfOdDo75OGTMdzk45hOQMd/t4JhPQsZcwMExn4KMuaCDYz4NGXMhB8d8BjLmwg6O+SxkzEUcHPM5yJjvcXDM5yFjvtfBMV+AjPk+B8d80cExu11X9vFZERhwCVVSlVKlVRlV1h5HeVWsbQsVp+JVOZWg/CpRlVcVVEVVSVVWVQJjr6aqqxqqpqqlaqs6qq6qp+qrBqqhaqQaqyaqqWqmmqsWqqVqpVqrNqqtaqfaq/vVA+pB9ZB6WHVQSSpZdVSdVIpKVY+ozqqLelQ9ph5XT6iuqpt6UnVXPVRP1Uv1Vk+pp1Uf9Yx6Vj2nnlcvqBfVSypNvaxeUa+q19Tr6g31pnpLva3eUe+q99T76gP1ofpIfaw+UZ+qz9Tn6gv1pfpKfa2+Ud+q79T36gf1o+qrflI/q1/Ur+o39bvqp/5Qf6q/VH81QA1Ug9RgNUQNVcPUcDVCjVSj1Gg1Ro1V49R4NUFNVJPUZDVFTVXT1HQ1Q81Us9RsNUfNVfPUfLVALVSL1GK1RC1Vy9RytUKtVKvUarVGrVXr1Hq1QW1Um9RmtUVtVdvUdrVD7VS71G61R+1V+9R+dUAdVIfUYXVEHVXH1HF1Qp1Up9RpdUadVefUeXVBXVSX1GVl32SZVIRyq0gVpaJVZpVFxaisKpu6SWVXN6scKqfKpXKrPOoWlVflU7eq21R+dbu6Q92p7lJ3qwKqoCqkCqsi6h51r7pPFVXFVHFVQpVUpVRpVUaVVR7lVbHKp+JUvCqnEpRfJaryqoKqqCqpyqqKqqqqqeqqhqqpaqnaqo6qq+qp+qqBaqgaqcaqiWqqmqnmqoVqqVqp1qqNaqvaqfbqfvWAelA9pB5WHVSSSlYdVSeVolLVI6qz6qIeVY+px9UTqqvqpp5U3VUP1VP1Ur3VU+pp1Uc9o55Vz6nn1QvqRfWSSlMvq1fUq+o19bp6Q72p3lJvq3fUu+o99b76QH2oPlIfq0/Up+oz9bn6Qn2pvlJfq2/Ut+o79b36Qf2o+qqf1M/qF/Wr+k39rvqpP9Sf6i/VXw1QA9UgNVgNUUPVMDVcjVAj1Sg1Wo1RY9U4NV5NUBPVJDVZTVFT1TQ1Xc1QM9UsNVvNUXPVPDVfLVAL1SK1WC1RS9UytVytUCvVKrVarVFr1Tq1Xm1QG9UmtVltUVvVNrVd7VA71S61W+1Re9U+tV8dUAfVIXVYHVFH1TF1XJ1QJ9UpdVqdUWfVOXVeXVAX1SV1WdkvFJlUhHKrSBWlolVmlUXFqKwqm7pJZVc3qxwqp8qlcqs86haVV+VTt6rbVH51u7pD3anuUnerAqqgKqQKqyLqHnWvuk8VVcVUcVVClVSlVGlVRpVVHuVVscqn4lS8KqcSlF8lqvKqgqqoKqnKqor9vqKqqeqqhqqpaqnaqo6qq+qp+qqBaqgaqcaqiWqqmqnmqoVqqVqp1qqNaqvaqfbK1pq3ddxtjXRbf9zW9u6gbE1qW+/Z1lK2dYptDWBbX9fWrrV1YW3NVVvP1NYKtXU4bY1LWz/S1ma0dQ9tTUFbr8/WwrN15mwNN1sfzdYes3W9bM0sW4/K1nqydZRsjSJb/8fW1klTtiaMrbdia5nYOiG2Boetb2FrR9i6DLbmga0nYHP12zz4Nse8zd9uc6PbvOM2p7fNl21zUds8zzaHss1PbHP/2ry6NmetzQdrc63aPKY2R6jNv2lzW/ZVNiejzXdocwnaPH02B57NL2dzt9m8aDbnmM3nZXNl2TxUNseTzZ9kcxPZvD82p47NV2Nzwdg8KzaHic0PYnNv2LwWNmeEzcdgcx3YPAJ2jL4d/27Hlk9Rdky0HW9sx/LacbJ2DKod32nHTtpxiXbMnx1PZ8eq2XFgdoyVHb9kxwbZcTd2TIsdL2LHYtjvq3YMge2fb/u+237ltp+17cNs++Hafqm2n6btt2j78W1Rtp+X7fdk+wHZfjG2n4jtN2H7Edj76vY+s73vau9D2vty9j6VvW9j72PY6/r2Ore97muvg9rrgvY6mb1uZK+j2OsK9ne2/d1pf4fZ3yX2e3rElf/6XbafsZ1KuK6eAj8WXO7A9bZfru2navtt2n6Mtl+f7edm+33ZflC2X5DtJ2P7jdh+FLZfgb3Pbu872/uw9r6kvU9n71vZ+zj2voa9zm+ve9vrwPa6qL1OaK+bFVSFVGFlf3fb36H2d5n9nWL7vhdTxV3XnzKFnM8V+Jh3R7X83ef1qxV+m8TAx5jAx4iQ623MVQP/9tzYyRsT9rhO3r/fE5cQ47p+Gzjo98W4rn2OZNT9R2XM/f9rP2M71Uy7ev+hYwk+rjvsduGfY9dnD5wPfZ4FbxMcR0Y8j/R1js/g7eQN3n/mDPo6B7dbdMi2c6czpuDjZw/7WgWvT+9j8L7Crws+VlZXhj6Hvf9ubKH+4HMjZ9jtw7fB391X9P/zvv6bX9PQbR36Nf3XbdKuXhcRdl1kyHXRYddFpV0/Rvu/qGDI7cK/ByPDrgs+T+xUO+3qfZQMub9SgfPB7ZeRP7sz6meGnfKk4w99LDtlTru6PYLbxh1yWXCbB78GWUJvH3ZdTMh1kWnXPk7WwL8jQx4n9L6Cjqiw2wd/J8kR+Bgd8jnBz8+ZzuNHhz3+Ne50LgvfLjHp3D4mndvbc7RI4Hy2QPYc8oXc3999j0S4rr+/HK7rfx4EPzeDv59jg9bIdKyhP1+Cj2+/9+UNnO/Zq1uPlHpda/VJ6di7V5duXWskdeyc4go7hX7zhT4xw38RDd0AoQNN7z7cIZ+f3sm+IMFfkiLTrv28qoHLPTdwSvB7PMHHDn5DRIU5XWGPHxV2e3/g31lDxhX8eCMHAaYmJHlTfUmpSfFJnTrFdUzKHXb/LtfVJ55tp/8BQV8W7toHAgA=","debug_symbols":"rZbLjqswDIbfJWsWsePc+ipVVdGWGSEhWjFwpKOKdx+nECiLRFU7G35u/mIn/gl3calOw/exbr+uP2K3v4tTVzdN/X1srueyr68t370LGQ6kxQ4KQWYSO4mbxLOMYyFi2LHvqipEPXGYfiu7qu3Frh2aphD/ymZ4vPRzK9uH9mXHT2UhqvbCysCvuqnC2Vis0TIdqhXMwdqaJRzIvgpATXYmoAFcEZI2CMwgkGIFiGZFWL0hqDRBSa9nggLjUgRKE0B7TTOCz58Y6NwGojOFAJpYCJBeEEpu8zCZPNBFBKD3byGUURFBIJOIXCG8DMuK2HQhub4gB2tfqGRfQIZBAHFNCPRaiXGvZqHIutgYWsJC0PItArxDIGdjc5JzLj0TlJtNWDqLlE01eM7oq8k0msx6ZDrLgokMC9an1gPsx14H97HZwf+F21F+bneEz/2eZbxo+GwtLzo+3x4+Wt7ytpBqD8x8eNRiNlLwznakvY/zaeTTXDza/MCX5bnutps1KLHjUYEm0ZOEXZurATsr79vIswx+UpSzwqwYvnNjSKyry1NTBXQYfWjPcSS+7P/f4pP443DrrufqMnRVyGr9e+Ck9goLwgMPynf2GgptDmOo4hc=","names":["prepare_email_verification"],"brillig_names":["store_in_execution_cache_oracle_wrapper"]},{"name":"prepare_farcaster_verification","hash":"14597692162889186420","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"rZbLjqswDIbfJWsWsePc+ipVVdGWGSEhWjFwpKOKdx+nECiLRFU7G35u/mI7NuYuLtVp+D7W7df1R+z2d3Hq6qapv4/N9Vz29bXlu3chw4G02EEhyExiJ3GTeJZxLEQ0O/ZdVQWrJw7Tb2VXtb3YtUPTFOJf2QyPl35uZfvQvuz4qSxE1V5YGfhVN1U4G4vVWqZNtYLZWFuzmAPZVwGoyc4ENIArQtIGgRkEUowA0awIqzcElSYo6fVMUGBcikBpAmivaUbw+RMDndtAdCYQQBMDAdILQsmtHybjB7qIAPT+LYQyKiIIZBKRC4S3YdkRmw4kVxfkYK0LlawLyDAIIO4JgV4jMe5VLxTCUhio1nRq+RaB3iGQs5FAzrl0JiiXTVgqi5RNFXiu0dcm02gy+5GpLAsmMixYn9oPsB/3OriPmx38X3Q7ys/bHeHzfs8yXmz4bCwvdny+PHxsectjIVUemPnwKOtiqyh4Zxxp72M+jXzKxaPMD3xZnutuO6xBiR2vCjSJniRMbY4G7Kw8t5GzDH5SlLPCrBi+c2NwrKvLU1MFdFh9aM9xJb7s/9/ik/jjcOuu5+oydFXwav17YKf2CgvCAy/Kd/YaCm0OY4jiFw==","names":["prepare_farcaster_verification"],"brillig_names":["store_in_execution_cache_oracle_wrapper"]},{"name":"prepare_github_verification","hash":"4463863386096578823","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"rZbLjqswDIbfJWsWsePc+ipVVdGWGSEhWjFwpKOKdx+nECiLRFU7G35u/mI7NuYuLtVp+D7W7df1R+z2d3Hq6qapv4/N9Vz29bXlu3chw4G02EEhyExiJ3GTeJZxLEQ0O/ZdVQWrJw7Tb2VXtb3YtUPTFOJf2QyPl35uZfvQvuz4qSxE1V5YGfhVN1U4G4vVWqZNtYLZWFuzmAPZVwGoyc4ENIArQtIGgRkEUowA0awIqzcElSYo6fVMUGBcikBpAmivaUbw+RMDndtAdCYQQBMDAdILQsmtHybjB7qIAPT+LYQyKiIIZBKRC4S3YdkRmw4kVxfkYK0LlawLyDAIIO4JgV4jMe5lLzzFXKA3diFo+RbBvkMgZ2NxknMunQnKZROWyiJlUwWea/S1yTSazH5kKsuCiQwL1qf2A+zHvQ7u42YH/xfdjvLzdkf4vN+zjBcbPhvLix2fLw8fW97yWEiVB2Y+PMq62CoK3hlH2vuYTyOfcvEo8wNflue62w5rUGLHqwJNoicJU5ujATsrz23kLIOfFOWsMCuG79wYHOvq8tRUAR1WH9pzXIkv+/+3+CT+ONy667m6DF0VvFr/HtipvcKC8MCL8p29hkKbwxii+AU=","names":["prepare_github_verification"],"brillig_names":["store_in_execution_cache_oracle_wrapper"]},{"name":"prepare_telegram_verification","hash":"6450553354759192211","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"rZbLjqswDIbfJWsWsePc+ipVVdGWGSEhWjFwpKOKdx+nECiLRFU7G35u/mIn/gl3calOw/exbr+uP2K3v4tTVzdN/X1srueyr68t370LGQ6kxQ4KQWYSO4mbxLOMYyFi2LHvqipEPXGYfiu7qu3Frh2aphD/ymZ4vPRzK9uH9mXHT2UhqvbCysCvuqnC2Vis0TIdqhXMwdqaJRzIvgpATXYmoAFcEZI2CMwgkGIFiGZFWL0hqDRBSa9nggLjUgRKE0B7TTOCz58Y6NwGojOFAJpYCJBeEEpu8zCZPNBFBKD3byGUURFBIJOIXCG8DMuK2HQhub4gB2tfqGRfQIZBAHFNCPRaiXEvZ2Hs0p1WwkLQ8i0CvEMgZ2NzknMuPROUm01YOouUTTV4zuiryTSazHpkOsuCiQwL1qfWA+zHXgf3sdnB/4XbUX5ud4TP/Z5lvGj4bC0vOj7fHj5a3vK2kGoPzHx4lHXRKgre2Y6093E+jXyai0ebH/iyPNfddrMGJXY8KtAkepKwa3M1YGflfRt5lsFPinJWmBXDp2IMiXV1eWqqgA6jD+05jsSX/f9bfBJ/HG7d9Vxdhq4KWa1/D5zUXmFBeOBB+c5eQ6HNYQxV/AI=","names":["prepare_telegram_verification"],"brillig_names":["store_in_execution_cache_oracle_wrapper"]},{"name":"prepare_twitter_verification","hash":"7307622569266719950","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"rZbLjqswDIbfJWsWsePc+ipVVdGWGSEhWjFwpKOKdx+nECiLRFU7G35u/mIn/gl3calOw/exbr+uP2K3v4tTVzdN/X1srueyr68t370LGQ6kxQ4KQWYSO4mbxLOMYyFi2LHvqipEPXGYfiu7qu3Frh2aphD/ymZ4vPRzK9uH9mXHT2UhqvbCysCvuqnC2Vis0TIdqhXMwdqaJRzIvgpATXYmoAFcEZI2CMwgkGIFiGZFWL0hqDRBSa9nggLjUgRKE0B7TTOCz58Y6NwGojOFAJpYCJBeEEpu8zCZPNBFBKD3byGUURFBIJOIXCG8DMuK2HQhub4gB2tfqGRfQIZBAHFNCPRaiXEvZwFq6U4wsBC0fItg3yGQs7E5yTmXngnKzSYsnUXKpho8Z/TVZBpNZj0ynWXBRIYF61PrAfZjr4P72Ozg/8LtKD+3O8Lnfs8yXjR8tpYXHZ9vDx8tb3lbSLUHZj48yrpoFQXvbEfa+zifRj7NxaPND3xZnutuu1mDEjseFWgSPUnYtbkasLPyvo08y+AnRTkrzIrhOzeGxLq6PDVVQIfRh/YcR+LL/v8tPok/Drfueq4uQ1eFrNa/B05qr7AgPPCgfGevodDmMIYqfgE=","names":["prepare_twitter_verification"],"brillig_names":["store_in_execution_cache_oracle_wrapper"]},{"name":"public_dispatch","hash":"5994769621396872913","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"10694658649089935141":{"error_kind":"string","string":"Only oracle"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"sync_notes","hash":"10224348315490808571","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"nZPdioMwEIXfZa69MJo/fZVSStRYAiFKqguL+O47KclWF7KU3mQyzpzPo5lsMOhuvd+MG6cHtJcNOm+sNfebnXq1mMnh0w3KsJAa2roAQqFlGBi0AgOHttn3AlL/bfFah/YDALGz8tot0LrV2gK+lF2fTY9ZuWdclMdqWYB2A0YEjsbqsNuLl7rMS0lJiYxy3Avxi8DsBCF5iJA8IiSKEkCQk77K61nFop6x1zcQyt81IGuRDLAmZ4Dm9bRuop5y+ZEBSZOBRuYM8Lyel+kP8Ip/YqCpqghoapYzIP8xINMQifLPEVwxVb3xp9neA8ob1Vkd03F1/aG6fM+pku7G7KdeD6vXgXS4ILhecAir+rqHt/0A","names":["sync_notes"],"brillig_names":["sync_notes"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"AztlanPrivateSocial::complete_discord_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::complete_discord_verification_parameters","fields":[{"name":"_verification_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::complete_email_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::complete_email_verification_parameters","fields":[{"name":"_verification_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::complete_farcaster_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::complete_farcaster_verification_parameters","fields":[{"name":"_verification_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::complete_github_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::complete_github_verification_parameters","fields":[{"name":"_verification_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::complete_telegram_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::complete_telegram_verification_parameters","fields":[{"name":"_verification_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::complete_twitter_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::complete_twitter_verification_parameters","fields":[{"name":"_verification_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::constructor_parameters","fields":[{"name":"oracle","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_all_verification_counts_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_all_verification_counts_parameters","fields":[]}},{"name":"return_type","type":{"kind":"array","length":6,"type":{"kind":"field"}}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_discord_verification_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_discord_verification_count_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_email_verification_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_email_verification_count_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_farcaster_verification_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_farcaster_verification_count_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_github_verification_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_github_verification_count_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_oracle_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_oracle_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_profile_registry_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_profile_registry_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_telegram_verification_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_telegram_verification_count_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_total_verifications_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_total_verifications_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::get_twitter_verification_count_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::get_twitter_verification_count_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::prepare_discord_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::prepare_discord_verification_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::prepare_email_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::prepare_email_verification_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"email_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::prepare_farcaster_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::prepare_farcaster_verification_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::prepare_github_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::prepare_github_verification_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::prepare_telegram_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::prepare_telegram_verification_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanPrivateSocial::prepare_twitter_verification_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanPrivateSocial::prepare_twitter_verification_parameters","fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"AztlanPrivateSocial"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"profile_registry","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"oracle","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"twitter_verification_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"discord_verification_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"telegram_verification_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"github_verification_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"farcaster_verification_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"email_verification_count","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"total_verifications","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]}}]}]}},"file_map":{"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"use dep::aztec::macros::aztec;\n\n// CONTRACT 2: MULTI-PLATFORM PRIVATE SOCIAL VERIFIER\n// Supports: Twitter, Discord, Telegram, GitHub, Farcaster, Email\n#[aztec]\npub contract AztlanPrivateSocial {\n    use dep::aztec::macros::{functions::{public, private}, storage::storage};\n    use dep::aztec::prelude::{AztecAddress, PublicMutable};\n    use dep::aztec::protocol_types::traits::FromField;\n    \n    #[storage]\n    struct Storage<Context> {\n        // Contract references\n        profile_registry: PublicMutable<AztecAddress, Context>,\n        oracle: PublicMutable<AztecAddress, Context>,\n        \n        // Verification counters for each platform\n        twitter_verification_count: PublicMutable<Field, Context>,\n        discord_verification_count: PublicMutable<Field, Context>,\n        telegram_verification_count: PublicMutable<Field, Context>,\n        github_verification_count: PublicMutable<Field, Context>,\n        farcaster_verification_count: PublicMutable<Field, Context>,\n        email_verification_count: PublicMutable<Field, Context>,\n        \n        // Total verifications across all platforms\n        total_verifications: PublicMutable<Field, Context>,\n    }\n\n    #[public]\n    fn constructor(oracle: AztecAddress) {\n        // HARDCODED YOUR REGISTRY ADDRESS!\n        storage.profile_registry.write(\n            AztecAddress::from_field(0x2ec8bbff14a6b5347b3db46dcd1544abf99e9546839a740b9e37b648bc5e176f)\n        );\n        storage.oracle.write(oracle);\n        storage.twitter_verification_count.write(0);\n        storage.discord_verification_count.write(0);\n        storage.telegram_verification_count.write(0);\n        storage.github_verification_count.write(0);\n        storage.farcaster_verification_count.write(0);\n        storage.email_verification_count.write(0);\n        storage.total_verifications.write(0);\n    }\n\n    // PRIVATE FUNCTIONS - Process data privately on user's device\n    \n    #[private]\n    fn prepare_twitter_verification(\n        profile_id: Field,\n        handle_hash: Field\n    ) -> Field {\n        // Private computation - Twitter uses base offset 1000000\n        let verification_hash = handle_hash + profile_id + 1000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_discord_verification(\n        profile_id: Field,\n        handle_hash: Field  \n    ) -> Field {\n        // Discord uses base offset 2000000\n        let verification_hash = handle_hash + profile_id + 2000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_telegram_verification(\n        profile_id: Field,\n        handle_hash: Field\n    ) -> Field {\n        // Telegram uses base offset 3000000\n        let verification_hash = handle_hash + profile_id + 3000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_github_verification(\n        profile_id: Field,\n        handle_hash: Field\n    ) -> Field {\n        // GitHub uses base offset 4000000\n        let verification_hash = handle_hash + profile_id + 4000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_farcaster_verification(\n        profile_id: Field,\n        handle_hash: Field\n    ) -> Field {\n        // Farcaster uses base offset 5000000\n        let verification_hash = handle_hash + profile_id + 5000000;\n        verification_hash\n    }\n\n    #[private]\n    fn prepare_email_verification(\n        profile_id: Field,\n        email_hash: Field\n    ) -> Field {\n        // Email uses base offset 6000000\n        let verification_hash = email_hash + profile_id + 6000000;\n        verification_hash\n    }\n\n    // PUBLIC FUNCTIONS - Store verification results\n    \n    #[public]\n    fn complete_twitter_verification(\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        \n        let count = storage.twitter_verification_count.read();\n        storage.twitter_verification_count.write(count + 1);\n        \n        let total = storage.total_verifications.read();\n        storage.total_verifications.write(total + 1);\n    }\n\n    #[public]\n    fn complete_discord_verification(\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        \n        let count = storage.discord_verification_count.read();\n        storage.discord_verification_count.write(count + 1);\n        \n        let total = storage.total_verifications.read();\n        storage.total_verifications.write(total + 1);\n    }\n\n    #[public]\n    fn complete_telegram_verification(\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        \n        let count = storage.telegram_verification_count.read();\n        storage.telegram_verification_count.write(count + 1);\n        \n        let total = storage.total_verifications.read();\n        storage.total_verifications.write(total + 1);\n    }\n\n    #[public]\n    fn complete_github_verification(\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        \n        let count = storage.github_verification_count.read();\n        storage.github_verification_count.write(count + 1);\n        \n        let total = storage.total_verifications.read();\n        storage.total_verifications.write(total + 1);\n    }\n\n    #[public]\n    fn complete_farcaster_verification(\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        \n        let count = storage.farcaster_verification_count.read();\n        storage.farcaster_verification_count.write(count + 1);\n        \n        let total = storage.total_verifications.read();\n        storage.total_verifications.write(total + 1);\n    }\n\n    #[public]\n    fn complete_email_verification(\n        _verification_hash: Field\n    ) {\n        let caller = context.msg_sender();\n        assert(caller == storage.oracle.read(), \"Only oracle\");\n        \n        let count = storage.email_verification_count.read();\n        storage.email_verification_count.write(count + 1);\n        \n        let total = storage.total_verifications.read();\n        storage.total_verifications.write(total + 1);\n    }\n\n    // VIEW FUNCTIONS - Get verification stats\n    \n    #[public]\n    fn get_twitter_verification_count() -> Field {\n        storage.twitter_verification_count.read()\n    }\n\n    #[public]\n    fn get_discord_verification_count() -> Field {\n        storage.discord_verification_count.read()\n    }\n\n    #[public]\n    fn get_telegram_verification_count() -> Field {\n        storage.telegram_verification_count.read()\n    }\n\n    #[public]\n    fn get_github_verification_count() -> Field {\n        storage.github_verification_count.read()\n    }\n\n    #[public]\n    fn get_farcaster_verification_count() -> Field {\n        storage.farcaster_verification_count.read()\n    }\n\n    #[public]\n    fn get_email_verification_count() -> Field {\n        storage.email_verification_count.read()\n    }\n\n    #[public]\n    fn get_total_verifications() -> Field {\n        storage.total_verifications.read()\n    }\n\n    #[public]\n    fn get_all_verification_counts() -> [Field; 6] {\n        [\n            storage.twitter_verification_count.read(),\n            storage.discord_verification_count.read(),\n            storage.telegram_verification_count.read(),\n            storage.github_verification_count.read(),\n            storage.farcaster_verification_count.read(),\n            storage.email_verification_count.read()\n        ]\n    }\n\n    #[public]\n    fn get_oracle() -> AztecAddress {\n        storage.oracle.read()\n    }\n\n    #[public]\n    fn get_profile_registry() -> AztecAddress {\n        storage.profile_registry.read()\n    }\n}\n","path":"/root/x/aztlan/contracts/aztlan_profile/src/main.nr"},"68":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"69":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"71":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"75":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/hash.nr"},"97":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"104":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"146":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"147":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"172":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"270":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"288":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"305":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"344":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"363":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}