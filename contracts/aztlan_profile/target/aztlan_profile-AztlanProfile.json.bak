{"noir_version":"1.0.0-beta.5+0000000000000000000000000000000000000000","name":"AztlanProfile","functions":[{"name":"constructor","hash":"466552106200961870","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/72UvQ6CMBSFi9RoxcmfQZ+iBBRGB3cHB+cbfoyDwRDizKMLyW1606ALrTdpLk3h6zmnDR7T5WHnbEQpyB67wD4h6343TjiX4yoUxr42+amMYzHgz6L+SCDTc8OXiu8ofzlDzrnVfOpF7TvvRkCel0zfD1f+1fm59L/+4TlAr5svXpk9HUfTp0W27M9qiyx4Py+vrMqLa1PVcC9u9aMpmFFUhGmYipyw4XIYVOIwqPDvQQVM/2F5q7+zdcOTVEqlyUf+FPlmcbJO39/hfEF8qc5H6CwTCMsISjhAnscZrAw+za3P6QN3YbOo6wYAAA==","debug_symbols":"pZPBjoMgFEX/hbULQBDwV5rGoGJDQtBQnWRi/PeBFhxd0EXdcIHHPcBN3gp61S6PRtthfIL6toLWaWP0ozFjJ2c9Wr+7AhgGVIKaFgCRt9C3VKBG0CuLyoNuWwESoJmdUsF/IPp7JumUnUFtF2MK8CPN8jr0nKR96Sydr3qisr1XDxy0UWG2Ff9umLcKVEWzIGS307Mf5f2IQBQBiGC2ExDDJwTOIzgs0xs4pHxHVOJEKPMExksRCYwLmCOQD99AhNP0D0RxlWN8ipKyFCXPRlldj5JdjpJfjlJ8G+Xdr2Sn3alztkBzWrZGxeWw2O5QnX+nVEmdN7mxU/3iVCAd2s+PNwwLTO9buO0P","names":["constructor"],"brillig_names":["constructor"]},{"name":"create_profile","hash":"5144598742126565808","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"},{"name":"profile_data_hash","type":{"kind":"field"},"visibility":"private"},{"name":"is_private_profile","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6759731346603734577":{"error_kind":"string","string":"Profile exists"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15865011268275408360":{"error_kind":"string","string":"Username taken"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["create_profile"],"brillig_names":["create_profile"]},{"name":"get_next_token_id","hash":"18192704101095719381","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqQj63w/AJf4PC7PspHV7d28xL26VkLinrZeYtVwTgfOBWT4PfCJ+Sd4bd+XwsG8Wc657rsE/hUxvmN4qI7PH2G/Rfp19CborDMR1bGoRSqkTEoRWvzE8ukL++OUt6kFAAA=","debug_symbols":"fdJNroMgEADgu7Bmwa9Qr9I0BhUbEoKGwkteDHcvNGplYTeMODMfEFjBqPv47Iyb5hdo7yvovbHWPDs7DyqY2eW/K0BlwAy0HALMc0gJgr2iC17rUnBqydCivHYBtC5aC8GfsvFT9FqU+8SgfM4iCLQbc8zgZKwuXwl+u9F1K5W42bqpZOQAeC3gawFjxjcBY/HdAhakIsg1IbhkGyEaxA+iuVUC/SFQSXeBEXIlsF/HoKI5zsHQrTIeeaYG46sbTUXzRvVWb9MpuuGUDf/LntlfxOLnQY/R6yKdnkUe71hCQh+prPYG","names":["get_next_token_id"],"brillig_names":["get_next_token_id"]},{"name":"get_profile_data","hash":"3924145948194077427","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1ZzY7jRBBux3Fi52cnMJyQQNoTVzuTTGbEJWhnGDghwROYJMMJLUKIs58AiRMHjty58BggIfESHHgJ0jNdM58/l52fcbNCuyVFbbuq66+rqqs7gbmHwP0sdOEbg3xbujF9GmQt8koDRc9GI7QJz91D4t47gA9bNDxRdGmL/0U6yxNTtblF/c8Sx9Onf4SnB/5p3/H5pHjkz7ZYGJtycuCc2OHl+RTmWPgUeMt8n37brvulZ79lp6beVxJzLwovss+E/xXwN+3xT4X/tR/9H/h/7Pj70P3Gj+7Z0NzH+Iew1rj2LdoyE96R8WLLueR0z1RBcH2SjbgYcNpeIhDSO9pkeXwEfJmO9cFNuU+0IiciWgsSawHJ7yrzLVwVZV5C/xz0/sE9j7a/d9xz/v3Xn32zernefPHdy2/zrzafb/J1UKMn+4rp6hqQ0OhxgbShwiNSeIQN8iKiWbjRxssH7tlj/E/fxH9Vn6b453Vrin/RqavMt3BVlHkJ/Qz0Pjb+63y1b/yLLzoKT7uWlzV0FsQPGh3qJXNsvZc9pVs84tuKw8XFY8MeOv6RqcYMyo+IfuneB6C/jN0n6Hm7yLPbs/w2n+fr9WyVv038DfkJ98WxqdYF7v249i6P1JNgpsVXWOMb8ZvPXjEw1Xzk+ou+FN9Fiq4TU63ldXsbyokUOf8VL15vC0s3pofBlD+MFbkcZz343uK6zveNM5E/MF73s4c465E+dWum7XEyd2KqewzHRl+R01fk/F94YYzyfit4bRQ5/I3laL1mU508Vg7SRCQnalEO8rouynJ6LcpBXlfF/Si5zf3Z0r2nT4ML7vEQBId3Vxw3A9ILcUPA8fqMANcj3Bhwmi8FtH5T/GTt+RH4Mp1Aoshp0b8Lrj0IWn/N/k1IL8Sh79m/6Hv2L/oee0sGzb9Ct69/T0zVvz3iJzrs26MLvfvsO0dS7gdR1usUP8fEyB/Al+kEtBgJiV9IMjlG5B5MeO1zt4t01t62zxXpdL0630y3R5/FeTa9XB9yrhA7eqQL+kRiAr9re0hE9D+5UWI3Jl8tj7WXQMubuMG+sMG+ULHvRY19v7nR0v68h7wTU60fAeHQRx3Cafuj8JCYinbYIGuBeWdh6cb0aZBFpM8vbrR2RU6Y5Kict7nOWegCrs2zrNUjBj1Q1zv/FWW/DgEXKvR8ZzJS6LUaNzHVPTIiXtpZEdf0hnQVH/YUeuTHcfyrG61v3g/K+mFODUh3tD0mnNYza317Ajr/7p49nzMP3usCwmEe8tlv3z616c9wba8TXxy613EPhLi+YodWh7okD/NW+L+KvMX/ojlvMUdDhZ7zdleeXxf348RU15LjG3MmIRzK7RMO1/2G5GG8yNpgztTdF2pnSjvvT+CH64j7B87lPVDo/wZd/nLPJ6Zazzi+tLrEuhij1726czPHo8caMtNqSECyPfU7e9+TifyBqea7j3uymPThGOqQfxJPa9NUA7R7q7e2v2emumaon/DSemAt3rnWNvWDWq3VagnXmX1qidZzaLVkaA7rlbU6wXUE6f9xo8V3grL9KI/rshZTWi0Q+kShR/+KrtoemBCu7v/IutiKG/Rq2l80vTD2cC7L3mWD9n9r03niFe7xc22PR9t5j2/qtS3wGowVeq3/nhA9+lzLS+59Ue6QcJhPnLN1fbHkS9P+iHVWegftf68e8JUeoO37iNX8/MvVbJ6nm8y+TnfdR5yITgXYVZTn9N27nNGZXvhFRD8KHu19BrF1R6vIs3TvNdAFNeMdD+Vbtyh/S4oqfVhU6UX2oKjqKLgh4DA3LIzcO/oLeYkeEdG/C7XZQgxzZP5EkR+T/JLeyje+Dx4q9EOF3q7PqZv0cOcBstvua+5kEn/8xrpJ7Pi459um1GKVL7LscpZtZtl8V179C7AvxzWFLQAA","debug_symbols":"tZjdbuM4DIXfxde5EClSP32VQVGkbToIEKRFpl1gUfTdV4x47GQAG11n5ibnSxN/lmhKdvM5PO8eP34+7I8vr7+Gux+fw+Npfzjsfz4cXp+27/vXY/vr5xDshdsrbwamHtwj9pAe2iP1yD1Kjzrc6WaIoQf14B7NQqFl01D7blTP5NmOJdkMEjzJkz2jp3iqZ/LMnm0olFvWnho8ydMm1c6XbALtfcqexbP2zMGTPNkzeoqnerovm6+0LJ61Zwme5Mme0VM81TN5uq+4r7ivuq+aL7Vkz+gpnuqZPLNn8aw9KQQAARhgzmogAAUkQAYUQHWgACAAA2AmmAlmgplgJpgJZoaZYWaYrWsjGTRzZAMFJEAGNHOMBtXBergDARgQAQJQQAJkgJnFoDpYw0Y1sO9Yea1lO1QHa9oOBLCzZwM7VzFIgAwogOqQAoAADLBZWKGSABSQABlQANXBlocEAwIwIAIEoIAEyIAmFLtMtj46EIABESAABSRABhQAzBVmWypil9vWSocIEIACEiADUN7q5eUQAASwL0fbQe2kYkAABkSA9E5g6/kOCZABBVAdrOc7EIABEQAzw8wwM8wMM8NsrX4evLW6nP+igORjtsbuUADVwXZuSQYEYIBNORsIQAEwC8wCs8CsKKaimIpiKoqpAlAAzHoWfn1tBtzxHt5Pu53d8C5uge3G+LY97Y7vw93x43DYDP9sDx/nL/162x7P+b49tU9b2+6Ozy2b8GV/2Bl9baajw/yhnAv50VwCjwK9NtC8oW240Q1tO42joa3nbyvaGoGiXYdZRZxXqFZUIRWWSRHylULmFTmhEjmXSZB5VS0vKvFbLdNSIay3vZY5zA4iL8xCi2AaKUy1TPXKUBYMseCCZmGeM9SlacScxnlIqHOOxXnkaR4c5gy00Faa2Q1apiFEid++oJXQl1wlzS6O+AdWR7x9eZDevj4o/c0FcllPzbP1LLevEKo3LxEON68Rpj+wSBaG0R65UM+LvTuyXo9iobdyHeuZa536k0u5dixsnDGjtSROncXXF5UXmrM9OGAQ7YkhzioWelPt1t3XupQ1gjQOIS2MYGkSkdAS7XElrVJkQSU562wpY/irivZsjeXRVhivUuSKy9GentMqRY3jxnm59/K3H23a/4YoRfsXsK4xkMq02fAqQxnXOIdVYxDGrkuXO83/MKiMs9BMqwx1vBaJ4hpDnK5m1FWziGm8CcayZhZtrx93fVlxfB3v5DWv6cfK2GGqrDp/wfivNuo14//t+Pv2bvu0P139/vZlptN++3jY+duXj+PTxafv/77hE/x+93Z6fdo9f5x2Zpp+xGsvPzjJhove288w7a3WTRJ7Q/ZZWyTthnP/ZUP5Dw==","names":["get_profile_data"],"brillig_names":["get_profile_data"]},{"name":"get_token_id","hash":"446952354613133724","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzYobRxDu2dFIGmkVKU4eZGZXWu3eBF5vcgvETzCRtIGE4CQkuQXmmEseIwGDX8IHv4XBYPDB+OKbwQZj9arL++mbmpEWdfunQPRMV3VVdf11TSsya4jcz0IL5hhkbubGbD/IPfLKIkXPxk1oC966MXXjAeBjjxtPFV188T/Nxmepqe7Zo/7HqeMZ0j7CMwD/rOP4fFNe8+e9WBiYzeTANV2Hl+dbsMbCt8Bb1oe028rvp4Htln9l6m0lMXe7DCL7WPifA3/jj38m/O+E0f89/4sw/PO+Wcfh0uix5tNWA7Ppe/SHyMWDxOM+x1r9jmkO5fdM2JyISJ7ow/YRP4jtEkXXkYLDXEMcykkUOR+KF/vbwsyN2c3giCcGik4cZ22Y9+jXya5xJvJ7io1CxFmb9Knzmdiuo+g6UnAcGx1FTkeR8znxkhgdmGrMRjWjyOE5lsP1DuXEHuUgTUJyEo9ykJeciSKn7VEO8jov16PkNvp15sZsP5gI7y7o5jFPz8RG3IOj/Xogm2OyT3oh7hBw7PsB4NqE+wJwmA8MMb2jnez4M/BlOoFUkePRvqcD0guBba/Zt0d6IQ5tz/ZF27N90fZaHgho9hU77WrfoSKnTfKFZ4vmBc7L9ZgQ/V03Bs6R7BbwNSQrVfbnUfaUz0WEgbJvjp+U9EIcxhbHD8YW+otBixGhs3r9D3yZTkCLkZj4af0q8pDvlKGyvlWjX6LQ8vkt77vGptDP3Wht8MQ925z82j0Xf/3y3a/ze4vl3T/u/V78uPx+WSyiGj3Z7kwX19BZH4r/W+Um/czNZ3vA9PT6Iisur+3AMYHyE6L/yb1jLMrY2kPPy2mRXx4Xl8WkWCzG84Jz2MIB2Am/RSWG2qSLPNfVLK034Jr1mxs/Zs3S9hc37C9W9ne7Zn//utHS/rmDvKGpnr8R4dBGB4TTzk7hITGVbNmD+AJrnoWZG7P9IE9In7/daPf11D1LfZS8QJuEzOEVjK0ez0AP1PXKfuWmXfuAixV6rqGHCr12voyIHs+liN6RF/r0gnQVG7YVeuTHcfyPG61t3pB+mFM9wuHeu4TTvoW077EUdP7PPQe+P7hxnxERDvOQv+l37WGb/szR+gyxxU37DO4/Ead9y2t1qEXyMG+F/8fIW/yO47zFHI0Ves7bbXl+p1yPI1P1Jcc35kxKOJTbIRz6/YLkYbyIbzBn+FzX7h1kD3bdfeCHfsTzA9fyGSj0D0GXB+55aKr1jONLq0usizF63Wu6+8R4DFhDxloNiUh2oH5n5/tPkd8z1XwPcf/ZJX04hvheOg3km6YaoN1HfmnW9zDsM9RPeGk9sBbvXGub+kGt1mq1hOvMLrVE6zm0WtI3N+uVtTrBdQTpH7nR4h/T/lEe12UtprRaIPSpQo/2TUg25kRKOK0HaIqtboNeTeeLphfGHq5l2dv2wDlfJ+MTOOMn2hmPe+czvqnXtsA+GCj0Wv89Inq0uZaX3Pui3D7hMJ84Z+v64se0j23/M0nvoP2f2Qa+0gP4vo/Ijhbzk+XR6spkepIfnS223Uf4lj+fnPwwH0+KbJlfabNN/lBsUl7jMf4tdNy73BEwvfBLiP650K5+L9yzxFWiyLN0rxvooprxiocy1yo359KySh+XVXqR3SurOgquDzjMTQuH7h3thbxEj4ToX7l38UkX1sj6kSK/S/I39FbmMEeZV6zMCb31z0vh50bcu+++6kom8cc51k1iJ0RerVJqOi+meX42zpfjfLItr94BC2u3U8UoAAA=","debug_symbols":"tZfdauMwEIXfxde5kGYkjdRXWUpJ23QJhLRkk4Wl5N13JqPj1As21LA3PV/i6ot+RrL9Obzuni8/n/bHt/dfw8OPz+H5tD8c9j+fDu8v2/P+/ajffg7B/sQ2PMhmoOARPciDPZJH9ige4lE93MJuYbVUDfJgj+SRPYqHeFSPdosUPNyS3JLcktyS1FI0iod4VI92ixw8ogd5sEfycEt2S1ZL06ge7RYleEQP8mCP5JE9iodbiluKW8Qt4hZxi7hF3CJuEbeIW0QtMWqqJtJmqKFn7Ek9VRVZM/XMPUtP6Vl7Ns8Wesae1NN8STP1NJ8ubCs9pWftqT7SfsSgXxAb2DfaMsYAiAACMEB/hrKBeqkYVEDrYAXqEAEEYEACaH9JDApAABXQOljROkSAmasBAxIgAwpAABXQOlgFUzMgAAMSIAMKQAAV0DpYTTvAnGG2yuZgkAAZUAACqIDWoWB6C6a3YHoLpteKmbUaoxUw23JbCTskQAaUXglWyg6oDavmG1g5O0QAARiQABkAc4W5wlxhbjA3mK2kb523mubbNwKovc9WxgYUAiACbMjJgAEJYEPOBgUggIrmMEeYI8yRAAxIgAwoAAHATDfh9boZcLY/nU+7nR3tXw57vQV8bE+743l4OF4Oh83we3u43P7p18f2eMvz9qRXtRZ2x1dNFb7tDzuj6+beOsw35Vhqb826NqMgTw1x3hBD4W7Q44JHg5bgREELily6QZdsFDDliYDnBdJS7gZp7d4HqnWiSAsTIZjFxOkumE5Dnm9PuvAYBDHPGcq8ISfpgpzqivZl7ECZ//2lEXDEQhJTWWOQhEkkybOzGMN/VWhFJxSkfKmn7yikYS30mCurFI3HbdHSvGLBoEckDJTy7MaKCyuSc8N0lkr36YxBpo6FupISsbfkXpd6P1l1xrQ6e8bUpbkYN7g+b4TZXsS2MI481oWUcJ/P0qbn1MJIhCsWVRLRrGJxVVnKOJQU2pxkqbbCuEn04a3N1daSQZ847vNJqwx1HAaFVX1IhMKKXyfzG4acxlFkiasMbdylJfIaA9/3OedVo+Bxe+jj6JpRaDmPhZ1WtG/jHbxJWdOesDlbWvX7Ff2f3LzX9P+f9o/6afuyP03eoa9mOu23z4dd//h2Ob58uXr+84EreAf/OL2/7F4vp52Z7i/i+ucH6aM85fBoL1D6MYa40Wci+xjtao56lR+v1pm/","names":["get_token_id"],"brillig_names":["get_token_id"]},{"name":"get_total_profiles","hash":"13546856498380299470","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUyw6CMBBsBaMVuaCJfkYJIBw5eDfRL2h4eDIYYzzz6ZZkmy6NEBPKJM1u2TI7Ozwo0aAQXdIHJX+Ajlw7QmQQF6juyJXDnk9DyIy+NvkzHifsx3wW9UcMOOk8/Fzxz+Q/XwHPudX8eBbVdy3XFuU+5P7I/XNql882ZojTNr9EuBvQ38EDHwJjVvxNWdJx6nzfA5f4PC7Poimr27t5iXt1rUSJe5p6iVHDOR0455Ph98Aj+p/gtn1fcgvzphnnqq8D/EuifcdwUR2fP8B+g/Sr6E7QWacirCNRi0SUZVyIwOAnhk9f8cSFwakFAAA=","debug_symbols":"fdJNroMgEADgu7Bmwa9Yr9I0BhUbEoKGwkteDHcvNGJlYTeMODMfENjApIbw7LWdlxfo7hsYnDZGP3uzjNLrxaa/G0B5wAx0HALMU4gRglLRe6dULji1JGiVTlkPOhuMgeBPmvApeq3SfqKXLmURBMpOKSZw1kblrwi/3ei6lQrM924qGDkAXgv4WsCYFQFj8d0CFqQiyDUheMt2QjSIH0RzqwT6Q6AtLQIj5Epgv45BRXOcg6FbZTzSTI7aVTcas+a0HIzap3Ow4ynr/9eSKS9idcuopuBUlk7PIo133EJCHzGv9gY=","names":["get_total_profiles"],"brillig_names":["get_total_profiles"]},{"name":"has_profile","hash":"226628994207949092","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzW7bRhBemqIkSlalpn0Q0pYs+yYgjttbgeYJWEluL2mKIih65L2XPkYLFOhL5JC3CBAgQA5BLrkFSBCttBN/+jikZGg3PwMIS+7MzszO3w5XkdlA5H4WWjDHIHMzN2aHQe6RVxYpejZuQlsQuYfUvR8BPva48VTRxRf/82x8kZrqnj3qf5o6niHtIzwD8M86js935Q1/3ouFgdlODlzTdXh5vgNrLHwPvGV9SLut/H4e2G75N6beVhJzd8sgsk+F/yXwN/74Z8L/Xhj9P/C/CsM/75tNHP5i9FjzaauB2fY9+kPk4kHicZ9jrX7HNIfyeyZsTkQkT/Rh+4gfxHaJoutIwWGuIQ7lJIqcj8WL/W1h5sbsdnDCEwNFJ46zNsx79Otk3zgT+T3FRiHirE361PlMbNdRdB0pOI6NjiKno8j5knhJjA5MNWajmlHk8BzL4XqHcmKPcpAmITmJRznIS85EkdP2KAd5XZabUXIb/TpzY3YYfOhdu6Cbxzy9EBtxD47264Fsjsk+6YW4Y8Cx7weAaxPuK8BhPjDE9I52suOvwJfpBFJFjkf7ng9ILwS2vWbfHumFOLQ92xdtz/ZF22t5IKDZV+y0r32Hipw2yReeLZoXuCw3Y0L0990YOEeyO8DXkKxU2Z9H2VM+FxEGyr45flLSC3EYWxw/GFvoLwYtRoTO6vUv8GU6AS1GYuKn9avIQ75Thsr6Vo1+iULL57e87xubQj93o7XBM/dsc/Jb91z88eCH3+YPF8v7jx7+Xvy8/HFZLKIaPdnuTBfX0MVGtyXSxqa671jhgeuOiIeNFYmzVrnNZ+bmswNgen5zYRY7/ompxh7KT4j+gXvHmJexdYCe19Mivz4trotJsViM5wXXCgP24m9eidU26SLPdbVR60G4Nj5y46esjdr+4ob9xcr+7tbs7283Wto/95A3pPUY00PFRkeE085o4SExlezYg/gCa6uFmRuzwyBPSB8ndr2v5+5Z6rDkBdokZA6vYGz1eAF6oK5r+5Xbdu0DLlbouVYfK/TaOTYiejz/InpHXujTK9JVbNhW6JEfx/FfbrS2eUf6YU71CId77xJO++bSvvtS0Pkf9xz4nuLW/UxEOMxDvjvYt1du+tNI62fEFrftZ7jPRZx2Z6DVoRbJw7wV/p8ib/F7kfMWczRW6Dlvd+X5vXIzjkzVlxzfmDMp4VBuh3Do9yuSh/EivsGc4XNdu9+QPdh1/wE/9COeH7iWz0Chfwy6/O+eh6Zazzi+tLrEuhij172mO1aMx4A1ZKzVkIhkB+p39r5nFfk9U833EPesXdKHY4jvv9NAvmmqAdq959dmc9/DPkP9hJfWA2vxzrW2qR/Uaq1WS7jO7FNLtJ5DqyV9c7teWasTXEeQ/okbLf4p7R/lcV3WYkqrBUKfKvRo34RkY06khNN6gKbY6jbo1XS+aHph7OFalr1rD5zzdTI+gzN+op3xuHc+45t6bQvsg4FCr/XfI6JHm2t5yb0vyu0TDvOJc7auL35K+9j1f5b0Dtr/pm3gKz2A7/uI7GQxP1uerK5Mpmf5ycVi132Eb/nzydlP8/GkyJb5Wptd8odik/IGj/FvoePe5Y6A6YVfQvQvhXb1e+WeJa4SRZ6le9tAF9WMax7KXKvcnkvLKn1cVulFdq+s6ii4PuAwNy0cu3e0F/ISPRKif+PexSddWCPrR4r8Lsnf0luZq9wfKvR9hd7657XwcyPu3XdftZZJ/HGOdZPYCZFXq5Sazotpnl+M8+U4n+zKq/c7bidOLSkAAA==","debug_symbols":"tZjbauNKEEX/Rc9+6Kq+VHd+ZQjBSZzBYJzgsQ8cgv/9VLl6S/YBiRnBvGQvWdFSX6pbsr+H993r5efL/vjx+Wt4+vE9vJ72h8P+58vh82173n8e9dPvIdgfasOTbAYOHuTBHtEjeWSP4iEe1cMt0S1RLVWDPaJH8sgexUM8qke7RQoebkluSW5JbklqKRrFQzyqR7tFDh7kwR7RI3m4Jbslq6VpVI92ixI8yIM9okfyyB7Fwy3FLcUt4hZxi7hF3CJuEbeIW8QtohYiTdUQb4YaelJP7qkqipqpZ+5ZekrP2rN5ttCTenJP8yXN1NN8OrGt9JSetaf6WNtBQYWcDAjAHcg+yQb2STGIgATIgALQO7HegaxAuRoQgAERkAAZUAAC0CZzM2gdrGgdCMCACEgANcdgUAACqIDWwQrZgQAMUGEkgwwoAAFUQOtgNe1AAAZEAMwZZqvvaLNjFe5QAa2D1bkDARiA4S0Y3oLhLRheK+kYDeymNt1WyA4CqIDWK8HK2QG1YQXtEAEJkAEFIIAKgLnB3GBuMDeYG8xW1bfGW1nHbJthAJC3ma2MHSIgAazLxaAABGBdvu2urQMFAMwEM8FMMFMGFIAAKqB1sAXiADPfhNfrZsC2/3I+7Xa26989B/Tp8LU97Y7n4el4ORw2wz/bw+X2T7++tsdbnrcnPatluzu+a6rwY3/YGV0309Vh/tIYUu1XxyCTID8aaN5AocRu0J0kjgatzgcFLyhy6QadzVEQOT8I4rxAWsrdIK1NbeBaHxRpYSAEo5h0ZkbB4zDk+et1ctEEnd44ZyjzhpykC3KqK64vYwPK/P2XehAJE8mRyxqDJAwiS54dRQp/VUGlJhSk3NXTnyikYS50ByyrFC2Oy6KlecWCQXdPGDjl2YVFCzOSc8NwlsrTcFKQR8dCXUkhrC2Z6lIfLKv2mEqze0xdGotxgeuLR5htBbWFfuSxLqSEaTxLe9ynFnoisWJSJTHPKhZnNUoZu5JCm5Msd0WmrnCYbcfClpmFsdvUqQ0xxd+dVQrjSqVwp+DffvboS2WaJpVXGeo4lhxWtSExqpvuZ/QPDDmNvchCqwxt3CoKxTWGOG02Ma/qRSzjZhPrml7omhpLMq24vo2vEU3KmusZO0RLq+5f0f6HN4g17f/f9c96tH3bnx6+41/NdNpvXw+7fvhxOb7dnT3/+4Uz+I3g6/T5tnu/nHZmmn4o0D8/9Im94Ryf7XudHuri3FBodkh2Vhca5/J8tcb8Bw==","names":["has_profile"],"brillig_names":["has_profile"]},{"name":"is_profile_private","hash":"10452339316687552505","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzY7jRBBuj+MkTiYkLDyIPeNMZm6RdnbghsQ+gUkycFkWoRXi6DsXHgMkJF6CA2+xEhISB8SF20q72nTStfPlc9nJKN37U1LUdld1fdXVVdXtTmS2FLmfpQ70MUnf3LXZcZR71JVFip2tk9AGRO4hde8nwI89TjxVbPGl/zIrrlJTn7NH+89TpzOkf0RnAP1Zz+n5rLrTz3OxNDK7yYFj+o4vzw9gjKXPQbeMD+m39bpfBvZb/olp9pXE3MMqCPa56L8G/caf/kz0Pwpj/xv9N2H050OzjcNvjB5rPn01Mrtrj+shuLiReJxnodXvmPoQf2DC5kREeGIP+0fWQXyXKLZOFB7mGvIQJ1Fw3pYuXm9Lc9dm96Mz7hgpNnGcdaHf47pOD40zwR8oPgoRZ12yp2nNxHc9xdaJwuPY6Ck4PQXnQ9IlMToy9ZiNGlrB4T7G4XqHOLFHHJRJCCfxiIO6ZE8UnK5HHNR1XW1byW1c17lrs+OoEN19sM1jnl6Jj/gMjv4bADbH5JDsQt4p8HjtR8DrEu8j4GE+MMX0jn6y7begl+WEUgXHo38vR2QXEvte8++A7EIe+p79i75n/6LvtTwQ0vwrfjrUv2MFp0v4orND/ULX1bZNSP6xawPnSPYA9BrCSpX5ecSe8b6INFLmzfGTkl3Iw9ji+MHYwvVi0mJE5Kxdv4JelhPSYiQmfdp5FXXId8pYGd9psC9RZHn/lvdDY1PkF661PvjLPduc/NQ9lz88+eK7xdPl6vGzp9+XX6++XJXLqMFO9jvLxQ1ysdF9ibKxqc87VnTguBPSYWNF4qxT7eqZu/7sCJpd3l2YxU5/Yuqxh/gJyT9x7xjz0naOsPN2Vua35+VtOS2Xy2JRcq0w4C/+5pVY7ZIt8txUG7UzCNfGZ659l7VRm1/cMr9Ymd/Dhvn97For++MBeGMajzE9Vnx0QjxtjxYdElPJnjnIWmBttTR3bXYc5QnZ42A38/rbPUsdlrxAn4TM4TUV1o5/wA60deO/atevQ+DFijzX6lNFXtvHJiSP+19E76gL1/SGbBUfdhV51Mdx/JNrrW9ekX2YUwPi4dz7xNO+ubTvvhRs/sU9B76nuPd5JiIe5iHfHRx6Vm7700g7z4gv7nue4XMu8rQ7A60OdQgP81b0v4u8xe9FzlvM0ViR57zdl+ePqm07MfW15PjGnEmJh7g94uG63xAexousDeYM7+va/YbMwY77DfThOuL+gWN5DxT5P8CW393z2NTrGceXVpfYFmP0utd2x4rxGLCGFFoNiQg70Hnn4HtWwR+Yer6HuGftkz0cQ3z/nQZam7YaoN17fmy29z28Zmif6NLOwFq8c61tOw9qtVarJVxnDqkl2plDqyVDc7+zslYnuI6g/J+utfznNH/E47qsxZRWC0Q+VeTRvwlhY06kxNPOAG2x1W+xq21/0ezC2MOxjL1vDpzzTRjvwR4/1fZ4nDvv8W1nbUu8BiNFXjt/T0gefa7lJZ99EXdIPMwnztmmc/Fzmse+/7Pk7KD9b9oFvXIG8H0fkZ0tFxers/WVyewiP7ta7ruP8I2/mF58tSimZbbKN9bswx+LT6o7Psa/pZ57lzsClhd9Ccn/K7Lr33/uWeIqUfCs3MsWuaih3ehQ+jrVbl9a1eXjqi4v2IOqbqPwhsDD3LR06t7RX6hL7EhI/oV7lzXpwxgZP1Hw+4S/Y7fSV7s/VOSHirxdn/9Fn2tx7r7PVRtM0o99bJvEToi8WqfUbFHO8vyqyFdFPt2XV68BrsLsui0pAAA=","debug_symbols":"tZjbauNKEEX/Rc9+6Kq+VHd+ZQjBSZzBYJzgsQ8cgv/9VLl6S/aAxIzgvGQvWdFSX6pbsr+H993r5efL/vjx+Wt4+vE9vJ72h8P+58vh82173n8e9dPvIdgfasOTbAYOHuTBHtEjeWSP4iEe1cMt0S1RLVWDPaJH8sgexUM8qke7RQoebkluSW5JbklqKRrFQzyqR7tFDh7kwR7RI3m4Jbslq6VpVI92ixI8yIM9okfyyB7Fwy3FLcUt4hZxi7hF3CJuEbeIW8QtohYiTdUQb4YaelJP7qkqipqpZ+5ZekrP2rN5ttCTenJP8yXN1NN8OrGt9JSetaf6WNtBQYWcDAjAHcg+yQb2STGIgATIgALQO7HegaxAuRoQgAERkAAZUAAC0CZzM2gdrGgdCMCACEgANcdgUAACqIDWwQrZgQAMUGEkgwwoAAFUQOtgNe1AAAZEAMwZZqvvaLNjFe5QAa2D1bkDARiA4S0Y3oLhLRheK+kYDeymNt1WyA4CqIDWK8HK2QG1YQXtEAEJkAEFIIAKgLnB3GBuMDeYG8xW1bfGW1nHbJthAJC3ma2MHSIgAazLxaAABGBdvu2urQMFAMwEM8FMMFMGFIAAKqB1sAXiADPfhNfrZsC2/3I+7Xa26989B/Tp8LU97Y7n4el4ORw2wz/bw+X2T7++tsdbnrcnPatluzu+a6rwY3/YGV0309Vh/tLIDVfHSDQK8qOB5g0USuwG3UniaNDqfFDwgiKXbtDZHAWR84MgzgukpdwN0trUBq71QZEWBkIwDklnZhQ8DkOev14nF03Q6Y1zhjJvyEm6IKe64voyNqDM33+pB5EwkRy5rDFIwiCy5NlRpPC/KqjUhIKUu3r6G4U0zIXugGWVosVxWbQ0r1gw6O4JA6c8u7BoYUZyHpd3qTwNJwV5dCzUlRTC2pKpLvXBsmqPYZ7dY+rSWIwLXF88wmwrqC30I491ISVM41na4z610BOJFZMq6a4nvysWZzVKGbuSQpuTLHdFpq5wmG3HwpaZhbHb1KkNMcU/nVUK40qlcKfgP3726EtlmiaVVxnqOJYcVrUhMaqb7mf0Lww5jb3IQqsMbdwqCsU1hjhtNjGv6kUs42YT65pe6JoaSzKtuL6NrxFNyprrGTtES6vuX9H+hzeINe3/7fpnPdq+7U8P3/GvZjrtt6+HXT/8uBzf7s6e//3CGfxG8HX6fNu9X047M00/FOifH/rE3nCOz/a9Tg91cW4oNDskO6sLjXN5vlpj/gM=","names":["is_profile_private"],"brillig_names":["is_profile_private"]},{"name":"is_username_available","hash":"12406496221012549179","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzY7jRBDujOMkTiYkLDyIPZNMZm6RdnbghsQ+gUkye2G1CBAc8ZkLjwESEi/BgbdYCQmJA+LCDQkk0pOunS9fPjsZxWZ3S4ra7qquqq6/LndabgOt8PPQhjkGm5uHMT0Oshp5pS2hZ+UmqhYk4fUEpqMaN54IXerif5lOrhK3u+ca9T9PAs8m7WM8G+CfdgOfD4p7/rwXD0O3nRy4phfw9vwI1nj4EHjb+ibttvb7ZcN2y95z5baymHtcNCL73PhfA39XH//U+D9pRv9X/G+a4Z8N3CYOnzkda3Xaaui2fY/+MLl4kNS4z4mq3xHNofy+azYnWiTP9GH7mB/MdrHQdSxwmGuIQzmxkPN/8WJ/e5iHMX0YnPHEUOjEcdaB+Rr9Oj00zkx+X9ioiTjrkD5lPjPbdYWuY4Hj2OgKOV0h523iZTE6dLsx2yoZTQ7PsRyudygnqlEO0sQkJ65RDvKyM9HkdGqUg7yui81ouY1+nYcxPQ5e9ZY90K3GPL0yG3EPjvbrg2yOyQHphbhTwLHvh4DrEO4dwGE+MET0jnby43Pgy3QGiZBTo30vh6QXAtte2bdPeiEObc/2RduzfdH2Kg8MlH3NTofadyTkdEi+8WzTvMF1sRljon8axoZzJH0EfB3JSsT+apQ943MRYSj2zfGTkF6Iw9ji+MHYQn8xqBgxOq/XD8CX6QxUjETET/WryMO+U0ZifbtEv1jQnpTIPTQ2jW4RRm+DX8Ozz8n3w3P+1fOPPlu8WK6efvni8/zZ6uNVvmyV6Ml2Z7qohI7xseDL/ZfygY8Fi6N2sY2fh/n0CJhd3l+IRcW9rhxbKD8m+k/DO8a0je0j9Lyd5dnteX6bT/PlcrLIuRY4sCF/01osdkgXey6rfarH4Nr3RRhfZ+1T+4sq9heJ/T0u2d93YfS0Xx8gb0TrMZZHwkYnhFNnsPGwmIr37MF8gbXTwzyM6XGQxaTPN2H0+/otPFudtbxAmzSZw2uYeD1+Bz1Q1zv7Fdt2HQAuEvRci08FvTqnxkSP51uL3pEX+vSGdDUbdgQ98uM4/jaM3jb/kn6YU33C4d57hFPfVOq7LgGdvw/PDd9DPLhfaREO85DPpkN74ao/hVS/YrZ4aL/CfSzi1J2AqkNtkod5a/xfR97i9yDnLeZoJOg5b/fl+ZNiM47dri85vjFnEsKh3C7h0O83JA/jxXyDOcPnurq/sD34dT8CP/Qjnh+4ls9Ao/8ZdPkpPI/cbj3j+FJ1iXVxTte9qjtUjMcGa8hE1ZAWyW6o3zn4HtXk991uvjdxj9ojfTiG+H47acg3VTVA3Wu+6zb3Oewz1M94qR5YxTvX2qp+UNVaVUu4zhxSS1TPoWrJwD2sV1Z1gusI0v8SRo9/SftHeVyXVUypWmD0iaBH+8YkG3MiIZzqAapiq1ehV9X5ovTC2MO1LHvfHjjny2S8AWf8VJ3xuHc+46t6bQ/sg6GgV/33mOjR5iovufdFuQPCYT5xzpb1xS9pH/v+r7LeQf0v2gG+1gPUfR+Rni0XF6uz9ZXJ7CI7u1ruu4+oW/5ievHJYjLN01V2p80++SOzSXGPx/j30A3vdkfA9MYvJvo/jHb9+zM8W1zFQp6n+6eCrlUy3vEQc+1iey4pdumjYpfeZPeLXR0NNwAc5qaH0/CO9kJepkdM9H+Hd/NJD9bY+rGQ3yP5W3qLOcxR5hWJOaP3/vnL+IUR9153X3Unk/jjHOtmsdNEXq1TarbIZ1l2NclWk2y6L6/+A2ve3tcNKQAA","debug_symbols":"tZjbTiM5EIbfJde5cJUPZfMqI4QChFGkKKBMstIK5d23qst/d7JSt3Z6NTf8X2j8xYdyBfjevO9frz9fDqePz1+bpx/fm9fz4Xg8/Hw5fr7tLofPk373exPsC7XNk2w3HDzIgz2iR/LIHsVDPKqHW6JbolqqBntEj+SRPYqHeFSPNkQKHm5JbkluSW5JaikaxUM8qkcbIgcP8mCP6JE83JLdktXSNKpHG6IED/Jgj+iRPLJH8XBLcUtxi7hF3CJuEbeIW8Qt4hZxi6iFSFM1xNtNDT2pJ/dUFUXN1DP3LD2lZ+3ZPFvoST25p/mSZuppPj3YVnpKz9pTfazzoKBC1gFEBtlA1VwMGBABCZAB6mcxMKGeM1ldOhCAARGQABlQADpRbgYV0DpYrToQgAERoOYYDDKgAARQAa2D1a8DAVQYySABMqAABFABrYOVsgMBGABzhtmKOtpZWFk7CKACWgcrbwcCYHsLtrdgewu21+o4RgN7Uztuq16HAhBA7ZVgRTxARW1YGTswIAISIAMKQAAwV5gbzA3mBnOD2Wp5mLwVcxy+0xzYqtfmzIEADIgAW3IxyIACsCUPvbQCWgeCmWAmmAlmSoAMKAABVEDrwDDzILzdths0+ZfLeb+3Hn/X9fWz4Gt33p8um6fT9Xjcbv7aHa/DD/362p2GvOzO+lTLdn9611Thx+G4N7ptp9FhfmjMJffRsYRJkB8NNG+gUGI3aAOJo0GL8kHBC4pcukEPcRREzg+COC+QlrAKaW2aA9f6oEgLGyHYxaQnMwoetyHPj2ctBSyCY5wzlHlDTtIFOdUV48s4gTL//ksriISD5MhljUESNpElz+4ihT+qoFITClLu6ul3FNJwFtr4yipFi+O1aGlesWDQpgkDpzx7sWjhRHJu2M5SedpOCvLoWKgrKYS7JVNdkvCqHsPzPaYu7cV4wUkPdXYW1BbWkce6kBKm/SztsU8trERixaFKYp5VLJ5qlDIuJYU2J1mqLf3FoY2OLHfX5LFl8kLPbGPTbY0mgfznjw4K41WlUNtchS+vI02nyqsMddxMDqvmkBjlTfdH+huGnMZVZKFVhjb2ikJxjSFO3SbmVauIZew2sa5ZhV6q8XqlFePb+HtEk7JmPKNFtLTq/WsYL0T8f/P/1/hnfbV7O5wf/qS/mel82L0e9/3lx/X0dvf08vcXnuBfAl/nz7f9+/W8N9P0fwH98kM/vbec+dn+sNOXFOJWb6W9JHuaoz7NzzebzD8=","names":["is_username_available"],"brillig_names":["is_username_available"]},{"name":"lookup_username","hash":"12778776916341039517","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzYobRxDu2dFIGmkVKU4eZGZXWu3eBF5vcgvETzCRtIGE4CQkuQXmmEseIwGDX8IHv4XBYPDB+OKbwQZj9arL++mbmpEWdfunQPRMV3VVdf11TSsya4jcz0IL5hhkbubGbD/IPfLKIkXPxk1oC966MXXjAeBjjxtPFV188T/Nxmepqe7Zo/7HqeMZ0j7CMwD/rOP4fFNe8+e9WBiYzeTANV2Hl+dbsMbCt8Bb1oe028rvp4Htln9l6m0lMXe7DCL7WPifA3/jj38m/O+E0f89/4sw/PO+Wcfh0uix5tNWA7Ppe/SHyMWDxOM+x1r9jmkO5fdM2JyISJ7ow/YRP4jtEkXXkYLDXEMcykkUOR+KF/vbwsyN2c3giCcGik4cZ22Y9+jXya5xJvJ7io1CxFmb9Knzmdiuo+g6UnAcGx1FTkeR8znxkhgdmGrMRjWjyOE5lsP1DuXEHuUgTUJyEo9ykJeciSKn7VEO8jov16PkNvp15sZsP3jfW3ZBN495eiY24h4c7dcD2RyTfdILcYeAY98PANcm3BeAw3xgiOkd7WTHn4Ev0wmkihyP9j0dkF4IbHvNvj3SC3Foe7Yv2p7ti7bX8kBAs6/YaVf7DhU5bZIvPFs0L3BerseE6O+6MXCOZLeAryFZqbI/j7KnfC4iDJR9c/ykpBfiMLY4fjC20F8MWowIndXrf+DLdAJajMTET+tXkYd8pwyV9a0a/RKFls9ved81NoV+7kZrgyfu2ebk1+65+OuX736d31ss7/5x7/fix+X3y2IR1ejJdme6uIbO+lD83yo36WduPtsDpqfXF1lxeW0HjgmUnxD9T+4dY1HG1h56Xk6L/PK4uCwmxWIxnhecwxYOwE74LSox1CZd5LmuZmm9Ades39z4MWuWtr+4YX+xsr/bNfv7142W9s8d5A1N9fyNCIc2OiCcdnYKD4mpZMsexBdY8yzM3JjtB3lC+vztRruvp+5Z6qPkBdokZA6vYGz1eAZ6oK5X9is37doHXKzQcw09VOi182VE9HguRfSOvNCnF6Sr2LCt0CM/juN/3Ght84b0w5zqEQ733iWc9i2kfY+loPN/7jnw/cGN+4yIcJiH/E2/aw/b9GeO1meILW7aZ3D/iTjtW16rQy2Sh3kr/D9G3uJ3HOct5mis0HPebsvzO+V6HJmqLzm+MWdSwqHcDuHQ7xckD+NFfIM5w+e6du8ge7Dr7gM/9COeH7iWz0Chfwi6PHDPQ1OtZxxfWl1iXYzR617T3SfGY8AaMtZqSESyA/U7O99/ivyeqeZ7iPvPLunDMcT30mkg3zTVAO0+8kuzvodhn6F+wkvrgbV451rb1A9qtVarJVxndqklWs+h1ZK+uVmvrNUJriNI/8iNFv+Y9o/yuC5rMaXVAqFPFXq0b0KyMSdSwmk9QFNsdRv0ajpfNL0w9nAty962B875OhmfwBk/0c543Duf8U29tgX2wUCh1/rvEdGjzbW85N4X5fYJh/nEOVvXFz+mfWz7n0l6B+3/zDbwlR7A931EdrSYnyyPVlcm05P86Gyx7T7Ct/z55OSH+XhSZMv8Sptt8odik/Iaj/FvoePe5Y6A6YVfQvTPhXb1e+GeJa4SRZ6le91AF9WMVzyUuVa5OZeWVfq4rNKL7F5Z1VFwfcBhblo4dO9oL+QleiRE/8q9i0+6sEbWjxT5XZK/obcyhznKvGJlTuitf14KPzfi3n33VVcyiT/OsW4SOyHyapVS03kxzfOzcb4c55NtefUO7hwjrsUoAAA=","debug_symbols":"tZfdauMwEIXfxde5kEYjjdRXWUpJ23QJhLRkk4Wl5N13xqPjNAs21LA3PV/i6ot+RrL9Obzuni8/n/bHt/dfw8OPz+H5tD8c9j+fDu8v2/P+/ajffg7B/sQ2PMhmoOARPcgjebBH9ige4lE93JLcktRSNcgjebBH9ige4lE92hgcPNzCbmG3sFtYLUWjeIhH9Whj5OARPcgjebCHW7JbslqaRvVoY5TgET3II3mwR/YoHm4pbiluEbeIW8Qt4hZxi7hF3CJuEbXEqKmaSJuhhp6xJ/VUVUya3DP3LD2lZ+3ZPFvoGXtST/OxJvc0ny5sKz2lZ+2pPtJ+xKBfUDKwb7RljAEQAQRIAP0ZygbqpWJQAa2DFahDBBAgARig/SUxKAABVEDrYEXrEAFmrgYJwIAMKAABVEDrYBVMzYAACcCADCgAAVRA62A17QBzhtkqOwUDBmRAAQigAlqHguktmN6C6S2YXivmpNUYrYCTLbeVsAMDMqD0SrBSdkBtWDWPYOXsEAEESAAGZADMFeYKc4W5wdxgtpIeO281ncZvBFB7n62MDSgEQATYkNkgARhgQ84GBSCAiuYwR5gjzJEACcCADCgAAcBMo/B63Qw425/Op93OjvYvh73eAj62p93xPDwcL4fDZvi9PVzGf/r1sT2Oed6e9KrWwu74qqnCt/1hZ3Td3FqH+aaJ7SgYWyfONAnyvSHOG2IoqRv0uEiTQUvwTkELily6QZdsEiTKd4I0L5DGuRuktVsfqNY7BS9MhGAWOfFNcD8Neb496cJjEJTSnKHMGzJjJTLXFe3L1IEy//tLI0gRC0mJyhqDMCaRJM/OYgz/VRFLZRSkfKmn7yikYS30mCurFC1N26LxvGLBoEckDMR5dmPFhRXJuWE6S6XbdMYg946FupISsbfkVpd6P1l1xsj8GVOX5mLa4Pq8EWZ7EdvCOPJUF1LCbT5Luz+nFkYiqWJRhYlmFYurmqRMQ+HQ5iRLtRWmTaIPb22utpYM+sRxm09aZajTMCis6gMTCit+ncxvGDJPo8gSVxnatEtLTGsM6bbPU141ilSmfZ7qmlFoOU+FzSvat+kO3qSsaU/YnI1X/X5F/+9u3mv6/0/7R/20fdmf7t6hr2Y67bfPh13/+HY5vny5ev7zgSt4B/84vb/sXi+nnZluL+L65wfpozzl8GgvUPoxhrjRZyL7GO1qjno1PV6tM38B","names":["lookup_username"],"brillig_names":["lookup_username"]},{"name":"public_dispatch","hash":"4087543890207019340","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"3532100565774060828":{"error_kind":"string","string":"No profile"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6759731346603734577":{"error_kind":"string","string":"Profile exists"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15865011268275408360":{"error_kind":"string","string":"Username taken"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"sync_notes","hash":"12652482189573326285","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"nZPdioMwEIXfZa69MJo/fZVSStRYAiFKqguL+O47KclWF7KU3mQyzpzPo5lsMOhuvd+MG6cHtJcNOm+sNfebnXq1mMnh0w3KsJAa2roAQqFlGBi0AgOHttn3AlL/bfFah/YDALGz8tot0LrV2gK+lF2fTY9ZuWdclMdqWYB2A0YEjsbqsNuLl7rMS0lJiYxy3Avxi8DsBCF5iJA8IiSKEkCQk77K61nFop6x1zcQyt81IGuRDLAmZ4Dm9bRuop5y+ZEBSZOBRuYM8Lyel+kP8Ip/YqCpqghoapYzIP8xINMQifLPEVwxVb3xp9neA8ob1Vkd03F1/aG6fM+pku7G7KdeD6vXgXS4ILhecAir+rqHt/0A","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"toggle_privacy","hash":"16285515662737977760","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"3532100565774060828":{"error_kind":"string","string":"No profile"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZnbbts6EEX/xc95EOfCIfsrRVG4iVMYMJzATQ5wEOTfD0ecLdkFJKTK6Uv2ii0vk9TwouRt93D48frz+/H8+PRr9+Xr2+7H5Xg6HX9+Pz3d71+OT+f26ttu8B+Udl/S3Y6oB/eQHtoj97AepUcdg4cezSItmkVbcA/poT1yD+tRetQxZOiRenSLdIt0i3SLdIt0i3hbhpbeGLrb6RCZIr1X3JIjvV+tnaqROdIiS2TtmYfIFEmRHBm+HL4cvhy+HL4cPnNfbdl81IbNKJIjm49au00jc6RFlsjaswyRKZIiOTJ8JXwlfCV8JXwlfNV9uaX7WjvT0F5gdUgAAjBAAArIAAMUQA1IMCc3ZwcCMEAACsgAAxRADaABADPBTDATzF7iLA4ZYIACqAFe7B0SgAAMEADMDLOXPptDAdQAnwAdEoAADBCAAjIAZoFZYFaYFWaFWWFWmBVmhdlnBnsl+NSQwaEG+OTokADNLMmBAQJQQAYYoABqgE+TDgkAs8FsMBvMBrPB7NNFyKEG+IQRdkgAN3sd+hzpr2RADagEwDUV11QDFEB8inzuuJl87nQgQAHUgISLvcI7GAAXe9F2UAAuZpi9DjvgYq8Eyb6Y+1eYQwIQgAEC8K8oDv7t1aEGjPd9hAQgAAME4Mv24JABBiiAGuD3vUMC+FYw7j0MEIACMsAABVAD/HYrORCAAQJQQAYYoABqgK+UHWCuMFc3ewFUASggAwxQALUDDzG8PCQAARjgF/t+62um+j7qa2YHASgg9wLgsaJGKICoDfY1s0MCEIABAlAAzAQzwUwwM8wM83g68MaP54PxFQOUaPN4LhiPEAMgAbzL5sAAAXiXi0MGGABmgVlhVpgVg6kYTMVgKgbTF8YOBoA5j8L397sdTlnfXy6Hgx+yro5d7TD2vL8czi+7L+fX0+lu98/+9Dpe9Ot5fx7zZX9p77byP5wfWjbh4/F0cHq/mz89LH/UrFh8urSdchK0rfqjCmKTUBBXmhR62whaNkhhGKTIbMj1xsDLhqJG6IYWWzKs9UJSQi+EeakXHzVIXjLkZUM7xWgY2r2Y72bb024UtnI/tWAoLQ+6NBBlxcCFYRBavBl1rRtseeqHDHXJsdoPm/tBw5LBR3xJMZeElrkJbS3YdkPLppKoGIi2ldpnDTwsGZJ+vqpS/nRZJft0XaXyPxTWelc+VFk0/M3KUqHpruZNi821wRYri1bWzDaAKO/2CGGLdUGysu4OhptahsKLg6lri/+09ldbHMz1RnCeGqFlsRFrxVn8yaUXRanLRbFanFLmeaaUN2xC7XGYJ0Wah7M9Jd3uhGsOnRaMYZ5l7SR2a1hZOK1OC4bVOreinW1vHStbOhsOJcIyG26rk1eqkyihEURX+/HvipW6UMHRRq9W7z8Q5KkJeaUFa53gxNPR6Koi/kRhgpFszzHLQ1n+qqI9eWOWti2ENims4na0R+q8SVF5mh5VFhVrkyOVAgOJLk4wWbkjqhXDmQvJ1ZHZbh0rlWUZS287gC+uvKsrxXRP21/M6qahUJmPBbRtMKfdmIZNbRC62oI2tUFl6oVa2mSoU1HlxFsMPJdlezLcZMhTWXLZ0ot2KpsONbLh83XaeKptmViVsFRW2fT9Be2/2XG2tP+3z39rv+3vj5ebf2i8u+ly3P84HeLXx9fz/dW7L/8+4x38Q+T58nR/eHi9HNw0/1ek/fjKud5xHb75X63br62gavFfkr9XU3uPv717U/4D","names":["toggle_privacy"],"brillig_names":["toggle_privacy"]},{"name":"update_profile_data","hash":"13426855520636525322","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"new_profile_data_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"3532100565774060828":{"error_kind":"string","string":"No profile"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1aT4sjRRSvnk530snEyboKgoLgyWN3JpnMgkJgMzqeBD147k0y4kFXhsWThz4LgicP3rx78WMoCH4JD34LUzP1kl9+/bqTzHS5LLsPhuru9+r9q/devapMYDYQuLFF70ahmboxvR9kDfJKVUXrQGjedQ+Jez8CfNigsQnJbZL/eTrKE8W+BvU/TRxPn/4Rnh74p23H55Niw59tsdB37xhDMqez+js2m+eH7jmhOT7W1qPv04eK/kdgm4XHhRfZp8J/BvxNg7YJ/ws/+q/5f+T4+9D9Yz++WdekSz++yXrmNk8mjp/NnRP3nH/39affzp8ulp8vv1ksrzHdONTrgMtGg+5Zl7zIeHHPmZSaWLFLcG2SjbjOnv4K6R1tsjw+BL5Mx/pgf9AmWpETEa0FSY+A5LeU+RZmxTYvoX8P9P7BPduwesM9b8Lq2dPr/MvlZ8t8EVToyb5iuqpeKDR6XCBtqPCIFB5hjbyIaN53o7X9R/fsMf6Hr+K/rE9d/IsO+8S/6NRS5luYFdu8hH4MemP8v+meOf6/uP7q2dIQHJHiLXoPFDoEW9dl72gVm3lNBcfkPE3XiVRsHBEqurQAj/QfuPcu2IX2Tu+o59Ukz65O86t8nC8Wo3n+OvFHv/H+1zflZJV5iSkHWIPJNgoUPcMK34jfPPbjWWDKscdFEX0pvosUXQemXGCrNhyUEyly/i9evN4Wpm5MD4Mhf+grcjnOYvje4LqO940zkd81XjeZdZzFpE/Vmmkbj8wdmHLh59hoK3LaipwXhRfGKG+CgtdGkcPfWI7WANbVybvKQZqI5EQNykFeF8W2nLhBOchrVtyOktvcNE3de3o/OOfGC0FweM/FcdMlvRDXAxyvzzHgYsL1Aaf5UkBrAsVP1p6fgC/TCfi851nBhGsPgtb0sn8T0gtx6Hv2L/qe/Yu+P7TJFrp9/Xtiyv6NiZ/o0FLkWJgVt2NE9N+70XOOpNwPoqyXKX7uEiN/Al+mE9BiJCR+IcnkGJH7LuG1zz0w0ll7mz5XpMPF/Gw5XB19JmfZ8NFi17miafmnWTo6z+crNZZPRotsfsi5RvwYky7GlPsP/K7tYRHR/+xGyR2MX99526mxL6yxL1Tse1xh3+9utLS/7CHvxJTrV0A47WJEcNr+LDwkpqI9bRD6X91o5YZOGclhOY9zHbTQKrbtm7rv6f1gZPWIQQ/U9Ub/YtvuHuBChR7rA+6JSK/VwIEp76ER8dLOkujzS9JVfBgr9MiP4+w3N1rfvBNs64cx3yXd0fYO4bSeWuvrE9D5D/fs+Rx68F4YEA7zhM+G+/axdT+ma3uh+OLQvZB7JMS1FTu0OtEieZi3wv955C3+rs15izkaKvSct7vy/KK4HQemvJYc35gzCeFQbptwuO6XJA/jRdYGc6bqPlE7c9p5fwE/XEes7ziX67vQ/wO6/O2eT0y5nnF8aXWJdTFGr3tV52qOR481ZKTVkIBke+pH9r5HE/ldU853H/doHdKHY+iI/JN4Wpu6GqDdaz1Y/b1mymuG+gkvrUfV4p1rbV2/ptVarZZwndmnlmg9h1ZLeuawXlarE1xHkP5fN8ZCWCGP67IWU1otEPpEoUf/iq7aHpgQTusB6mKrU6NX3f6i6YWxh3NZ9i4btB9J6/r957jHj7U9Hm3nPb6u17bAa9BX6LX+e0D06HMtL7n3Rbk9wmE+cc5W9cUirG5/xDorvYP2u1gMfKUHaPq+YD4+ezIfjfN0mdnX4a77Avm/n7gAu4rtOW33Lmdopscf2JG+G2zsPYbYuqFV5Fm6t2vogorxhofyrVVsf0uKMn1YlOlFdrco6yi4HuAwNywcu3f0F/ISPSKifwtqs4UOzJH5A0V+h+Rv6a184/vinkLfU+jt+jxwk9Z3EiC76b7mRibxx2+sm8SOj3u4VUpN5vkkyx6NsuUoG+/Kq/8A61XFFsUtAAA=","debug_symbols":"tZjdbho9EIbvhWMOPOO/cW6liiKSkAoJkYgmn/Qpyr13Bs+7C5W8arfqCe+zIfusf8Y28Ll53j9+fH84nF5ef2zuvn1uHs+H4/Hw/eH4+rR7P7ye9K+fm2AvrK9xu2Ha3GUN7hF7pB65R+lRe0iPdomoFtGgHtwj9lAL6SOiasj+t3hWTzVR0Ww9k7pI70vkyZ7RM3lmz+JZPcVTfUzbTQ6e5Mme6mN9XtHrqNcleibP7Fk8q6d4tp41eJKn+6r5WDN5Zs/iWT3Fs/WU4Eme7Ok+cZ+4T9wn5gua4tl6tuBJnuwZPZNn9iye7mvua+bTeaQQAARgQAQkQAYUQAUIAGaCmWAmmAlmgplgJpgJZoKZzKw1RpcyLwYEYEAEmLkaZEABVIAAmoOVfgcCMCACzCwG2cGKNzYDfUQKBhUggOZgFdxBH5HIQIWJDTKgACpAAM2hBIB5bHys9jtEQAJkQAFUgJmTQXOwNdCBAAyIgATIABPa7NgS6NAcbBF0IAADIiABMqAAYBaYbTUkm2VbDh0IwIAISIAMwPA2DG/D8DYfXrZST9XA3hKD5mCF3YEA3AuAL4V9gQTIgAKoAAE0h0thX4AAMDPMDDPDzDAzzFbPl8ZbPSf7i1Vvh+RtturtUAAVYMdBMGgOto13sKOFDBgQATAnmBPMCeaEwUwYzIzBzBhM29I7RADMl3UhX1/bDc6+h/fzfm9H39VhqEfk2+68P71v7k4fx+N289/u+HH5px9vu9Ml33dnfVc7tD89a6rw5XDcG31t57vD+FadafK7da7bJMi3BhobksTkhiSJJ0NpNwYeGyRXdoNkqSPDYi+KTL1oYdSLNDboSRDdoPt8nAy6B/22Qtc1FFo7Q0UZK3JumMsinGZFqDeKOlbUgvmsVWZB5TVjySGOxrItDYRtbj6WNQwbQQutqFlQVbWEPKoJWijMGgVTWhMPC5N4qSexlqkrKbShZLErde4Kh6FiobTmBZJlbkNMcd2k5tGkLhnYdmQ3lDrcKOrfr7FFx28uMmp/v8o4/Mtldj2eQqPx5KXqTAGNoMR12AqOC3tviChwCVmGu/dCcVaZelKlDeub8+KOIfOWkbmsOAP0wybGM8yLPXK+bcXS1tmmfau2Ntcni9w6ZOyIFaWV4lxZ/MuktqW6oDzVRYwjRVwYiWwfmfpukWSNoExNKOMWLHYiElY6x6vZ/BNFTRhJrnk4lDH9U4Vum9i79STjVYraMB36vaGsUrQ4bZwtDRVLiyNMQ6HfcNsag369mw91XmWQ6SzlsKoNia82vFVtyGnqRa60ytCmuSgU1xjiPJsxr+pFnE5zirKmF/qZavpIklbc36aTvNU19dgYO0xLq54vaP/NRr2m/b/cf69Xu6fD+eZXyS8znQ+7x+PeL18+Tk9X777//4Z38Kvm2/n1af/8cd6baf5pU1++ceEtS7y3X5n0MudtCXZB9p5uOCzl/sua8hM=","names":["update_profile_data"],"brillig_names":["update_profile_data"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"AztlanProfile::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"AztlanProfile::create_profile_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::create_profile_parameters","fields":[{"name":"username_hash","type":{"kind":"field"}},{"name":"profile_data_hash","type":{"kind":"field"}},{"name":"is_private_profile","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"AztlanProfile::get_next_token_id_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::get_next_token_id_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanProfile::get_profile_data_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::get_profile_data_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanProfile::get_token_id_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::get_token_id_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanProfile::get_total_profiles_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::get_total_profiles_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanProfile::has_profile_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::has_profile_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AztlanProfile::is_profile_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::is_profile_private_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AztlanProfile::is_username_available_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::is_username_available_parameters","fields":[{"name":"username_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AztlanProfile::lookup_username_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::lookup_username_parameters","fields":[{"name":"username_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanProfile::toggle_privacy_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::toggle_privacy_parameters","fields":[]}}]},{"kind":"struct","path":"AztlanProfile::update_profile_data_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanProfile::update_profile_data_parameters","fields":[{"name":"new_profile_data_hash","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"AztlanProfile"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"username_hash_to_address","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"profile_data_hash","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"has_profile","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"is_private","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"token_id","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"total_profiles","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"next_token_id","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}}]}}]}]}},"file_map":{"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\npub contract AztlanProfile {\n    use dep::aztec::macros::{functions::{public}, storage::storage};\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n\n    #[storage]\n    struct Storage<Context> {\n        // Core profile data\n        username_hash_to_address: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        profile_data_hash: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n        \n        // Profile metadata\n        has_profile: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        is_private: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        token_id: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n        \n        // Stats\n        total_profiles: PublicMutable<Field, Context>,\n        next_token_id: PublicMutable<Field, Context>,\n    }\n\n    #[public]\n    fn constructor() {\n        storage.total_profiles.write(0);\n        storage.next_token_id.write(1);\n    }\n\n    #[public]\n    fn create_profile(\n        username_hash: Field,\n        profile_data_hash: Field,\n        is_private_profile: bool\n    ) {\n        let caller = context.msg_sender();\n        \n        // Validations\n        assert(!storage.has_profile.at(caller).read(), \"Profile exists\");\n        assert(\n            storage.username_hash_to_address.at(username_hash).read() == AztecAddress::zero(),\n            \"Username taken\"\n        );\n        \n        // Get token ID\n        let token_id = storage.next_token_id.read();\n        \n        // Store profile\n        storage.username_hash_to_address.at(username_hash).write(caller);\n        storage.profile_data_hash.at(caller).write(profile_data_hash);\n        storage.has_profile.at(caller).write(true);\n        storage.is_private.at(caller).write(is_private_profile);\n        storage.token_id.at(caller).write(token_id);\n        \n        // Update stats\n        storage.total_profiles.write(storage.total_profiles.read() + 1);\n        storage.next_token_id.write(token_id + 1);\n    }\n\n    #[public]\n    fn update_profile_data(new_profile_data_hash: Field) {\n        let caller = context.msg_sender();\n        assert(storage.has_profile.at(caller).read(), \"No profile\");\n        \n        storage.profile_data_hash.at(caller).write(new_profile_data_hash);\n    }\n\n    #[public]\n    fn toggle_privacy() {\n        let caller = context.msg_sender();\n        assert(storage.has_profile.at(caller).read(), \"No profile\");\n        \n        let current = storage.is_private.at(caller).read();\n        storage.is_private.at(caller).write(!current);\n    }\n\n    // View functions\n    \n    #[public]\n    fn get_profile_data(user: AztecAddress) -> Field {\n        // Returns profile_data_hash if public, or 0 if private\n        let is_private = storage.is_private.at(user).read();\n        if is_private {\n            0  // Private profiles return empty\n        } else {\n            storage.profile_data_hash.at(user).read()\n        }\n    }\n\n    #[public]\n    fn has_profile(user: AztecAddress) -> bool {\n        storage.has_profile.at(user).read()\n    }\n    \n    #[public]\n    fn get_token_id(user: AztecAddress) -> Field {\n        storage.token_id.at(user).read()\n    }\n    \n    #[public]\n    fn is_profile_private(user: AztecAddress) -> bool {\n        storage.is_private.at(user).read()\n    }\n\n    #[public]\n    fn lookup_username(username_hash: Field) -> AztecAddress {\n        storage.username_hash_to_address.at(username_hash).read()\n    }\n\n    #[public]\n    fn is_username_available(username_hash: Field) -> bool {\n        storage.username_hash_to_address.at(username_hash).read() == AztecAddress::zero()\n    }\n\n    #[public]\n    fn get_total_profiles() -> Field {\n        storage.total_profiles.read()\n    }\n    \n    #[public]\n    fn get_next_token_id() -> Field {\n        storage.next_token_id.read()\n    }\n}\n","path":"/root/x/aztlan/contracts/aztlan_profile/src/main.nr"},"69":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"71":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"97":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"104":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"107":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"146":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"163":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"172":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"270":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"288":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"325":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"343":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"344":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"363":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}