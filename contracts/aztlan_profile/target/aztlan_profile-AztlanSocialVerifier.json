{"transpiled":true,"noir_version":"1.0.0-beta.5+0000000000000000000000000000000000000000","name":"AztlanSocialVerifier","functions":[{"name":"constructor","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_registry","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"verification_oracle","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQuCIBEAAEuCIBFAAIlAAAASyUAAABMKAIAAQSARicCAgQAOw4AAgABJiUAAABoJwIDAAEwCgABAAMnAgEACDAKAAIAASYoAIAEBHgADQAAAIAEgAMkAIADAAAAkCoBAAEF96Hzr6Wt1Mo8BAIBJg==","debug_symbols":"pdPNqoQgFAfwd3HdQi2/epVhCCsbBLFw6sIlfPerkc20sMVt48ns/MI/nBX0ql1ejbbD+Ab1YwWt08boV2PGTs56tOHtCmBcOAI1KQCnWxEY1AiGymL1vgCpo5mdUrHhiwjwJJ2yM6jtYkwBfqRZto/ek7RbnaULp0FUtg81gIM2Kj754tMN862IQLx3I1LiAyBnAV0IFURJqDA7BMTwicB5gsOS7gSHhB8EFSehzAuMl2IXGBcwJ1QX10AVJ+keiGCaMy7DpPAIU5S5MOn9MNntMPntMMV/w3yGney0O42Lj5rTsjVq3w6L7b5O598pnaRxm9zYqX5xKkqfmUNhfWBYYPL08W9/","brillig_names":["constructor"]},{"name":"get_discord_commitment","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAAB/CcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAUnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAiUtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAIlLQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA1MtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAARmLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAIkKgEAAQX3ofOvpa3UyjwEAgEmJQAAAfwtCwQGCyIABoBEAAckAgAHAAACRycCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALfIwAAAmAtCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKKJQAABHguAgAHgAMoAIAEBAAEJQAABIouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAACyiUAAAUYLQ4KAS0OCAItDgUDLQ4JBCMAAANSJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA1MtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASKLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADUiYlAAAB/C4IgEUABSMAAANjDSIABYBDAAYkAgAGAAAD0yMAAAN4LQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAPpIwAABFUtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASKLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABFUBIgAFgEYABi0KBgUjAAADYyoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABKUjAAAEsC4AgAOABSMAAAUXLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABQMuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABNIoAYAFBAABAwCABgACgAYjAAAFFyYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZfdaiM9DIbvZY5zYEmWf3orSylpmy6BkJZs88FHyb2vZEueZmEGdmBP8j72WO/Itjwz+ZpeD8/Xn0/H89v7r+nhx9f0fDmeTsefT6f3l/3n8f0svV9T0B8IdXrIuwkgmpauSKbWJmuTtSOapq4Mptw1BVPxLaKFTWvXav21tzFEU2sDmeauiKapK4Fp98UYTMUnqZauTKa5awLT1DUHU4vLtavm29TatV+nIOOrKncFa+v6NS1dNd+mqSvZOLJxVLtGa0eL03yb5q6ab1O7X7K4bOOyjSt2v2LtKnEAChIIuJtiIAMAh2SAkhyQAjtUA933DtkggoMPZg/n0ePhScOjQAYHHSOVEUtwKAY1deAgg1ESY5bVQVKQMSjhrPvWQDesQzUo5CCpIu+mFDRKdi0BOiQDnXKHaEA+RmfaQCfYQCeIWSEZ6Lw6FIOWT4NqULxHJ4hSnEknqJDbBBtUA62fDjY4awV18CitdZTNzVrsHaJDMWB0SAbJBycPz96TPTx7ePHwIuEUBCo61A5Fj2oDrf0ObKBPjQ62hkXPaQdbzBK9J8kYkhItuj4k213avRqkDlUXqgP3Sqh60w7RoRqg96D3kPeQ90TvYffh0VMMEjokg+yDsw/WXdbkq1YdSQ+Elmsn7llDaEvUae6rTm25YqPiRKNP65BYSR+2RsmJhzMnJ61Ko+KkGRuN+5bRV8Y4X3sh94MQBrXY2203+Tvk6fNyOOgr5NtLRV41H/vL4fw5PZyvp9Nu+m9/urZBvz7256af+4tclRI5nF9FxfDteDoo3XZzdFgOjVTYomNEGAZ87wDLDrpO5gAANBwg0Z0FrlhwMgcMOAwI+c6Alg1yjT4LOVhzDljKnUVctqDsqxgpzgb3y8DL8YjgKSASLTmkZQeO2Qw4lg3xaSSQlu+/NgMC30iUF+0WB3mUukPmxVWE8E8tQF4VXpD5Wz39jUWuvhdQIG2yqDSORY3LFisOUIo7YOTFgwUrO8JcfTlTwXk55fF177FSVzmBn6081yVk3PSMobL4jClrazEOOMimLmYBdWUePOpC3uLzeqZ6/5xamUmm4puaI+KixequUk5jKjHUJZO12grjkMg7py7V1poDcJzXEzc5lDENDJtyiOiFBd8X8y8cOI5ZcIZNDnWc0gS0xYHmc068aRaUxjmnsmUWUs6jsOOG+Dre4DWnLfHoh1M+CLfEF8//7uW9Jf8/4h+ltX85Xu7+q9/U6XLcP58O1ny7nl++Xf38/8Ov+H/9j8v7y+H1ejmo0/yHX35+oHzhI4dH/diTpnyR7uSbSJugVxnkKj3eNJnf","brillig_names":["get_discord_commitment"]},{"name":"get_twitter_commitment","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAAB/CcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAQnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAiUtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAIlLQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA1MtAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAARmLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAIkKgEAAQX3ofOvpa3UyjwEAgEmJQAAAfwtCwQGCyIABoBEAAckAgAHAAACRycCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALfIwAAAmAtCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKKJQAABHguAgAHgAMoAIAEBAAEJQAABIouCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAACyiUAAAUYLQ4KAS0OCAItDgUDLQ4JBCMAAANSJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA1MtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASKLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADUiYlAAAB/C4IgEUABSMAAANjDSIABYBDAAYkAgAGAAAD0yMAAAN4LQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAPpIwAABFUtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASKLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABFUBIgAFgEYABi0KBgUjAAADYyoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABKUjAAAEsC4AgAOABSMAAAUXLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABQMuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABNIoAYAFBAABAwCABgACgAYjAAAFFyYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZfdaiM9DIbvZY5zYEmWf3orSylpmy6BkJZs8sFHyb2vZEtOsjADO7AneR97rHdsWZ6ZfE/vu9fLz5f98ePz1/T043t6Pe0Ph/3Pl8Pn2/a8/zxK7/cU9AdCnZ7yZgKIpqUrkqm1ydpk7YimqSuDKXdNwVR8i2hh09q1Wn/tbQzR1NpAprkromnqSmDafTEGU/FJqqUrk2numsA0dc3B1OJy7arzbWrt2q9TkPFVlbuCtTV/TUtXnW/T1JVsHNk4ql2jtaPF6Xyb5q4636Z2v2Rx2cZlG1fsfsXaVeIAFCQQcDPFQAYADskAZXJACuxQDXTfO2SDCA4+mD2cR4+HJw2PAhkcdIxURizBoRjU1IGDDEaZGLNkB0lBxqCEs+5bA92wDtWgkINMFXkzpaBRsmsJ0CEZ6JI7RAPyMbrSBrrABrpAzArJQNfVoRi0+TSoBsV7dIEoxZl0gQq5LbBBNdD66WCDs1ZQB4/SWkfZ3KzF3iE6FANGh2SQfHDy8Ow92cOzhxcPLxJOQaCiQ+1Q9Kg20NrvwAb61OhgOSx6TjtYMkv0niRjSEq0aH5Itru0ezVIHaomqgP3Sqh60w7RoRqg96D3kPeQ90TvYffh0VMMEjokg+yDsw/WXdbJV606kh4Iba6duM8aQktRp1tfdWrpio2KE40+rUNiJX3YGiUnHs6cnLQqjYqTztho3LeMvjLGee6F3A9CGNRir9fN5O+Ql/Npt9NXyN1LRV41X9vT7nieno6Xw2Ez/bc9XNqgX1/bY9Pz9iRXpUR2x3dRMfzYH3ZK180tOsyHRnnUW3TEnIYBPzrAvIPmyRwAgIYDJHqwwAULTuaAAYcBIT8Y0LxBrpHNQQ7WbQ5YyoNFnLegPPJA8WbwmAaej0cEnwIi0ZxDmnfgmM2AY1kRn8YE0vz9l1ZA4BuJ8qJd45BHMWHm2SxC+KcWIK8KL8h8V09/Y5Gr7wUUSKssKo1jUeO8xYIDlOIOGHn2YMHCjjBXT2cqeEunPL4ePRbqKifws5VvdQkZVz1j7k7nn8+YspSLccBBNnV2FlAX1sGjLuQtfstnqo/PqYWVZCq+qTkizlos7irlNJYSQ50zWaqtMBIq75w6V1tLDsDxlk9c5VDGMjCsmkNELyy4T+ZfOHAcq+AMqxzqOKUJaI0D3c458apVUBrnnMqaVUg5j8KOK+LreIPXnNbEox9O+SBcE198/g8v7zXz/yP+WVrbt/3p4b/6VZ1O++3rYWfNj8vx7e7q+f8vv+L/9b9On2+798tpp063P/zy8wPlCx85POvHnjTli3Qj30TaBL3KIFfp+aqT+Q0=","brillig_names":["get_twitter_commitment"]},{"name":"get_verification_oracle","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAABbJwIBAAgvCgABAAItCgIBJigAgAQEeAANAAAAgASAAyQAgAMAAACDKgEAAQX3ofOvpa3UyjwEAgEm","debug_symbols":"fdLLroMgEADQf2HNQh4j1l9pGoOKDQlBQ+EmN4Z/LzQ+ysJuwHFmDhBY0aj68Oy0neYXau8r6p02Rj87Mw/S69mmvyuq8iAAtYBRkwKIEaO9ovNOqVzw1ZKgRTplPWptMAajP2nCp+i1SPuZvXQpW2Gk7JjmBE7aqPwV8dldXbdyoGTr5gDsAKAUyLVACIdNIEScWyCCFgS9JgQ0fCNEXcFB1LdCYD8E1rBd4JReCfzXMZioj3Pw6lYYjxTJQbviRmPWnJa9UVs4BTt8Zf3/smf2F7G4eVBjcCpL57MgabyTBlP2iHm1Nw==","brillig_names":["get_verification_oracle"]},{"name":"is_discord_verified","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAMnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZjbbuM4DIbfxde5EEmd2FcZFEXapoMAQVpkmgUWRd59SYmUmwVszBiYm/KTLP6mSFp28zW9Hp6vP5+O57f3X9PDj6/p+XI8nY4/n07vL/vP4/tZZr+moH8g8PRQdhNANFu7RTJrY7Ix2Tii2dxtArOp2xzMim4VW5NZ7pZtnvsYQzRrYyCzpVtEs7lbArNdF2MwKzpZbe02kdnSbQazudsSzJpf4W413mZtzP06BVnPalO3YGPNX7O1W4232dwt2TqydcTdRhtH89N4my3darzN2v2y+RVbV2xdtftVG7P4ASiII+BuioEMAByyAUpwQArJgQ207h2KQQQHX5zcPY0Zd8/qHgUKOOga6YxYg0M14NwhBVmMqCA3RfFKgA4+o4nAJKCZQClNquDABlq0DrVDDqojt8ja31gVioF2VIfkwAbR1yQ00PbuoIsl4Vk32KEaVHJggxZPA5spWhQKAlqUDtkAowMbkC/WWjSI7qUlIFBIDmygJehQDDTUDr64unsdM+7O7s7mXrU6hArFQJu/AxtoIzXQvu9QDaLlsOrR0SAFB5/RbibpH275iQrFoCWqQTbQ7tVOYL1pB+sN1qetg89En4k+k3wm+Ux2He8xbj3WoBi0Zmvgi6sv1iq34LXrSGYgtFgbabAatVByojGn8Rqpb1aKNGjMaR9SaVSc9KQwGsoFBlWnSoPYicd92efAUy9UnDz5An4PaH0ab7fd5K+Xp8/L4aBvl2/vG3kLfewvh/Pn9HC+nk676Z/96doW/frYn5v93F/kqnTz4fwqVgTfjqeD0m03e4dlVzni0LxjyDgE0r0CLCtI7sgUZIs0FCDTnQSuSKRsChjmEAjTnQAtCxSOyRQK8xwD1nonEZclqHgWo1RmCNynIS37I4KHgEi0pJCXFVIsJpBi3eCfRwB5+f5rOyDwQqK8g7colOhJxJIWswjhr0pArtEbsnzrpz+RkJPbJSrkTRJM47HguCyxogC1ugLGtPhgwUpFUmJPZ644p1POp3uNlb4qGfzZKnNfQsFNZ0zhxTOmruViPOAgRV2MAnhlH2n0Rclhzmfm+3NqZSeFqhe1RMRFidWqUsljKzHwksj6Vsq8FQyLcawcmal4TeTbbz5zI/1uVeXd6q2lr8WlBl9TgBTnouImhTpyiWFTDBG9u+F7Rf9AIcWxi1RgkwKPoyIDbVGg+bChtGkXlMdhQ3XLLuSZGi0ZN/jz+Izgkrf4o58Q8sG6xb96/HdfEFvi/5//o4z2L8fL3W8JN1W6HPfPp4MN367nl29XP//98Cv+W8TH5f3l8Hq9HFRp/kFC/vyQN/ZO/nF/1O9RGcrDuZMPUx2CXpUHDVN+vGkw/wE=","brillig_names":["is_discord_verified"]},{"name":"is_twitter_verified","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEcuCIBHAAElAAAASyUAAABoLgIAAYBIKAIAAgSASCcCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgQAASYlAAACCycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAInAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAjQtAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAI0LQIAAC0LBgELIgABgEQAByQCAAcAAAGkJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA2ItAgAALQsDAQEiAAGARgAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAAB9SUAAAR1LwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAIzKgEAAQX3ofOvpa3UyjwEAgEmJQAAAgstCwQGCyIABoBEAAckAgAHAAACVicCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAALuIwAAAm8tCwMGLQsBBy0LAggtCwQJDSIABoBDAAonAgsBASQCAAoAAAKZJQAABIcuAgAHgAMoAIAEBAAEJQAABJkuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARgAFDioGBQckAgAHAAAC2SUAAAUnLQ4KAS0OCAItDgUDLQ4JBCMAAANhJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA2ItAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAASZLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEYAAy0OCAQjAAADYSYlAAACCy4IgEUABSMAAANyDSIABYBDAAYkAgAGAAAD4iMAAAOHLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAP4IwAABGQtCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAASZLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABGQBIgAFgEYABi0KBgUjAAADcioBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABLQjAAAEvy4AgAOABSMAAAUmLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABRIuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABOEoAYAFBAABAwCABgACgAYjAAAFJiYqAQABBUWnynEZQeQVPAQCASY=","debug_symbols":"tZjdais5DMffJde5sCR/qa9yKCVt00MgpCUnWVhK3n0lW/IkCzNsB/am+tlj/UeWNJ5pvjfv+9fr75fD6ePzz+bp1/fm9Xw4Hg+/X46fb7vL4fMks9+boH8g8OapbDcA0WztFsmsjcnGZOOIZnO3CcymbnMwK7pVbE1muVu2ee5jDNGsjYHMlm4RzeZuCcx2XYzBrOhktbXbRGZLtxnM5m5LMGt+hbvVeJu1MffrFGQ9q03dgo01f83WbjXeZnO3ZOvI1hF3G20czU/jbbZ0q/E2a/fL5ldsXbF11e5XbcziB6AgjoDbTQxkAOCQDVCCA1JIDmygde9QDCI4+OLk7mnMuHtW9yhQwEHXSGfEGhyqAecOKchiRAW5KYpXAnTwGU0EJgHNBEppUgUHNtCidagdclAduUXW/saqUAy0ozokBzaIviahgbZ3B10sCc+6wQ7VoJIDG7R4GthM0aJQENCidMgGGB3YgHyx1qJBdC8tAYFCcmADLUGHYqChdvDF1d3rmHF3dnc296rVIVQoBtr8HdhAG6mB9n2HahAth1WPjgYpOPiMdjNJ/3DLT1QoBi1RDbKBdq92AutNO1hvsD5tHXwm+kz0meQzyWey63iPceuxBsWgNVsDX1x9sVa5Ba9dRzIDocXaSIPVqIWSE405jddIfbNSpEFjTvuQSqPipCeF0VAuMKg6VRrETjzuyz4Hnnqh4uTJF/B7QOvTeLttN/56ebmc93t9u9y9b+Qt9LU770+XzdPpejxuN3/tjte26M/X7tTsZXeWq9LN+9O7WBH8OBz3Srft5B3mXalyMW9iLEMgPSrAvILkjkxBtkhDATI9SOCCRMqmgAGHAGF6EKB5gcIxmUJhnmLAWh8k4kIiimcxSmWGwGMa0rw/IngIiERzCnleIUWvRIp1hX8eAeT5+y/tgMALifIOXqNQoicRS5rNIoT/VQJyjd6Q5a6ffiJRxlMBFfIqCabxWHCcl1hQgFpdAWOafbBgoSIpsaczV5zSKefTo8ZCX5UM/myVqS+h4KozJsbZM6Yu5WI84CBFnY0CeGEfafRFyWHKZ+bHc2phJ4WqF7VExFmJxapSyWMrMfCcyPJWyrQVDLNxLByZqaCfNnWKgSL916rKu9VbS1+Lcw2+pAApTkXFVQp15BLDqhgienfDfUV/oJDi2EUqsEqBx1GRgdYo0HTYUFq1C8rjsKG6ZhfyTI2WjCv8eXxGcMlr/NFPiPsz5gf+1eN/+IJYE/+//J9ltHs7nB9+S7ip0vmwez3ubfhxPb3dXb38/eVX/LeIr/Pn2/79et6r0vSDhPz5JW/srfzj/qzfozKUh3MrH6Y6BL0qDxqm/HzTYP4B","brillig_names":["is_twitter_verified"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2940325361005241554":{"error_kind":"string","string":"Only oracle can verify"},"4904135589298797358":{"error_kind":"string","string":"Only user can revoke"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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DgMEACIEAgQtDgMEJwIEBAMAKgIEAy0KAwQtDgYEACICAgUtCwUEJwIGBAIAKgUGAzsOAAQAAyMAABHQJwICAlUnAgMCbicCBAJrJwIFAm8nAgYCdycCBwIgJwIIAnMnAgkCZScCCgJsJwILAmMnAgwCdCcCDQJyJwIOAnsnAg8CfS0IARAnAhEEHAAIAREBJwMQBAEAIhACES0KERItDgISACISAhItDgMSACISAhItDgQSACISAhItDgMSACISAhItDgUSACISAhItDgYSACISAhItDgMSACISAhItDgcSACISAhItDggSACISAhItDgkSACISAhItDgoSACISAhItDgkSACISAhItDgsSACISAhItDgwSACISAhItDgUSACISAhItDg0SACISAhItDgcSACISAhItDg4SACISAhItDggSACISAhItDgkSACISAhItDgoSACISAhItDgkSACISAhItDgsSACISAhItDgwSACISAhItDgUSACISAhItDg0SACISAhItDg8SCyCARIBHAAIkAgACAAATnCcCAwQeLQgBBCcCBQQeAAgBBQEtCgQFKgMABQUnRkiy9UEXvQAiBQIFACIQAgYnAgcEGy4CAAaAAy4CAAWABC4CAAeABSUAABufJwIGBBsAKgUGBS4MgEgABQAiBQIFLQ4BBQAiBQIFPA4DBCYoAIAEBHgADQAAAIAEgAMkAIADAAATxSoBAAEF96Hzr6Wt1Mo8BAIBJiUAABOdLQsBBS0LAgYNIgAGgEkAByQCAAcAABPoJQAAG+UAIgUCCAAqCAYJLQsJBwEiAAaASAAIDioGCAkkAgAJAAAUECUAABv3LQ4FAS0OCAILIgADgEoAASQCAAEAABRPIwAAFC0LIgADgEsAASQCAAEAABRGJwICBAA8BgIBLQoHBCMAABRYLQoHBCMAABRYLQoEASYlAAATnTAKAAUABCYlAAATnS0LAQUtCwIGDSIABoBDAAckAgAHAAAUiyUAABvlACIFAggAKggGCS0LCQcBIgAGgEgACA4qBggJJAIACQAAFLMlAAAb9y0OBQEtDggCCyIAA4BKAAEkAgABAAAU8iMAABTQCyIAA4BLAAEkAgABAAAU6ScCAgQAPAYCAS0KBwQjAAAU+y0KBwQjAAAU+y0KBAEmJQAAE50vCgAEAAUtCgUBJioBAAEFKM4i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","debug_symbols":"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","brillig_names":["public_dispatch"]},{"name":"revoke_discord_verification","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4904135589298797358":{"error_kind":"string","string":"Only user can revoke"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAARSUAAABpKAIAAQSASScCAgQAOw4AAgABKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgAAACgAgEcEAAEmJQAAARweAgACAQoqAgEDJAIAAwAAAIUlAAABRScCAgADJwIEBAUtCAAFLQoCBi0KAQcACAAEACUAAAFXLQIAAC0KBgMLIgADgEYAAgsiAAKARAAEJAIABAAAAMolAAAC0TAIgEYAAycCAgAFJwIEBAUtCAAFLQoCBi0KAQcACAAEACUAAAFXLQIAAC0KBgMLIgADgEYAAQsiAAGARAACJAIAAgAAARUlAAAC0TAIgEYAAyYoAIAEBHgADQAAAIAEgAMkAIADAAABRCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFRA79VdKBey48BAIBJiUAAAEcLQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS4MgEYABQAiBQIFLgyARgAFACIFAgUuDIBGAAUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLgyARgAHACIHAgcuDIBGAAcAIgcCBy4MgEYABwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAALjLQIAACcCAQQHLQgABy0KBAgtCgMJLQoFCi0KBgstCgIMAAgAAQAlAAAC4y0CAAAtCwYBCyIAAYBEAAIkAgACAAAClScCBwQAPAYHAScCAQQHLQgABy0KBAgtCgMJLQoFCi0KBgsACAABACUAAAQRLQIAAC0LAwEBIgABgEcAAy0LAwItCgIBJioBAAEFAtxuJ4B2Ep08BAIBJiUAAAEcLQsEBgsiAAaARAAHJAIABwAAAwUnAggEADwGCAEtCwMGCyIABoBDAAckAgAHAAADnSMAAAMeLQsDBi0LAQctCwIILQsECQ0iAAaAQwAKJwILAQEkAgAKAAADSCUAAAUkLgIAB4ADKACABAQABCUAAAU2LgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAA4glAAAFxC0OCgEtDggCLQ4FAy0OCQQjAAAEECcCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAQRLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAFNi4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAABBAmJQAAARwuCIBFAAUjAAAEIQ0iAAWAQwAGJAIABgAABJEjAAAENi0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAEpyMAAAUTLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAFNi4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAAUTASIABYBHAAYtCgYFIwAABCEqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAVRIwAABVwuAIADgAUjAAAFwy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWvLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAV+KAGABQQAAQMAgAYAAoAGIwAABcMmKgEAAQVFp8pxGUHkFTwEAgEm","debug_symbols":"tZjRbuM4DEX/Jc99kCiKlPIrg6JI23QQIEiLTLLAosi/LymRSjKAjR1P+xId0+K1TF1LsT9Xr9vn88+n3eHt/ddq/eNz9Xzc7fe7n0/795fNafd+kOjnKuhPjNKkB2nzao3SQrC29Dal1Zq0Lb1FO0bubY7W5t5SsNaPa29Z8qq0JVpbe1u5tRBgtY6oIBeKkgExOXgEwIEMUnDIBugRRAdN10tkMiA0YHCQUYBcPWlnkEjK4MAG5BHyCHuEyaB4pHifmhxMGYNcPQUByA7VIPmp5BH0CHokJwePkPfh4ODKWu0OZFClDxQFdKgdckgObBDBgQwgOGSDFB08gt4H9aJRQE3SITtUA0oObMDemb1zCQ4j4ul6Fx1KB1IjdbCrUwwO6OCdITl4JGl6UtB0sQS1KVBQS3RgA9KhZgUyaFPQAB2KgXqjg3eunl4twiE4aLq4l3UKGrRhsIIKSnlZ/dygGaBBNdCnrYMOVVzHWh8UAxStTwcy0Pp0QAPwPsAGOrkNdHIxKpCBGrJDMdDxdKgG7BGtBoKAFqGBFqFD7VD13jtY56pF6GBZVe2HMk1VV4AO6FAMEBzIIHvn7OnkEfJ08nT2dH26Uaa76gx2qAZqP4UYdOaMspOuYEZWxxggDspOacTUWZiVWqF04Qztqp3IqRWtU+62kIU8DMJB1SmOWBwxGDEYsTRiOPTwGitO7WHoRE40MmhkNAvoHbUdAFusjb5TtvuAVr9O11h1apUsjYoTjFhzqW4moE+vETnhUEavHzTPdvI6t13BaFyXR2zMB4z5gDEfUMc1movpcnlY+Wb7dDput7rX3uy+sid/bI7bw2m1Ppz3+4fVP5v9uXX69bE5tPa0OcpZccX28CqtCL7t9luly8M1O0ynphyzZaec0hDI9wpxWgGLrnJNAQvCUKB6pwDTCiUzmIIsDzylMHsXGcZdEE3dxZyCLNOuIEvulEKeVoiBkinI43OtZKT0vyViKS4BmCcleFpC9kx3g+wleJUIfCdRpiV4VIK5XAUYltSSQ5301IyErCsuERF4chRxxpgl6JbYbRVymbJVnHEmF90Wey1KDZMSaW5OseThiwy0xN4MNApKMFnQL3Bn/AJ7xi/wZ/xWg97Ws4SpesIXGBT+3qDw9waFbzaobO+mIK9oIz9Bvh/FjLe4og+Ca736E0q516C5aXVryTvSVeG3SZ0xJ8DYDOWPQ5qUmPFm1r8sTSFjWSJAYwg0M4K5m0jRn3T5p0OLJBi9ksB5spQJvlUiUvE/FpFvbPUnElx9OuSbAi2SqGksnPKOMCUx93CEUQr5d16XKMQ8KqELzBKFQmPpDovGgHCz4C0aQ8ZxF/L+vkihjrmgmJYopOtsytebRQo0NsFUltwFk9tB3skX5Nexk8tL55J88BWm4qLrFx//3UK9ZPy/5T/K0eZld7z7BHlRpeNu87zf2uHb+fByc/b074ef8U+YH8f3l+3r+bhVpet3TPn5AVJ9KPFRX4vlUN4bMutB1HMF5Bw+XnQo/wE=","brillig_names":["revoke_discord_verification"]},{"name":"revoke_twitter_verification","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4904135589298797358":{"error_kind":"string","string":"Only user can revoke"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAARSUAAABpKAIAAQSASScCAgQAOw4AAgABKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgAAACgAgEcEAAEmJQAAARweAgACAQoqAgEDJAIAAwAAAIUlAAABRScCAgACJwIEBAUtCAAFLQoCBi0KAQcACAAEACUAAAFXLQIAAC0KBgMLIgADgEYAAgsiAAKARAAEJAIABAAAAMolAAAC0TAIgEYAAycCAgAEJwIEBAUtCAAFLQoCBi0KAQcACAAEACUAAAFXLQIAAC0KBgMLIgADgEYAAQsiAAGARAACJAIAAgAAARUlAAAC0TAIgEYAAyYoAIAEBHgADQAAAIAEgAMkAIADAAABRCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFRA79VdKBey48BAIBJiUAAAEcLQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS4MgEYABQAiBQIFLgyARgAFACIFAgUuDIBGAAUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLgyARgAHACIHAgcuDIBGAAcAIgcCBy4MgEYABwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAALjLQIAACcCAQQHLQgABy0KBAgtCgMJLQoFCi0KBgstCgIMAAgAAQAlAAAC4y0CAAAtCwYBCyIAAYBEAAIkAgACAAAClScCBwQAPAYHAScCAQQHLQgABy0KBAgtCgMJLQoFCi0KBgsACAABACUAAAQRLQIAAC0LAwEBIgABgEcAAy0LAwItCgIBJioBAAEFAtxuJ4B2Ep08BAIBJiUAAAEcLQsEBgsiAAaARAAHJAIABwAAAwUnAggEADwGCAEtCwMGCyIABoBDAAckAgAHAAADnSMAAAMeLQsDBi0LAQctCwIILQsECQ0iAAaAQwAKJwILAQEkAgAKAAADSCUAAAUkLgIAB4ADKACABAQABCUAAAU2LgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAA4glAAAFxC0OCgEtDggCLQ4FAy0OCQQjAAAEECcCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAQRLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAFNi4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAABBAmJQAAARwuCIBFAAUjAAAEIQ0iAAWAQwAGJAIABgAABJEjAAAENi0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAEpyMAAAUTLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAFNi4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAAUTASIABYBHAAYtCgYFIwAABCEqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAVRIwAABVwuAIADgAUjAAAFwy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWvLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAV+KAGABQQAAQMAgAYAAoAGIwAABcMmKgEAAQVFp8pxGUHkFTwEAgEm","debug_symbols":"tZjRbts6DIbfJde9kCiKkvoqwzBkXTYECNIiaw9wMPTdDynxV5oBNs689ib6TIu/Zeq3ZOfX7tvh68uPL8fz98efu/tPv3ZfL8fT6fjjy+nxYf98fDxr9Ncu2E+M2qQ7bfPunrWl4G0dbUq7e7G2jpb9mMtoc/Q2j1aCtzhuoy2a17St0ds22lZ6S4F295EN9EJRMygmACJEAHFIAZAdGBFmgKXbJbI4CDsUAugoSK+erDNpJGUCFAdBRBApiBRxqIhU9GkJ4Moc9OopKFAGNIeEUwkRRoQRyQmAiKBPCQAoW7UHiEPTPlQNGNAG5JAAxSESQBwoALJDigBEGH3YLhoVzCQDMqA5SAIUh4LOBZ1rAMwI0u0uBtQBYkYa4FeXGAAMQGdKAESSpScDS1dLSJ8CA7PEgOIgNtRsIA59CjowoDqYNwagc0N680gJAWDp6t5iU9ChD6MYmKCWt5ifO3QDdGgO9rQNsKGq64rVh9UA1eozQBysPgPYgdCHioNNbgebXI4G4mCGHFAdbDwDmkNBxKrBpGBF6GBFGNAGNLv3Ad65WREGeFYz+7FOU7MVYAADqgMTQBwyOmekCyKCdEF6Qbo93azT3WwGBzQHs59BDDZzThlkK5iT1zEGipMyKM2YOYuzUS+ULZyhX3WQgHrRBuVhC13IwySe1EBxxuKM0YzRjKUZ46nH11gF9YdhkIBkZsjM6BawO+o7APdYH/2g7PdBvX6DrrEG6pWsnSqIZqy71DYTsqfXSUA8lRn1o+7ZQahz3xWc5nXLjM35oDkfNOeD2rxGd7G8vt7tsNl+eb4cDrbXvtl9dU9+2l8O5+fd/fnldLrb/bM/vfROP5/2594+7y96Vl1xOH/TVgW/H08Ho9e7a3ZYTk3B3NuzU5A4BfKtQlxW4GqrXFfgyjQVpN0o0LJCzYVcQZeHsqSwehc1zLtovHQXawrUMIaUiJYU8rJCDIJK6uOTpkKU9L8lYq2QIM6LEmVZQvdMVEL3kmsldK24kajLEkWiK5RSrwKFNtWSw6KnViR0XcEgIlNZHEVcMWYNtiUOW4Vcl2wVV5xZqm2Loxa1hUWJtDanXPP0RSbZYm99v5wFbWmxoO/gzvgO9ozv4M/4oQZ9U0+Oi4sevYNB6e8NSn9vUPpgg+r27gr6iTbzE+XbUax4qzTGIEp7Y3Gq9VZDVqa1wFr6jXRV+G1SV8xJFDEIfXFIixIr3swMZ2WuWwRkDkFWRrB2EyniSdc3HdkkURiVpJIXS5noQyWiVLxYxPLGVn8iURqmQ/9TkE0SLc2FU78RliTWHo4wS6Fv522LQsyzErbAbFGoMpfusGkMTG8WvE1jyDzvQr/fNym0ORcS0xaFdJ1N/fdmk4LMTTDVLXdRBHbQb/IN+W3u5PrRuSWfsMI03nT9+a59s1BvGf9v+Z/1aP9wvNz8BflqSpfj/uvp4IffX84Pb84+//uEM/gL8+ny+HD49nI5mNL1f0z9+URafarxs30W62Gmu1zsINq5SnqOP7/aUP4D","brillig_names":["revoke_twitter_verification"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"nZPdioMwEIXfZa69MJo/fZVSStRYAiFKqguL+O47KclWF7KU3mQyzpzPo5lsMOhuvd+MG6cHtJcNOm+sNfebnXq1mMnh0w3KsJAa2roAQqFlGBi0AgOHttn3AlL/bfFah/YDALGz8tot0LrV2gK+lF2fTY9ZuWdclMdqWYB2A0YEjsbqsNuLl7rMS0lJiYxy3Avxi8DsBCF5iJA8IiSKEkCQk77K61nFop6x1zcQyt81IGuRDLAmZ4Dm9bRuop5y+ZEBSZOBRuYM8Lyel+kP8Ip/YqCpqghoapYzIP8xINMQifLPEVwxVb3xp9neA8ob1Vkd03F1/aG6fM+pku7G7KdeD6vXgXS4ILhecAir+rqHt/0A","brillig_names":["sync_notes"]},{"name":"verify_discord","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_commitment","type":{"kind":"field"},"visibility":"private"},{"name":"verification_signature","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2940325361005241554":{"error_kind":"string","string":"Only oracle can verify"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZnRTis5DIbfZa57kdhJnPRVEEIFylGlqqAeWGmFePe1M7bbsprROUN7w3y4kz+O80+SaT+H5+3jx6+H3eHl9fewvvscHo+7/X7362H/+rR5370eOPo5BPkTAYY1rvhKw7ryFUGvdVg3viYcrznqtQzrGBlKNLAIBYNkUBUqGlikgYE0T6sBQlKIoADBIDNw74DBgFsBN4cUDSySg0EyqAoFDSxCYCDNpa+aFCRDAQzBgNMA7h0jd4pRoCiARSTVEZoCokFVSBZJpCDVRekiN4VCCpQVKqeB3HuSm1MSyAolGFiELEIeaQrVIs3ukSkQyCEacO8pM0BVEF+MYB8liySLZIuISToUixS7h9DAlKXgIzSFJvegAI1QAhgUhRgMskFTADSoCpgMLJLsniStCoO4ZYSq0JPvUBR6VTvYzWQ3i8NHsEiz5n0UDNTL2yEbaO8U0cBuBrsZtHdCi6A0rwLSnC1BfQoEuiUEuiU6cKo5CDQFmYIRSKFGg2xgNzdr3jRSAxpIc3ZvlSnoIGlkYBCLZhRoCmKADvLEjVAUxNiZXdekPjkLZIOmIPUZgRTA7pE1YYSqIJObi0BTEEN2kFVrBFLo+XSwSK8GCTSFXgSGGMSISmQUo1N2akZiwiwrapCFQImMZPlSyk7NKHuL7CrFY8VVyFXIVeR5z7Jihz6pncSSSqQU+3SOVI1kWRsJtLhMyakaocfEbiUISfVK7JSdmpFUUqmOXuEu0ImMZA9Q8hh4DDyGHkOPJddLHuuGHCk7NaPiLYq3EF/0EfWtofRYz36kquNAyV7JY5K9krTFvq9GJ4+JdUvqlJ2aUXLlZPVDMfJIJTqREXm/5DGfD/T5QJ8PbNZHCr3t19dqsFPCw/txu5VDwtmxgQ8Tb5vj9vA+rA8f+/1q+Gez/+g3/X7bHPr1fXPkT7ly28MzX1nwZbffCn2tTq3DdFPeuLO2hlzQBfKlQpxWSFV2zK6QagJXKO1CAaYVaiZQhZorTSnMjaJEywFKKlOjSNMKMXodIh+uXCESXEjkaQni3VUleEfIU8MoMwpY0RQSTJaS5oaBVHwcKbRFxQxnxaxTxZxToOimopQnTTUjIWuvjyOefBnZo3+swSdg04CzNP6nMePNnJs9XaVCOmkEutTAmWmVh36cVaqTzvrTes48pDPmZC9YEjEBTWYRZ+zJpxHzVuVNcspaccafVOVUPdaitjApUWef1Hp6VDOUJRYnsjSAT1RTBYUrGBSuYFC4gkHhtgY9qydOGhSuYFD4uUHh5waFWxu0FvCC1jZVULyCQfEKBsUrGBRvatCzerZAk/W8gkHx5wbFnxsUb2zQmG0gEE4HFf5G5vLANaPAb7uWBL/vnvzJfr/UmDl7Ipm1Ep6cBd9OfTPmBDjtrHC2cH2XmPEmfyWjCvnssPQXAsVTKDMZzA0Coz3p/I5WFklQCn7CyNOlpJtKxOInaD6DwyIJajYd/HZcFkk09IWzpUmJ2aXXS8Ev+m2JQszp9DoCixSqvwhAWJRDgrMFb1EOOfkoMsVFCs3nokRcooCn2cS8aBRYfBPkN/wFClSCvximBe2b7+SNlvixga0wLS3qv1r+Fwv1kvy/tb/n/zZPu+PFryVfonTcbR73W/335ePwdPbp+79v9on92vJ2fH3aPn8ct6J0+smF/9wBn035d4V7+SqO/6W4oiL/8Hc1d8h7On+rdP8lqfwH","brillig_names":["verify_discord"]},{"name":"verify_twitter","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"profile_id","type":{"kind":"field"},"visibility":"private"},{"name":"handle_commitment","type":{"kind":"field"},"visibility":"private"},{"name":"verification_signature","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2940325361005241554":{"error_kind":"string","string":"Only oracle can verify"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZnRTuM6EIbfJddc2DO2x+6rIIQKlFWlqqAuHOkI8e4748xMWqREu6HcNF+n9m97/Nd2ko/haffw/ut+f3x++T1sbj+Gh9P+cNj/uj+8PG7f9i9Hjn4MQT4iwLDBG77SsKl8RdBrHTaNrwnHa456LcMmRoYSDSxCwSAZVIWKBhZpYCDV080AISlEUIBgkBm4dcBgwLWAq0OKBhbJwSAZVIWCBhYhMJDq0lZNCtJDAQzBgLsB3DpGbhSjQFEAi0hXR2gKiAZVIVkkkYJkF6WJ3BQKKVBWqNwN5NaTFE5JICuUYGARsgh5pClUizQrI1MgkEM04NZTZoCqIL4YwX5KFkkWyRYRk3QoFilWhtDAlCXhIzSFJmVQgEYoAQyKQgwG2aApABpUBUwGFklWJkmtwiBuGaEq9M53KAo9qx2sMFlhcfgIFmlWvY+CgXp6O2QDbZ0iGlhhsMKgrRNaBKV6FZDqbAnqUyDQLSHQLdGBu5qDQFOQKRiBFGo0yAZWuFn1ppEa0ECqs3urTEEH6UYGBrFoRoGmIAboIP+4EYqCGDuz65rkJ2eBbNAUJD8jkAJYGVkTRqgKMrm5CDQFMWQHWbVGIIXenw4W6dkggabQk8AQgxhRiYxidMpOzUhMmGVFDbIQKJGRLF9K2akZZa+RXaV4rLgKuQq5ivzfs6zYoU9qJ7GkEinFPp0jVSNZ1kYCTS5TcqpG6DGxWwlCkr0SO2WnZiSZVKqjV7gJdCIj2QOUPAYeA4+hx9BjyfWSx7ohR8pOzah4jeI1xBd9RH1rKD3Wez9S1XGg9F7JY9J7JamLfV+NTh4T65bUKTs1o+TKyfKHYuSRSnQiI/J2yWM+H+jzgT4f2KyNFHrdz8+bwU4J92+n3U4OCWfHBj5MvG5Pu+PbsDm+Hw43w3/bw3sv9Pt1e+zXt+2Jf+XM7Y5PfGXB5/1hJ/R5M9UO81VjJdTa7JzoAvlSIc4rpCo7ZldINYErlHahAPMKNROoQs2V5hQWRsHnGcsB+xrmRpEW8hBlNxzzwIcrV4isdi6R5yWId1eV4B0hzw2jLChgtcmgBLOppKVhIBUfRwptVTLxLJlpLplLCpGiKUCYN9WSL0NxX/Kgpvko+PcafAI2DUh5XmPBmzk3S0apMCWD1/xLDVyY1mLZIKqzzvrbfMY2m88Fc7IXTCImoNlexAV78mnEvFV5k5yzVlzwJ1U5VY+5qC3MStTFf2qd/qoZyhqLA2ZPKM0aFK5gULiCQeEKBoUfNeh5PuusQeEKBoXvGxS+b1D4aYNiNGcAnjnjS0LxCgbFKxgUr2BQ/FGDnuez4Gw+r2BQ/L5B8fsGxR82aMzFzwjTQYWfyFweuBYU+G7XOsH3u9OUQK2XGgtnTySzVsLJWfDl1AdLC1ecFi7EWYkFb/IjGVXIqa4RKN6FstADWDQ3urnPZvNfJGg6QFOeTyX9qEQsfoLmMziskqBGfj8TyyqJhr5wtjQrsbj0eir4Rr+tUYg5TbcjsEqh+o0AhFV9SHC24K3qQ04+inx2zPoXheZzUSKuUcBpNjGvGgUW3wT5Dn+FApXgN4ZpRf3mO3mjNX5sYCtMS6var9b/i4V6Tf+/1L/jb9vH/enibcmnKJ3224fDTr8+vx8fz359+//VfrG3La+nl8fd0/tpJ0rTKxf+uAVqN/xe4U4exfFXvpWiIl/4Wc0t8p7OT5XuPqUrfwA=","brillig_names":["verify_twitter"]}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"AztlanSocialVerifier"}},{"name":"fields","value":{"fields":[{"name":"profile_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"is_twitter_verified","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"is_discord_verified","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"twitter_handle_commitment","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"discord_handle_commitment","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"twitter_verifier","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"discord_verifier","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"verification_oracle","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"profile_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"verification_oracle","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanSocialVerifier::constructor_parameters"}}],"kind":"struct","path":"AztlanSocialVerifier::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"profile_id","type":{"kind":"field"}}],"kind":"struct","path":"AztlanSocialVerifier::get_discord_commitment_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AztlanSocialVerifier::get_discord_commitment_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"profile_id","type":{"kind":"field"}}],"kind":"struct","path":"AztlanSocialVerifier::get_twitter_commitment_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AztlanSocialVerifier::get_twitter_commitment_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AztlanSocialVerifier::get_verification_oracle_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanSocialVerifier::get_verification_oracle_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"profile_id","type":{"kind":"field"}}],"kind":"struct","path":"AztlanSocialVerifier::is_discord_verified_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"AztlanSocialVerifier::is_discord_verified_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"profile_id","type":{"kind":"field"}}],"kind":"struct","path":"AztlanSocialVerifier::is_twitter_verified_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"AztlanSocialVerifier::is_twitter_verified_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanSocialVerifier::revoke_discord_verification_parameters"}}],"kind":"struct","path":"AztlanSocialVerifier::revoke_discord_verification_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AztlanSocialVerifier::revoke_twitter_verification_parameters"}}],"kind":"struct","path":"AztlanSocialVerifier::revoke_twitter_verification_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_commitment","type":{"kind":"field"}},{"name":"verification_signature","type":{"kind":"field"}}],"kind":"struct","path":"AztlanSocialVerifier::verify_discord_parameters"}}],"kind":"struct","path":"AztlanSocialVerifier::verify_discord_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"profile_id","type":{"kind":"field"}},{"name":"handle_commitment","type":{"kind":"field"}},{"name":"verification_signature","type":{"kind":"field"}}],"kind":"struct","path":"AztlanSocialVerifier::verify_twitter_parameters"}}],"kind":"struct","path":"AztlanSocialVerifier::verify_twitter_abi"}]}},"file_map":{"104":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr","source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"},"107":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/storage.nr","source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"},"146":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"163":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"172":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"20":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"288":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"325":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"343":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr","source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"},"344":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"363":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"43":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"50":{"path":"/root/x/aztlan/contracts/aztlan_profile/src/main.nr","source":"use dep::aztec::macros::aztec;\n\n// CONTRACT 2: HYBRID SOCIAL VERIFIER\n// Public: Verification status (true/false)\n// Private: Actual handles (stored off-chain)\n#[aztec]\npub contract AztlanSocialVerifier {\n    use dep::aztec::macros::{functions::{public}, storage::storage};\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n    use dep::aztec::protocol_types::traits::ToField;\n\n    #[storage]\n    struct Storage<Context> {\n        // Public registry reference\n        profile_registry: PublicMutable<AztecAddress, Context>,\n        \n        // Verification status - PUBLIC (only shows true/false)\n        is_twitter_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        is_discord_verified: Map<Field, PublicMutable<bool, Context>, Context>,\n        \n        // Handle commitments - PUBLIC (but meaningless without key)\n        twitter_handle_commitment: Map<Field, PublicMutable<Field, Context>, Context>,\n        discord_handle_commitment: Map<Field, PublicMutable<Field, Context>, Context>,\n        \n        // Verification metadata\n        twitter_verifier: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        discord_verifier: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        \n        // Oracle/Backend address for verification\n        verification_oracle: PublicMutable<AztecAddress, Context>,\n    }\n\n    #[public]\n    fn constructor(\n        profile_registry: AztecAddress,\n        verification_oracle: AztecAddress\n    ) {\n        storage.profile_registry.write(profile_registry);\n        storage.verification_oracle.write(verification_oracle);\n    }\n\n    // VERIFICATION FUNCTIONS\n    \n    #[public]\n    fn verify_twitter(\n        profile_id: Field,\n        handle_commitment: Field,  // hash(handle + user_salt)\n        verification_signature: Field  // Oracle signature\n    ) {\n        let caller = context.msg_sender();\n        \n        // In production: verify oracle signature\n        // For now, just check caller is oracle\n        assert(\n            caller == storage.verification_oracle.read(),\n            \"Only oracle can verify\"\n        );\n        \n        // Store verification\n        storage.is_twitter_verified.at(profile_id).write(true);\n        storage.twitter_handle_commitment.at(profile_id).write(handle_commitment);\n        storage.twitter_verifier.at(profile_id).write(caller);\n    }\n\n    #[public]\n    fn verify_discord(\n        profile_id: Field,\n        handle_commitment: Field,\n        verification_signature: Field\n    ) {\n        let caller = context.msg_sender();\n        \n        assert(\n            caller == storage.verification_oracle.read(),\n            \"Only oracle can verify\"\n        );\n        \n        storage.is_discord_verified.at(profile_id).write(true);\n        storage.discord_handle_commitment.at(profile_id).write(handle_commitment);\n        storage.discord_verifier.at(profile_id).write(caller);\n    }\n\n    // USER FUNCTIONS\n    \n    #[public]\n    fn revoke_twitter_verification(user: AztecAddress) {\n        let caller = context.msg_sender();\n        assert(caller == user, \"Only user can revoke\");\n        \n        // Get profile ID from registry\n        // In production: call registry contract\n        let profile_id = user.to_field(); // Simplified\n        \n        storage.is_twitter_verified.at(profile_id).write(false);\n        storage.twitter_handle_commitment.at(profile_id).write(0);\n    }\n\n    #[public]\n    fn revoke_discord_verification(user: AztecAddress) {\n        let caller = context.msg_sender();\n        assert(caller == user, \"Only user can revoke\");\n        \n        let profile_id = user.to_field();\n        \n        storage.is_discord_verified.at(profile_id).write(false);\n        storage.discord_handle_commitment.at(profile_id).write(0);\n    }\n\n    // VIEW FUNCTIONS\n    \n    #[public]\n    fn is_twitter_verified(profile_id: Field) -> bool {\n        storage.is_twitter_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn is_discord_verified(profile_id: Field) -> bool {\n        storage.is_discord_verified.at(profile_id).read()\n    }\n\n    #[public]\n    fn get_twitter_commitment(profile_id: Field) -> Field {\n        // Returns commitment hash (meaningless without user's salt)\n        storage.twitter_handle_commitment.at(profile_id).read()\n    }\n\n    #[public]\n    fn get_discord_commitment(profile_id: Field) -> Field {\n        storage.discord_handle_commitment.at(profile_id).read()\n    }\n\n    #[public]\n    fn get_verification_oracle() -> AztecAddress {\n        storage.verification_oracle.read()\n    }\n}\n"},"69":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"},"71":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/utility_context.nr","source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"},"97":{"path":"/root/nargo/github.com/AztecProtocol/aztec-packages/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr","source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"}}}