{"noir_version":"1.0.0-beta.5+0000000000000000000000000000000000000000","name":"AztlanNFTProfile","functions":[{"name":"constructor","hash":"12640009200745151065","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/72UvQ6CMBSFC9RoxcmfQZ+iBBBGB3cHB+eGH+NgMIQ48+hCcpveNOjS1ps0l6bw9ZzTBo+o8qBTYlAScoDOoPtoPRjGCebcrCKm7WuTn/MkYRP+LOqPGTA9N3wu+Y7y53PgnHvFx17kvothhOh5RdT9cOVfnp9L/5sfnkPwuv3ildjTkeo+LbL5eFY7YIn38/IqmrK6dk0r7tWtfXQV0QqL0A1jkT6ZLodBHR0GFf09qJCoPyzt1Xe2bniWcy41BcCfAV8vitbx+3uYL5Ev2amBzjoTUR2LWqSiLJNCrDU+zm3M6QPKSKA56wYAAA==","debug_symbols":"pZPNjoMgFIXfhbULfgTBV2kag4oNCUFDdZKJ8d0HWnB0QRd1wwEu5wNOclfQq3Z5NNoO4xPUtxW0ThujH40ZOznr0frdFcAwIAJqWgBUvoW+hYEaQa9VVB502wqQAM3slAr+A9HfM0mn7AxquxhTgB9plteh5yTtS2fpfNUTle29euCgjQqzrfh3w7xVMBLNgovdTs9+lPejEqIIQCWudgJi5ITAeQSHhEUEh5TvCHZ+BMkTKk5EJFRcwByh/PANVHKa/oEoZjnGhygRhDghIM6Gya6HWV0Ok18OU3wb5t2vZKfdqXe2QHNatkbF5bDY7lCdf6dUSb03ubFT/eJUIB0a0I83DAtM71u47Q8=","names":["constructor"],"brillig_names":["constructor"]},{"name":"get_address_by_username","hash":"8639149687056068145","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzYobRxDu2dFIGmkVKU4eZGZXWu3eBF5vcgvETzCRtIGE4CQkuQXmmEseIwGDX8IHv4XBYPDB+OKbwQZj9arL++mbmpEWdfunQPRMV3VVdf11TSsya4jcz0IL5hhkbubGbD/IPfLKIkXPxk1oC966MXXjAeBjjxtPFV188T/Nxmepqe7Zo/7HqeMZ0j7CMwD/rOP4fFNe8+e9WBiYzeTANV2Hl+dbsMbCt8Bb1oe028rvp4Htln9l6m0lMXe7DCL7WPifA3/jj38m/O+E0f89/4sw/PO+Wcfh0uix5tNWA7Ppe/SHyMWDxOM+x1r9jmkO5fdM2JyISJ7ow/YRP4jtEkXXkYLDXEMcykkUOR+KF/vbwsyN2c3giCcGik4cZ22Y9+jXya5xJvJ7io1CxFmb9Knzmdiuo+g6UnAcGx1FTkeR8znxkhgdmGrMRjWjyOE5lsP1DuXEHuUgTUJyEo9ykJeciSKn7VEO8jov16PkNvp15sZsP3jfW3ZBN495eiY24h4c7dcD2RyTfdILcYeAY98PANcm3BeAw3xgiOkd7WTHn4Ev0wmkihyP9j0dkF4IbHvNvj3SC3Foe7Yv2p7ti7bX8kBAs6/YaVf7DhU5bZIvPFs0L3BerseE6O+6MXCOZLeAryFZqbI/j7KnfC4iDJR9c/ykpBfiMLY4fjC20F8MWowIndXrf+DLdAJajMTET+tXkYd8pwyV9a0a/RKFls9ved81NoV+7kZrgyfu2ebk1+65+OuX736d31ss7/5x7/fix+X3y2IR1ejJdme6uIbO+lD83yo36WduPtsDpqfXF1lxeW0HjgmUnxD9T+4dY1HG1h56Xk6L/PK4uCwmxWIxnhecwxYOwE74LSox1CZd5LmuZmm9Ades39z4MWuWtr+4YX+xsr/bNfv7142W9s8d5A1N9fyNCIc2OiCcdnYKD4mpZMsexBdY8yzM3JjtB3lC+vztRruvp+5Z6qPkBdokZA6vYGz1eAZ6oK5X9is37doHXKzQcw09VOi182VE9HguRfSOvNCnF6Sr2LCt0CM/juN/3Ght84b0w5zqEQ733iWc9i2kfY+loPN/7jnw/cGN+4yIcJiH/E2/aw/b9GeO1meILW7aZ3D/iTjtW16rQy2Sh3kr/D9G3uJ3HOct5mis0HPebsvzO+V6HJmqLzm+MWdSwqHcDuHQ7xckD+NFfIM5w+e6du8ge7Dr7gM/9COeH7iWz0Chfwi6PHDPQ1OtZxxfWl1iXYzR617T3SfGY8AaMtZqSESyA/U7O99/ivyeqeZ7iPvPLunDMcT30mkg3zTVAO0+8kuzvodhn6F+wkvrgbV451rb1A9qtVarJVxndqklWs+h1ZK+uVmvrNUJriNI/8iNFv+Y9o/yuC5rMaXVAqFPFXq0b0KyMSdSwmk9QFNsdRv0ajpfNL0w9nAty962B875OhmfwBk/0c543Duf8U29tgX2wUCh1/rvEdGjzbW85N4X5fYJh/nEOVvXFz+mfWz7n0l6B+3/zDbwlR7A931EdrSYnyyPVlcm05P86Gyx7T7Ct/z55OSH+XhSZMv8Sptt8odik/Iaj/FvoePe5Y6A6YVfQvTPhXb1e+GeJa4SRZ6le91AF9WMVzyUuVa5OZeWVfq4rNKL7F5Z1VFwfcBhblo4dO9oL+QleiRE/8q9i0+6sEbWjxT5XZK/obcyhznKvGJlTuitf14KPzfi3n33VVcyiT/OsW4SOyHyapVS03kxzfOzcb4c55NtefUO7hwjrsUoAAA=","debug_symbols":"tZfbaiM7EEX/xc9+kKqkKim/MoTgJM5gME7wJAcOIf8+VS7tdjzQDdMwL9mru6NlXUp9+dw87x8/fj4cTi+vvzZ3Pz43j+fD8Xj4+XB8fdq9H15PdvZzk/xP7ps73W4oReQIiuCIElEjJEIjWkRYOCxslmZBERxRImqERGhEi+iXKCkiLCUsJSwlLMUsYiERGtEi+iVqisgRFMERJSIsNSzVLN2iRfRLSIrIERTBESWiRkhEWCQsEhYNi4ZFw6Jh0bBoWDQsGhY1S86Wpsm03bQ0Mo+kkabKbFlG1pEyUke2kT2yp5F5JI10X7EsI91nC9tlpI5sI81H1o+c7ASxg5+xljknQAYQgAH2M1QdzEvi0AB9gBdoQAYQgAEFYP0ldRCAAhqgD/CiDcgANzcHBhRABQhAAQ3QB3gFU3cgAAMKoAIEoIAG6AO8pgNgrjB7ZXNyKIAKEIACGqAPEEyvYHoF0yuYXi9mtmrMXsDsy+0lHFAAFSCjEryUA1AbXs0X8HIOyAACMKAAKgDmBnODucHcYe4we0lfOu81zZczCmijz17GDpQSIAN8yMWBAQXgQ64OAlBAQ3OYM8wZ5kwABhRABQhAATDTRfj1td3g3v7wft7v/db+7WZvj4C33Xl/et/cnT6Ox+3mv93x4/JPv952p0u+78521Wphf3q2NOHL4bh3+tpeW6f5ptSVRmtOSSdBvTXkeUNOwsNgtwueDFbTNwpaUFQZBluyScBZbgQ8L9Be6jBo79c+kPYbRZlXsGIWC5er4HYa6sJE2sJjEMQ8Z5B5Qy06BLW0Fe1l6oDM//7SCDhjIYlJ1hi0YBJJ6+ws5vRPFVlaQUHqt3r6G4V2rIXd5mSVovO0LXqZVywY7BYJA5U6u7HyworU2jGd0ug6nb3dKhbKSiVja+m1LO0Bs+oWQ/O3mLY0FdP+tteNNNuL3BfGUaeyUEnX6ZTbbtDCSJQb1lQL0axicVFZZRpKSX1OslRaadoj9u7W50pryWA1dJ1PWmVo0zAorepDIRRW/j6Zf2GoZRpF1bzK0KdNKpnXGPi6zbmuGgXLtM25rRmFlfNU2GVF+z49wLvKmvaEzdnLqt9v6P/Ns3tN//9of29Hu6fD+eYT+stN58Pu8bgfhy8fp6dvV9//f8MVfIK/nV+f9s8f572brt/h9ucH2Zs81XTv3092mFPe2iuRH2a/WrNd5fsv78xv","names":["get_address_by_username"],"brillig_names":["get_address_by_username"]},{"name":"get_profile_by_address","hash":"10925226985658800705","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzY7bNhCmVpZt2evaTfsgktde794MZLPtrUDzBKrtbS9piiIoetS9lz5GCxToS/TQtwhQoEAOQS65BUgQ0+ZkP38ayV6YzM8ABiXOcL7hcGZI0ZHZUuR+llrQxyR9c9dmx1HuUVcWKXY2TkIbELmH1L2fAD/2OPFUscWX/otscpma6pw92n+WOp0h/SM6A+jPOk7PV+Wtfp6LpYHZTQ4c03V8eb4HYyx9DbplfEi/rdf9IrDf8i9Mva8k5u6XQbDPRP8V6Df+9Gei/0EY+9/pvw6jP++bbRz+YPRY8+mrgdlde1wPwcWNxOM8J1r9jqkP8XsmbE5EhCf2sH9kHcR3iWLrSOFhriEPcRIF533p4vW2NHdtdjcac8dAsYnjrA39Htd1emicCX5P8VGIOGuTPXVrJr7rKLaOFB7HRkfB6Sg4n5IuidGBqcZsVNMKDvcxDtc7xIk94qBMQjiJRxzUJXui4LQ94qCuq3LbSm7jus5dmx1HY9HdBds85uml+IjP4Oi/HmBzTPbJLuSdAo/XfgC8NvE+Ax7mA1NM7+gn2/4IellOKFVwPPr3YkB2IbHvNf/2yC7koe/Zv+h79i/6XssDIc2/4qdD/TtUcNqELzpb1C90VW7bhOQfujZwjmT3QK8hrFSZn0fsGe+LSANl3hw/KdmFPIwtjh+MLVwvJi1GRM7a9SfoZTkhLUZi0qedV1GHfKcMlfGtGvsSRZb3b3k/NDZFfuFa64P/3LPNyS/dc/HLo29+Wjxerh4+efxz8f3q21WxjGrsZL+zXFwjFxvdlygbm+q8Y0UHjjshHTZWJM5a5a6euevPjqDZxe2FWez0J6Yae4ifkPwj944xL23rCDtvZkV+c1bcFNNiuZwsCq4VBvzF37wSq22yRZ7raqN2BuHa+MS1H7I2avOLG+YXK/O7XzO/311rZX89AG9I4zGmh4qPToin7dGiQ2Iq2TMHWQusrZbmrs2OozwhexzsZl7/u2epw5IX6JOQObymibXjGdiBtm78V+76tQ+8WJHnWn2qyGv72Ijkcf+L6B114Zpek63iw7Yij/o4jn9zrfXNG7IPc6pHPJx7l3jaN5f23ZeCzX+458D3FHc+z0TEwzzku4NDz8pNfxpp5xnxxV3PM3zORZ52Z6DVoRbhYd6K/g+Rt/i9yHmLORor8py3+/L8QbltR6a6lhzfmDMp8RC3Qzxc92vCw3iRtcGc4X1du9+QOdhxf4E+XEfcP3As74Ei/w/Y8rd7HppqPeP40uoS22KMXvea7lgxHgPWkIlWQyLCDnTeOfieVfB7pprvIe5Zu2QPxxDff6eB1qapBmj3np+b7X0PrxnaJ7q0M7AW71xrm86DWq3VagnXmUNqiXbm0GpJ39ztrKzVCa4jKP+vay3/Kc0f8bguazGl1QKRTxV59G9C2JgTKfG0M0BTbHUb7GraXzS7MPZwLGPvmwPnfB3GR7DHT7U9HufOe3zTWdsSr8FAkdfO3yOSR59reclnX8TtEw/ziXO27lz8lOax7/8sOTto/5u2Qa+cAXzfR2Tj5eJ8NV5fmczO8/Hlct99hG/8xfT8u8VkWmSrfGPNPvyh+KS85WP8W+q4d7kjYHnRl5D8c5Fd/164Z4mrRMGzcq8b5KKadqND6WuVu31pWZWPy6q8YPfKqo3C6wMPc9PSqXtHf6EusSMh+VfuXdakC2Nk/EjB7xL+jt1KX+X+UJHvK/J2fV6KPtfi3H2fqzaYpB/72DaJnRB5tU6p2aKY5fnlJF9N8um+vHoLkTlUpi0pAAA=","debug_symbols":"tZjdbuM4DIXfJde5ECmJlPoqg6JI23QQIEiLTLvAoui7LxnqOM0CNmYMzE3P57j+rB9KdvK5ed4/fvx8OJxeXn9t7n58bh7Ph+Px8PPh+Pq0ez+8nuzTz03yP9Q3d7rdcIqgCI7IESWiRkiERrSIsOSwZLM0C47IESWiRkiERrSIfomSIsJSwlLCUsJSzCIWEqERLaJfoqYIiuCIHFEiwlLDUs3SLVpEv4SkCIrgiBxRImqERIRFwiJh0bBoWDQsGhYNi4ZFw6JhUbMQWZqGeLtpaSSN5JGmomxZRtaRMlJHtpE9sqeRNJJHuq9YlpHus4ntMlJHtpHmY2sHJRNycSAADyD/pDr4J+KQAQVQAQKwO7HdgbxAuTkQgAEZUAAVIAAFWJO5O/QBXrQBBGBABhSAmXNyEIACGqAP8EIOIAADTJjJoQIEoIAG6AO8pgMIwIAMgLnC7PWdfXa8wgMaoA/wOg8gAAMwvILhFQyvYHi9pHN28Jv6dHshByigAfqoBC/nANSGF3RABhRABQhAAQ0Ac4e5w9xh7jB3mL2qL433ss7VN8MEoGgzexkHZEABeJfFQQAK8C5fdtc+gBIAZoKZYCaYqQIEoIAG6AN8gQTAzBfh19d2g23/4f283/uu/+05YE+Ht915f3rf3J0+jsft5p/d8ePyT7/edqdLvu/OdtbKdn96tjThy+G4d/raXq9O85eyJBlXs7BOgnproHkDJcnDYDtJngxW7jcKXlDUqQ2JJ0EmuRHkeYH2UodBe7+2gbXfKMq8IitGsdjMTILbYagLA2k1gU5wznMGmTfUokNQS1txvUwNkPn7L/UgEyaSM8sagxYMImudHUVKf1VB0goKUr/V058otGMubAeUVYqep2XRy7xiwWC7Jwxc6uzCooUZqbVjOKXxdTh7u1UslJUKYWnptSzt2bNqi8ltdotpS0MxrW9770izraC+0I86lYVKug6n3DaDF3qiuWFOtTDPKhYnNatMXSmpz0mWu6LXrnCabcfCjlmVsdm0axtyLr87q5SmhUrpm4J/+9Fj75TlOqm8ytCmseS0qg2FUd30fUb/wFDL1IuqtMrQp51CKK8x5Otek+uqXmSZ9prc1vTC1tRUkmXF9X16i+gqa65n7BC9rLp/Q/tvXiDWtP9/19/b0e7pcL75iv/lpvNh93jcj8OXj9PTt7Pv/77hDH4ieDu/Pu2fP857N11/J7A/P+yBveWa7/1rnR3a4txS6n5IftYWGle5//LG/Ac=","names":["get_profile_by_address"],"brillig_names":["get_profile_by_address"]},{"name":"get_token_id","hash":"2953271915397931821","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzYobRxDu2dFIGmkVKU4eZGZXWu3eBF5vcgvETzCRtIGE4CQkuQXmmEseIwGDX8IHv4XBYPDB+OKbwQZj9arL++mbmpEWdfunQPRMV3VVdf11TSsya4jcz0IL5hhkbubGbD/IPfLKIkXPxk1oC966MXXjAeBjjxtPFV188T/Nxmepqe7Zo/7HqeMZ0j7CMwD/rOP4fFNe8+e9WBiYzeTANV2Hl+dbsMbCt8Bb1oe028rvp4Htln9l6m0lMXe7DCL7WPifA3/jj38m/O+E0f89/4sw/PO+Wcfh0uix5tNWA7Ppe/SHyMWDxOM+x1r9jmkO5fdM2JyISJ7ow/YRP4jtEkXXkYLDXEMcykkUOR+KF/vbwsyN2c3giCcGik4cZ22Y9+jXya5xJvJ7io1CxFmb9Knzmdiuo+g6UnAcGx1FTkeR8znxkhgdmGrMRjWjyOE5lsP1DuXEHuUgTUJyEo9ykJeciSKn7VEO8jov16PkNvp15sZsP3jfu3ZBN495eiY24h4c7dcD2RyTfdILcYeAY98PANcm3BeAw3xgiOkd7WTHn4Ev0wmkihyP9j0dkF4IbHvNvj3SC3Foe7Yv2p7ti7bX8kBAs6/YaVf7DhU5bZIvPFs0L3BerseE6O+6MXCOZLeAryFZqbI/j7KnfC4iDJR9c/ykpBfiMLY4fjC20F8MWowIndXrf+DLdAJajMTET+tXkYd8pwyV9a0a/RKFls9ved81NoV+7kZrgyfu2ebk1+65+OuX736d31ss7/5x7/fix+X3y2IR1ejJdme6uIbO+lD83yo36WduPtsDpqfXF1lxeW0HjgmUnxD9T+4dY1HG1h56Xk6L/PK4uCwmxWIxnhecwxYOwE74LSox1CZd5LmuZmm9Ades39z4MWuWtr+4YX+xsr/bNfv7142W9s8d5A1N9fyNCIc2OiCcdnYKD4mpZMsexBdY8yzM3JjtB3lC+vztRruvp+5Z6qPkBdokZA6vYGz1eAZ6oK5X9is37doHXKzQcw09VOi182VE9HguRfSOvNCnF6Sr2LCt0CM/juN/3Ght84b0w5zqEQ733iWc9i2kfY+loPN/7jnw/cGN+4yIcJiH/E2/aw/b9GeO1meILW7aZ3D/iTjtW16rQy2Sh3kr/D9G3uJ3HOct5mis0HPebsvzO+V6HJmqLzm+MWdSwqHcDuHQ7xckD+NFfIM5w+e6du8ge7Dr7gM/9COeH7iWz0Chfwi6PHDPQ1OtZxxfWl1iXYzR617T3SfGY8AaMtZqSESyA/U7O99/ivyeqeZ7iPvPLunDMcT30mkg3zTVAO0+8kuzvodhn6F+wkvrgbV451rb1A9qtVarJVxndqklWs+h1ZK+uVmvrNUJriNI/8iNFv+Y9o/yuC5rMaXVAqFPFXq0b0KyMSdSwmk9QFNsdRv0ajpfNL0w9nAty962B875OhmfwBk/0c543Duf8U29tgX2wUCh1/rvEdGjzbW85N4X5fYJh/nEOVvXFz+mfWz7n0l6B+3/zDbwlR7A931EdrSYnyyPVlcm05P86Gyx7T7Ct/z55OSH+XhSZMv8Sptt8odik/Iaj/FvoePe5Y6A6YVfQvTPhXb1e+GeJa4SRZ6le91AF9WMVzyUuVa5OZeWVfq4rNKL7F5Z1VFwfcBhblo4dO9oL+QleiRE/8q9i0+6sEbWjxT5XZK/obcyhznKvGJlTuitf14KPzfi3n33VVcyiT/OsW4SOyHyapVS03kxzfOzcb4c55NtefUOPKRRPcUoAAA=","debug_symbols":"tZfdauM8EIbvxcc5kEbSjNRbWUpJ23QJhLRkkw8+Su59ZzJ67WTBhjXsSd/HdvVEP2PZ/h7ed6+Xny/748fnr+Hpx/fwetofDvufL4fPt+15/3nUs99DsD+xDU+yGSh4RA/ySB7Zo3iwh3hUD7cktyS1VA3ySB7Zo3iwh3hUj3aLHDzckt2S3ZLdktXCGuwhHtWj3aIEj+hBHskje7iluKWopWlUj3YLDh7RgzySR/YoHuzhFnYLu0XcIm4Rt4hbxC3iFnGLuEXUEqOmaiJthhp6xp7UU1UxaeaepSf3lJ61Z/NsoWfsST3NlzVzT/PpwjbuKT1rT/WR9iMGPUHJwM5oyxgDIAIIkAD6M1QM1EtsUAGtgxWoQwQQIAEyQPtLYsAAAVRA62BF6xABZq4GCZABBcAAAVRA62AVTM2AAAmQAQXAAAFUQOtgNe0Ac4HZKjsFgwwoAAYIoAJaB8b0MqaXMb2M6bViTlqN0Qo42XJbCTtkQAFwrwQrZQfUhlXzDaycHSKAAAmQAQUAc4W5wlxhbjA3mK2kb523mk63MwKovc9WxgYUAiACbMjZIAEywIZcDBgggIrmMEeYI8yRAAmQAQXAAAHATDfh9boZsLe/nE+7nW3td5u9PgK+tqfd8Tw8HS+Hw2b4b3u43P7p19f2eMvz9qRXtRZ2x3dNFX7sDzuj62ZqHeabklDsrUlyGgXl0RDnDTFw6gbdLiaD1vSDghYUhdGHQKMgRX4QpHmBtFy6QVqb+kDSHhR5XpEEs5hTngSP01AWJlIXHoOglOYMPG8oWbqg5LqiPY8d4PnfXxpBilhISsRrDJLDWExldhZj+KeKyDWjIOWunv5GIQ1rodscr1K0NN4WLc8rFgy6RcJAuczeWHFhRUppmE6uNE1nq4+KhbISxgYhMpWlPmBWbTF3S/rnFlOXpmK8v/V1I8z2IraFcZSxLITDNJ382A1aGImkijWVTDSrWFzUJDwOJYc2J1kqrTDeI/ru1uZKa8mgNTTNJ60y1HEYFFb1IY9lEe8n8y8MJY+jKBJXGdp4k3JMawxpus1TWTWKxONtnuqaUWg5j4WdV7Rv4wO8Ca9pT7g5W171+xX9f3h2r+n/H+2f9Wj7tj89fEJfzXTab18Pu374cTm+3V09//+FK/gE/zp9vu3eL6edmabvcP3zg/RNnkp4tu8nPYwhbvSVyA6jXS1Rr6bnq3XmNw==","names":["get_token_id"],"brillig_names":["get_token_id"]},{"name":"get_token_uri","hash":"99503889585232379","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzY4bRRDu2fHYHnuNTeBBZnbH692bpWwWbkjkCQbbiwRCAQTckObIhccACYmX4MBbREJC4oByyS1SIkVxr7uyn7+pGXvl7vyUZPVMV3VVdf11TTsyG4jcz0IH5hhkbu7G7DDIPfLKIkXP1k1oC166MXXjEeBjjxtPFV188T/PiovU1PfsUf/T1PEMaR/hGYB/1nN8Pqlu+fNeLIzMdnLgmr7Dy/M9WGPhU+At60Pabe3388B2yz8yzbaSmLtfBZF9Kvwvgb/xxz8T/g/C6P+a/1UY/vnQbOJwZfRY82mrkdn2PfpD5OJB4nGfhVa/Y5pD+QMTNicikif6sH3ED2K7RNF1ouAw1xCHchJFzpvixf62MHdjdjc44YmRohPHWRfmPfp1um+cifyBYqMQcdYlfZp8JrbrKbpOFBzHRk+R01PkvE+8JEZHph6zUcMocniO5XC9QzmxRzlIk5CcxKMc5CVnosjpepSDvC6rzSi5jX6duzE7DArh3QfdPObphdiIe3C03wBkc0wOSS/EHQOOfT8CXJdwHwAO84Ehpne0kx2/Br5MJ5Aqcjza93xEeiGw7TX7DkgvxKHt2b5oe7Yv2l7LAwHNvmKnfe07VuR0Sb7w7NC8wGW1GROif+jGwDmS3QO+hmSlyv48yp7xuYgwUvbN8ZOSXojD2OL4wdhCfzFoMSJ0Vq/fgS/TCWgxEhM/rV9FHvKdMlbWdxr0SxRaPr/lfd/YFPqFG60N/nHPNic/ds/lT9989u3i0XL18IdH35dfrj5flcuoQU+2O9PFDXTWh+L/TrVNP3fz2QEwO7+9yIqrWztwTKD8hOi/cu8YizJ2DtDzelbm16fldTktl8tiUXIOWzgCO+G3qMRQl3SR56aapfUGXLO+c+PbrFna/uKW/cXK/u437O9XN1raH/eQNzb18zciHNroiHDa2Sk8JKaSHXsQX2DNszB3Y3YY5Anp87Mb7b7+dc9SHyUv0CYhc3gNhdXjP9ADdb2xX7Vt1yHgYoWea+ixQq+dLxOix3MponfkhT69Il3Fhl2FHvlxHP/iRmubF6Qf5tSAcLj3PuG0byHteywFnX9zz4HvD+7cZ0SEwzzkb/p9e9i2P3O0PkNscdc+g/tPxGnf8lod6pA8zFvh/zbyFr/jOG8xR2OFnvN2V54/qDbjxNR9yfGNOZMSDuX2CId+vyJ5GC/iG8wZPte1ewfZg133B/BDP+L5gWv5DBT6v0CXP93z2NTrGceXVpdYF2P0utd294nxGLCGFFoNiUh2oH5n7/tPkT8w9XwPcf/ZJ304hvheOg3km7YaoN1Hfmg29zDsM9RPeGk9sBbvXGvb+kGt1mq1hOvMPrVE6zm0WjI0d+uVtTrBdQTp/3ajxT+m/aM8rstaTGm1QOhThR7tm5BszImUcFoP0BZb/Ra92s4XTS+MPVzLsnftgXO+ScY7cMZPtTMe985nfFuvbYF9MFLotf57QvRocy0vufdFuUPCYT5xzjb1xY9pH7v+Z5LeQfs/swt8pQfwfR+RnSwXZ6uT9ZXJ7Cw/uVjuuo/wLX8xPftiUUzLbJXfaLNL/lhsUt3iMf4t9Ny73BEwvfBLiP5/oV3/nrhniatEkWfpnrfQRQ3jDQ9lrlNtz6VVnT6u6vQie1DVdRTcEHCYmxaO3TvaC3mJHgnRP3Pv4pM+rJH1E0V+n+Rv6a3MYY4yr1iZE3rrn6fCz424d9991Y1M4o9zrJvEToi8WqfUbFHO8vyiyFdFPt2VV68AYjcOGsUoAAA=","debug_symbols":"tZfRauM6EIbfJde5kGakGamvspSStukSCGnJtgcOpe++Mxn9TrNgwxr2pv9nu/oiySPZ/tw87x8/fj4cTi+vvzZ3Pz43j+fD8Xj4+XB8fdq9H15PdvZzk/xP7ps73W4oReQIiuCIElEjJEIjWkRYOCxslmZBERxRImqERGhEi+iXKCkiLCUsJSwlLMUsYiERGtEi+iVqisgRFMERJSIsNSzVLN2iRfRLSIrIERTBESWiRkhEWCQsEhYNi4ZFw6Jh0bBoWDQsGhY1S86Wpsm03bQ0Mo+kkabKbFlG1pEyUke2kT2yp5F5JI10X7EsI91nN7bLSB3ZRpqPrB852QliBz9jLXNOgAwgAAPsZ6g6mJfEoQH6AC/QgAwgAAMKwPpL6iAABTRAH+BFG5ABbm4ODCiAChCAAhqgD/AKpu5AAAYUQAUIQAEN0Ad4TQfAXGH2yubkUAAVIAAFNEAfIJhewfQKplcwvV7MbNWYvYDZb7eXcEABVICMSvBSDkBteDVfwMs5IAMIwIACqACYG8wN5gZzh7nD7CV96bzXNF/OKKCNPnsZO1BKgAzwIRcHBhSAD7k6CEABDc1hzjBnmDMBGFAAFSAABcBMF+HX13aDvf3h/bzf+9b+bbO3R8Db7rw/vW/uTh/H43bz3+74cfmnX2+70yXfd2e7arWwPz1bmvDlcNw7fW2vrdN8U2rcRmtqtU2CemvI84achIfBtgueDFbTNwpaUFRBHxJNAs5yI+B5gfZSh0F7v/aBtN8oyryCFbNYuFwFt9NQFybSbjwGQcxzBpk31KJDUEtb0V6mDsj87y+NgDNuJDHJGoMWTCJpnZ3FnP6pIksrKEj9Vk9/o9COe2HbnKxSdJ6WRS/zigWDbZEwUKmzCysv3JFaO6ZTGl2ns7dbxUJZqWQsLb2WpT1gVm0x0me3mLY0FdP6tteNNNuL3BfGUaeyUEnX6ZTbbtDCSJQb7qkWolnF4k1llWkoJfU5yVJppWmN2LtbnyutJYPV0HU+aZWhTcOgtKoPhVBY+ftk/oWhlmkUVfMqQ58WqWReY+DrMue6ahQs0zLntmYUVs5TYZcV7fv0AO8qa9oTFmcvq36/of83z+41/f+j/b0d7Z4O55tP6C83nQ+7x+N+HL58nJ6+XX3//w1X8An+dn592j9/nPduun6H258fZG/yVNO9fz/ZYU55a69Efpj9as12le+/vDO/AQ==","names":["get_token_uri"],"brillig_names":["get_token_uri"]},{"name":"get_total_minted","hash":"8517899980073136552","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7VUXQuCMBTdyqhlvlhQP2Oioo8+9B7ULxhOewojomd/ehPu2HWkBM4D495557nnHj8oMaAQPdIHJX+Ajlw7QWQQF6i+VKuAPZ+GiFl9XfLnPEnZj/kc6o8ZcNJ5+Lnmn8l/vgaec2v48Sy670atHcoDyIOR++fUrp5twhCna36FaD+gv4MPPoTWrPibcqQj7Xw/AJf4PC7PspHV7d28xL26VkLinrZeYtVwTgfOBWT4PfCJ+Sd4bd+XwsG8Wc657rsE/hUxvmN4qI7PH2G/Rfp19CborDMR1bGoRSqkTEoRWvzE8ukL7622W6kFAAA=","debug_symbols":"fZLdzoMgDIbvhWMO+Nd5K8tiUHEhIWgYfMkXw70PFnFy4E5aSvs+tKEbmNQQnr228/IC3X0Dg9PG6GdvllF6vdh0uwGUDWag4xBgnlyMEJSK3julcsFJkkCrdMp60NlgDAR/0oRP0WuV9uO9dCmLIFB2Sj4BZ21UPkX4VaNrKSWC7WpK2tsB4DUBXxMwZnwnYNx8W8CCVghyjWh4W5poBOIHQtRN0B8E2tJCYIRcEdivMWgjjjkYulWMR4rkqF31ozHTnJaDUXs4Bzuesv5/LZmyEatbRjUFpzLptBbJ3nELCX3E/Nob","names":["get_total_minted"],"brillig_names":["get_total_minted"]},{"name":"has_profile","hash":"8745444179823187033","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzY7bNhCmVpZt2evaTfsgktde794MZLPtrUDzBKrtbS9piiIoetS9lz5GCxToS/TQtwhQoEAOQS65BUgQ0+ZkP38ayV6YzM8ABiXOcL7hcGZI0ZHZUuR+llrQxyR9c9dmx1HuUVcWKXY2TkIbELmH1L2fAD/2OPFUscWX/otscpma6pw92n+WOp0h/SM6A+jPOk7PV+Wtfp6LpYHZTQ4c03V8eb4HYyx9DbplfEi/rdf9IrDf8i9Mva8k5u6XQbDPRP8V6Df+9Gei/0EY+9/pvw6jP++bbRz+YPRY8+mrgdlde1wPwcWNxOM8J1r9jqkP8XsmbE5EhCf2sH9kHcR3iWLrSOFhriEPcRIF533p4vW2NHdtdjcac8dAsYnjrA39Htd1emicCX5P8VGIOGuTPXVrJr7rKLaOFB7HRkfB6Sg4n5IuidGBqcZsVNMKDvcxDtc7xIk94qBMQjiJRxzUJXui4LQ94qCuq3LbSm7jus5dmx1HY9HdBds85uml+IjP4Oi/HmBzTPbJLuSdAo/XfgC8NvE+Ax7mA1NM7+gn2/4IellOKFVwPPr3YkB2IbHvNf/2yC7koe/Zv+h79i/6XssDIc2/4qdD/TtUcNqELzpb1C90VW7bhOQfujZwjmT3QK8hrFSZn0fsGe+LSANl3hw/KdmFPIwtjh+MLVwvJi1GRM7a9SfoZTkhLUZi0qedV1GHfKcMlfGtGvsSRZb3b3k/NDZFfuFa64P/3LPNyS/dc/HLo29+Wjxerh4+efxz8f3q21WxjGrsZL+zXFwjFxvdlygbm+q8Y0UHjjshHTZWJM5a5a6euevPjqDZxe2FWez0J6Yae4ifkPwj944xL23rCDtvZkV+c1bcFNNiuZwsCq4VBvzF37wSq22yRZ7raqN2BuHa+MS1H7I2avOLG+YXK/O7XzO/311rZX89AG9I4zGmh4qPToin7dGiQ2Iq2TMHWQusrZbmrs2OozwhexzsZl7/u2epw5IX6JOQObymibXjGdiBtm78V+76tQ+8WJHnWn2qyGv72Ijkcf+L6B114Zpek63iw7Yij/o4jn9zrfXNG7IPc6pHPJx7l3jaN5f23ZeCzX+458D3FHc+z0TEwzzku4NDz8pNfxpp5xnxxV3PM3zORZ52Z6DVoRbhYd6K/g+Rt/i9yHmLORor8py3+/L8QbltR6a6lhzfmDMp8RC3Qzxc92vCw3iRtcGc4X1du9+QOdhxf4E+XEfcP3As74Ei/w/Y8rd7HppqPeP40uoS22KMXvea7lgxHgPWkIlWQyLCDnTeOfieVfB7pprvIe5Zu2QPxxDff6eB1qapBmj3np+b7X0PrxnaJ7q0M7AW71xrm86DWq3VagnXmUNqiXbm0GpJ39ztrKzVCa4jKP+vay3/Kc0f8bguazGl1QKRTxV59G9C2JgTKfG0M0BTbHUb7GraXzS7MPZwLGPvmwPnfB3GR7DHT7U9HufOe3zTWdsSr8FAkdfO3yOSR59reclnX8TtEw/ziXO27lz8lOax7/8sOTto/5u2Qa+cAXzfR2Tj5eJ8NV5fmczO8/Hlct99hG/8xfT8u8VkWmSrfGPNPvyh+KS85WP8W+q4d7kjYHnRl5D8c5Fd/164Z4mrRMGzcq8b5KKadqND6WuVu31pWZWPy6q8YPfKqo3C6wMPc9PSqXtHf6EusSMh+VfuXdakC2Nk/EjB7xL+jt1KX+X+UJHvK/J2fV6KPtfi3H2fqzaYpB/72DaJnRB5tU6p2aKY5fnlJF9N8um+vHoLkTlUpi0pAAA=","debug_symbols":"tZjtauM6EIbvxb/zQ6ORNFJvZSklbdMlENKSTQ4cSu79zGT02smCza7h/On7OK4f62MkO/ke3nevl58v++PH56/h6cf38HraHw77ny+Hz7ftef951E+/h2B/qA1Pshli8CCP6MEeySN7FA/xqB5uYbewWqpG9GCP5JE9iod4VI92ixQ83JLcktyS3JLUUjSKh3hUj3aLHDzII3qwR/JwS3ZLVkvTqB7tFiV4kEf0YI/kkT2Kh1uKW4pbxC3iFnGLuEXcIm4Rt4hbRC1EmqqhuBlq6Ek9Y09VEWumnrln6Sk9a8/m2UJP6hl7mi9ppp7m04ltpaf0rD3VF7UdFFQYkwEBYgeyT7KBfVIMGJAAGVAAeqeodyAr0FgNCBABDEiADCgAAWiTYzNoHaxoHQgQAQxIADVzMCgAAVRA62CF7ECACFAhk0EGFIAAKqB1sJp2IEAEMADmDLPVN9vsWIU7VEDrYHXuQIAIwPAWDG/B8BYMr5U0s4Hd1KbbCtlBABXQeiVYOTugNqygHRiQABlQAAKoAJgbzA3mBnODucFsVX1rvJU1Z9sMA4C8zdHK2IEBCWBdLgYFIADr8m13bR0oAGAmmAlmgpkyoAAEUAGtgy0QB5jjTXi9bgZs+y/n025nu/7dc0CfDl/b0+54Hp6Ol8NhM/yzPVxu//Tra3u85Xl70rNatrvju6YKP/aHndF1M10d5i9lFlzN3GgU5EcDzRsoFO4G3Ul4NGi5PyjigiKXbtDZHAVM5UHA8wJpKXeDtDa1IUp7UKSFgRjHIenMjILHYcjz1+vkogk6vTxnKPOGnKQLcqorri9jA8r8/Zd6wISJjBzLGoMkDGKUPDuKFP5XBZWaUJByV09/o5CGudAdsKxSNB6XRUvzigWD7p4wxJRnFxYtzEjODcNZapyGs9VHxUJZSSEsLZnKUp89a7aYdDcfv28xdWkoxvWt7x1hthXUFvqRx7KQEqbhLI/NiAs9Ea6YU0kxzioWJ5WljF1Joc1JlrsiU1dimG3Hwo6ZJWKzqVMbmNOfziqFcaFSuFPEP3706DtlmiY1rjLUcSxjWNWGFFHddD+jf2HIaexFFlplaONOUYjXGHjaaziv6gWXca/huqYXuqbGkkwrrm/jW0STsub6iB2ipVX3r2j/wwvEmvb/dv2zHm3f9qeHr/hXM53229fDrh9+XI5vd2fP/37hDH4i+Dp9vu3eL6edmabfCfTPD31gb2LmZ/tap4e6ODcUmh2SndWFFnN5vlpj/gM=","names":["has_profile"],"brillig_names":["has_profile"]},{"name":"is_username_taken","hash":"2214066403043226921","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzW4TSRDuyXhsjx2vvew+yExix8nNEiG7t5WWJ5i1HS6LWC0IjsyZC48BEhIvwYG3QEJC4oC4cEMCCXfcRT5/rhk7cjc/JVk901VdVV1/XdOOzBIi97PQgDkGmZu4MdsNco+8skjRs3YTdQtS97oH07HHjaeKLr74H2fDk9Ss79mj/oep4xnSPsIzAP+s5fj8UV7y571Y6JnV5MA1bYeX52uwxsKfwFvWh7Tbwu/Hge2W/2aqbSUxd70MIvtQ+J8Cf+OPfyb8b4TR/yv/szD8865ZxuEto8eaT1v1zKrv0R8iFw8Sj/scavU7pjmU3zFhcyIieaIP20f8ILZLFF0HCg5zDXEoJ1HkfCte7G8LEzdmV4MDnugpOnGcNWHeo19H28aZyO8oNgoRZ03Sp8pnYruWoutAwXFstBQ5LUXOz8RLYrRn1mM2qhhFDs+xHK53KCf2KAdpEpKTeJSDvORMFDlNj3KQ12m5HCW30a8TN2a7wdfesg26eczTE7ER9+Bovw7I5pjskl6I2wcc+74HuCbhfgEc5gNDTO9oJzveBr5MJ5Aqcjza97hHeiGw7TX7dkgvxKHt2b5oe7Yv2l7LAwHNvmKnbe3bV+Q0Sb7wbNC8wGm5HBOiv+nGwDmSXQO+hmSlyv48yh7zuYjQU/bN8ZOSXojD2OL4wdhCfzFoMSJ0Vq+nwJfpBLQYiYmf1q8iD/lO6SvrGxX6JQrtXoXcbWNT6KZutDZ47Z5tTv7unov7t//6b3pnNr95787/xa353/NiFlXoyXZnuriCjvGJwlf2u2eqfWDBxoPEUqNcpZm4+WwHGB9fXorF5aW+HF8oPyH6f907xrWMjR30PB8X+flhcV6MitlsOC24Hoj9xE74XSvx2CRd5Lmq/ml9Bte/u278nvVP219cs79Y2d/1iv09dqOlfbCFvD6tx3juKzbaI5x2DgsPialkwx7EF1g/LUzcmO0GeUL6PHSj3dcb9yy1VvICbRIyhxcwtHq8BT1Q1wv7lat27QIuVui5Hu8r9NpZNSB6POMiekde6NMz0lVs2FTokR/H8SM3Wtt8Jv0wpzqEw723Cad9V2nfdino/MQ9B76LuHLPEhEO85DvB7bth+v+GNJ6FrHFVXsW7mURp90LaHWoQfIwb4X/98hb/CbkvMUcjRV6zttNeX6jXI4Ds+5Ljm/MmZRwKLdFOPT7GcnDeBHfYM7wua7dYcge7LpnwA/9iOcHruUzUOhfgC7P3XPfrNczji+tLrEuxuh1r+4eFeMxYA0ZajUkItmB+p2t71JFfses53uIu9Q26cMxxHfcaSDf1NUA7W7zV7O802GfoX7CS+uBtXjnWlvXD2q1VqslXGe2qSVaz6HVkq65Wq+s1QmuI0j/0o0W/4r2j/K4LmsxpdUCoU8VerRvQrIxJ1LCaT1AXWy1a/SqO180vTD2cC3L3rQHzvkqGT/AGT/SznjcO5/xdb22BfZBT6HX+u8B0aPNtbzk3hfldgmH+cQ5W9UXv6J9bPrPSnoH7b/RJvCVHsD3fUR2MJsezQ8WVybjo/zgZLbpPsK3/Ono6J/pcFRk8/xCm03y+2KT8hKP8W+h5d7ljoDphV9C9O+EdvF7754lrhJFnqX7VEMXVYwXPJS5Rrk6l5br9HG5Ti+yO+W6joLrAg5z08K+e0d7IS/RIyH6j+5dfNKGNbJ+oMhvk/wVvZU5zFHmFStzQm/980H4uRH37ruvupBJ/HGOdZPYCZFXi5QaT4txnp8M8/kwH23Kqy9OiJvTESkAAA==","debug_symbols":"tZjbbuJKEEX/hWceXNWX6sqvjKKIJGSEhEjEhCMdRfz7qaJ6GziSrYlH85K9bKcXfaluLl+r1+3z6efT7vD2/mv18ONr9Xzc7fe7n0/795fN5+79YHe/VoP/IV09yHrFQwRFcESKyBElokZIRIsISwpLMkuz4IgUkSNKRI2QiBahl8hDRFhyWHJYcliyWapFjZCIFqGXKEMERXBEisgRYSlhKWZRixahl6hDBEVwRIrIESWiRoSlhqWGRcIiYZGwSFgkLBIWCYuERcxCZGka4vWqDT2pJ/c0FSXL3LP0rD2lZ+upkTr0pJ7c033ZMvd0ny2s1p7Ss/U0H1s/aDAhZwczspmI/E5x8DvVgQEJkAEFYC/E4uBmW3DyAg0gAAMSIAMKoAKsx6wODaAdvGgDCMCABDBzGhwKoAIE0ADawQs5gAAmTOSQAQVQAQJoAO3gNR1AAAbAXGD26k6+KF7fAQJoAO3gdR5AAExvxfRWTG/F9HpBJ19lL+Lk6+5lHFABAmi9EryaL9BQG17PAQxIgAwogAoQAMwNZoVZYVaYFWYv6kvnvarT5Y4GsJex95m9jAMYkAA+5OpQABXgQ74cqg2gHQhmgplgJpgpAwqgAgTQANqBYeaL8Hxer3DaP30et1s/7G+Of3tT+Ngct4fP1cPhtN+vV/9s9qfLP/362Bwu+bk52lMr2+3h1dKEb7v91um8vrYeppsm28e9dbKSHQXl3kDTBhpq6gY7QNJosCq/U/CMoqAPtoijIFG9E6RpgWgu3SCq1z6w6J0iz0yEYBazrcwouJ+GMt2erRQwCE5pylCnDSVLF5TcFrSvYwfq9OvPjSARFpIT1yUGyZhEljI5izT8VQXVllGQclNP31GIYi3s4KuLFJrGbaF5WjFjsEMTBs5lcmPRzIqUopjO2vg6ndruFTNlJZWwteRalvaWs+iIkekjps1Nxbi/ydZ0shekM+MoY1lIHa7TWe+7wTMjkdSwppKZJxWzi5qkjkPJg05J5krLPjfo6Chys0vKfUdmjkwdz1zV65pwpd/uxTDuVBqaThX4/DjydVV5kaGNk8nDoj5kRnnT7ZJ+w1DyOIpyU97fMeh4VFRKSwzpetiksmgUqY6HTWpLRmGbatxeeUF7HT9GqNQl7RlHhOZFr9+GcUOkP+v//9o/2tXmZXe8+2p/dtNxt3neb/vl2+nwcvP0898PPMFPAx/H95ft6+m4ddP19wH788PevNdc+NG/19klDWltu9IvyZ+WZE/L49k78x8=","names":["is_username_taken"],"brillig_names":["is_username_taken"]},{"name":"mint_profile","hash":"8507540504000919856","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"username_hash","type":{"kind":"field"},"visibility":"private"},{"name":"ipfs_uri_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"927969722087551220":{"error_kind":"string","string":"Address already minted profile"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10226152426468428447":{"error_kind":"string","string":"Username already taken"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["mint_profile"],"brillig_names":["mint_profile"]},{"name":"public_dispatch","hash":"8687619491868992613","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"927969722087551220":{"error_kind":"string","string":"Address already minted profile"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"4802591818712997969":{"error_kind":"string","string":"No profile found"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10226152426468428447":{"error_kind":"string","string":"Username already taken"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"sync_notes","hash":"18033952461494083975","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"nZPdjoMgEIXfZa69QP7xVZqmQcWGhKChusnG+O6LDbS6CZtNbxhw5nweYFihN+1yv1k/jA9oLiu0wTpn7zc3dnq2o49fV0D7UBNoSAU1hYbFwKARMXBo1LZVkOtvczBmLz8AInbSwfgZGr84V8GXdsuz6DFp/4yzDjGLKjC+jzECB+vMPtuqtxqVpTWitUzyOBfihVDsxKjLDCF5IkhEX3qOT3pc1jPMkp6x9xZqIv5rQBKRDTBVMkDLekpU0lMuPzIgaTagZMkAL+s5yifAMf/EgMI4ARRhJQPyDwMy95BAv67gGpe6s+HU2tuOCla3zqTlsPjukJ2/p5zJT2MKY2f6JZiddHgfcbzEHsTkuu1/+wE=","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"update_token_uri","hash":"5626423106344203070","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"new_ipfs_uri_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4802591818712997969":{"error_kind":"string","string":"No profile found"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1aT2/rRBBf17ETJy3N44GEBBISJ452GjetBFKll0I5IcGBs5ukiAM8VD1x4uAzEhInDty4c+FjgITEl+DAt6Db7iS//Dx2ktbL09N7I1Vre2bn387Mzm4amBUEbuzQu1FoztyYPgyyFnmlqqJNIDTvuofEve8BPmzR2ITktsn/JB0XiWJfi/ofJY6nT/8ITw/8067j80m54s+2WDhw7xhDMqd387dvVs+P3XNCc3ysrUffp48V/ffANgtPSi+yj4T/FPibFm0T/ud+9F/y/8jx96H7x358s6xJF358kw3MXZ5MHD+bO4fuufju60+/nT2dLz5ffDNfXGO6cag3AZeNFt0zEt6R8eKeYyk1sWKX4LokG3G9Lf0V0jvaZHl8CHyZjvXB/qBLtCInIloLkh4Bye8o8y1My3VeQv8e6P2De7Zh9YZ7XoXVs6fXxZeLzxbFPKjRk33FdHW9UGj0uEDaUOERKTzCBnkR0bzvRmv7j+7ZY/yPX8V/VZ+m+Bcdtol/0amjzLcwLdd5CX0OemP8v+meOf6/uP7q2cIQ7JHiHXoPFDoEW9dl7+iUq3ltBcfkJE2XiVSuHBEqunQAj/QfuPc+2IX2nt1Tz6tJkV0dFVdFXszn41nxOvFHv/H+d2CqySrzElMNsBaTbRwoeoY1vhG/eezHs8BUY4+LIvpSfBcpug5NtcDWbTgoJ1Lk/F+8eL0tnLkx3Q1G/OFAkctxFsP3Ftc13zbORH7feN1klnEWkz51a6ZtPDJ3aKqFn2Ojq8jpKnJeFF4Yo7wJCl4bRQ5/YzlaA9hUJ+8rB2kikhO1KAd5nZfrcuIW5SCvaXk3Sm5z03Tm3tOHwQk3XgiCw3sujps+6YW4AeB4ffYBFxPuAHCaLwW0JlD8ZO35CfgynYDPe54bmHDtQdCaXvZvQnohDn3P/kXfs3/R97s22UK3rX8PTdW/MfETHTqKHAvT8m6MiP57N3rOkZT7QZT1MsXPfWLkT+DLdAJajITELySZHCNy3yW8trkHRjprb9vninQ0nx0vRjdHn8lxNjqdbzpXtC1/PCqOjy7naX55mi/SPNvlXCN+jEkXY6r9B37X9rCI6H92o+QOxq/vvO012Bc22Bcq9j2pse93N1raX7aQd2iq9SsgnHYxIjhtfxYeElPRljYI/a9utHJDp4zksJzHuQ5a6JTr9p257+nDYGz1iEEP1PVW/3Ld7gHgQoUe6wPuiUiv1cChqe6hEfHSzpLo8wvSVXwYK/TIj+PsNzda37wTrOuHMd8n3dH2HuG0nlrr6xPQ+Q/37PkcuvNeGBAO84TPhtv2sU0/pmt7ofhi172QeyTEdRU7tDrRIXmYt8L/eeQt/q7NeYs5Gir0nLeb8vy8vBuHprqWHN+YMwnhUG6XcLjuFyQP40XWBnOm7j5RO3PaeX8BP1xHrO84l+u70P8Duvztng9NtZ5xfGl1iXUxRq97dedqjkePNWSs1ZCAZHvqR7a+RxP5fVPNdx/3aD3Sh2Noj/yTeFqbphqg3Ws9uvl7zVTXDPUTXlqPqsU719qmfk2rtVot4TqzTS3Reg6tlgzMbr2sVie4jiD9v26MhbBGHtdlLaa0WiD0iUKP/hVdtT0wIZzWAzTFVq9Br6b9RdMLYw/nsuxNNmg/kjb1+89xj8+1PR5t5z2+qde2wGtwoNBr/feQ6NHnWl5y74tyB4TDfOKcreuLRVjT/oh1VnoH7XexGPhKD9D2fcEsP76cjfMiXWT2dbTpvkD+7ycuwa5yfU7XvcsZmunxB3ak7wcre/chtm5pFXmW7u0GuqBmvOWhfOuU69+SskofllV6kd0vqzoKbgA4zA0L++4d/YW8RI+I6N+C2myhB3Nk/lCR3yP5a3or3/i+eKDQDxR6uz6P3KTlnQTIbruvuZVJ/PEb6yax4+UeLi8ms2KSZafjbDHO8k159R+PyaDnxS0AAA==","debug_symbols":"tZjbTiM7EEX/Jc95cJXLN35lhFCAMIoUBZSBIx0h/v1UxbW7k5Hc4vRoXrJXE3q1L2U7yefmef/48fPhcHp5/bW5+/G5eTwfjsfDz4fj69Pu/fB60r9+boK9sL7G7YZpc5c0uEfsIT1Sj9yj9Kg92iWiWqoG9eAesYdaSB8RVUP2v9mzeKqJsmbrKeoivU/Ikz2jp3gmz+xZPKun+pi2mxQ8yZM91cf6vKzXUa9z9BTP5Jk9i2f1bD1L8CRP9xXzsaZ4Js/sWTyrZ+tZgyd5sqf7qvuq+6r7qvmCZvVsPVvwJE/2jJ7imTyzp/ua+5r5dB4pBAABGBABAkiADCiACoCZYCaYCWaCmWAmmAlmgplgJjNrjdGlzLMBARgQAWYuBgmQAQVQAc3BSr8DARgQAWauBsnBijc2A32EBIMCqIDmYBXcQR8hZKBCYYMEyIACqIDmkAPAPDY+VvsdIkAACZABBWBmMWgOtgY6EIABESCABDChzY4tgQ7NwRZBBwIwIAIEkAAZAHOF2VaD2CzbcuhAAAZEgAASAMPbMLwNw9t8eNlKXYqBvVUNmoMVdgcCcC8AvhT2BQSQABlQABXQHC6FfQECwMwwM8wMM8PMMFs9Xxpv9Sz2F6veDuJtturtkAEFYMdBMGgOto13sKOFDBgQATALzAKzwCwYTMFgJgxmwmDalt4hAmC+rIv69bXd4Ox7eD/v93b0XR2GekS+7c770/vm7vRxPG43/+yOH5d/+vW2O13yfXfWd7VD+9OzpgpfDse90dd2vjuMb9WJYb9bZ2QWpFsDjQ1So7hBqvBkyLcGHhtqKmhDTbWMDEu9iHaW917EKKNeyNigJwEMus/HyaCb2rcVuq6h0NoZKvJYkVLDXObKcz9avTGUsaFkckEpdW5CjquGUspoKNvSONje5kNZwrARtNCKkiqKquSQRiVBC3VZYkVHivCwLomXehJLnroioQ0li10pc1c4DBULlTWvj1TnNlihf3tSc54mtQwndckgtiF3g6Q23CfKny+xRcc31xi1P15kHP7mKrsezhJHw8lLxSkBjSDhMmwFx4WdN0TURQ2pDvfuhdosdepJqW1Y3pwWN4w67xiJ84oTQD9qYjzDvNYj5dtWLO2cbdq2SmvzlHBpt446dsSCypKrU4h/G4q2dBxTmo7jGEeKuDASyT4w9c1C6hpBnpqQxy1Y7MT1EXI1m/9HUQQjySUNhzLKX1Xodwps3XqQ8SpFaZgO/daQVylanPbNJkPF0uII01Do99u2xqAb7Hym8ypDnY5SDqvaIHy14a1qQ5KpF6nQKkOb5iJTXGOI82zGtKoXMU9nYKxreqEfqaZPJLLi/jYd5K2sqcfG2GGarHp+RftvNuo17f/t/nu92j0dzje/SX6Z6XzYPR73fvnycXq6evf93ze8g980386vT/vnj/PeTPMPm/rygzNvucZ7+41JL1Pa5mAXZO/phsM1339ZU/4D","names":["update_token_uri"],"brillig_names":["update_token_uri"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"AztlanNFTProfile::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"AztlanNFTProfile::get_address_by_username_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::get_address_by_username_parameters","fields":[{"name":"username_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanNFTProfile::get_profile_by_address_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::get_profile_by_address_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AztlanNFTProfile::get_token_id_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::get_token_id_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanNFTProfile::get_token_uri_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::get_token_uri_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanNFTProfile::get_total_minted_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::get_total_minted_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"AztlanNFTProfile::has_profile_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::has_profile_parameters","fields":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AztlanNFTProfile::is_username_taken_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::is_username_taken_parameters","fields":[{"name":"username_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"AztlanNFTProfile::mint_profile_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::mint_profile_parameters","fields":[{"name":"username_hash","type":{"kind":"field"}},{"name":"ipfs_uri_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AztlanNFTProfile::update_token_uri_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AztlanNFTProfile::update_token_uri_parameters","fields":[{"name":"new_ipfs_uri_hash","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"AztlanNFTProfile"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"username_hash_to_address","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"has_minted","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"token_id_of","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"token_uri","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"total_minted","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"next_token_id","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}}]}}]}]}},"file_map":{"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\npub contract AztlanNFTProfile {\n    use dep::aztec::macros::{functions::{public}, storage::storage};\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n\n    #[storage]\n    struct Storage<Context> {\n        // Username mapping (untuk cek unik)\n        username_hash_to_address: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n        \n        // Cek apakah address sudah mint\n        has_minted: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        \n        // NFT Token ID per address\n        token_id_of: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n        \n        // IPFS URI untuk NFT image & metadata\n        token_uri: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n        \n        // Stats\n        total_minted: PublicMutable<Field, Context>,\n        next_token_id: PublicMutable<Field, Context>,\n    }\n\n    #[public]\n    fn constructor() {\n        storage.total_minted.write(0);\n        storage.next_token_id.write(1);\n    }\n\n    #[public]\n    fn mint_profile(\n        username_hash: Field,\n        ipfs_uri_hash: Field  // Hash dari IPFS URI\n    ) {\n        let caller = context.msg_sender();\n        \n        // Validasi 1: Address belum pernah mint\n        let already_minted = storage.has_minted.at(caller).read();\n        assert(!already_minted, \"Address already minted profile\");\n        \n        // Validasi 2: Username unik\n        let username_owner = storage.username_hash_to_address.at(username_hash).read();\n        assert(username_owner == AztecAddress::zero(), \"Username already taken\");\n        \n        // Get token ID\n        let token_id = storage.next_token_id.read();\n        \n        // Set data\n        storage.username_hash_to_address.at(username_hash).write(caller);\n        storage.has_minted.at(caller).write(true);\n        storage.token_id_of.at(caller).write(token_id);\n        storage.token_uri.at(caller).write(ipfs_uri_hash);\n        \n        // Update counters\n        storage.total_minted.write(storage.total_minted.read() + 1);\n        storage.next_token_id.write(token_id + 1);\n    }\n\n    #[public]\n    fn update_token_uri(new_ipfs_uri_hash: Field) {\n        let caller = context.msg_sender();\n        \n        // Check user has profile\n        let has_profile = storage.has_minted.at(caller).read();\n        assert(has_profile, \"No profile found\");\n        \n        // Update URI\n        storage.token_uri.at(caller).write(new_ipfs_uri_hash);\n    }\n\n    // VIEW FUNCTIONS\n\n    #[public]\n    fn get_profile_by_address(user: AztecAddress) -> bool {\n        storage.has_minted.at(user).read()\n    }\n\n    #[public]\n    fn get_token_id(user: AztecAddress) -> Field {\n        storage.token_id_of.at(user).read()\n    }\n\n    #[public]\n    fn get_token_uri(user: AztecAddress) -> Field {\n        storage.token_uri.at(user).read()\n    }\n\n    #[public]\n    fn get_address_by_username(username_hash: Field) -> AztecAddress {\n        storage.username_hash_to_address.at(username_hash).read()\n    }\n\n    #[public]\n    fn is_username_taken(username_hash: Field) -> bool {\n        storage.username_hash_to_address.at(username_hash).read() != AztecAddress::zero()\n    }\n\n    #[public]\n    fn get_total_minted() -> Field {\n        storage.total_minted.read()\n    }\n\n    #[public]\n    fn has_profile(user: AztecAddress) -> bool {\n        storage.has_minted.at(user).read()\n    }\n}\n","path":"/root/x/aztlan/contracts/aztlan_profile/src/main.nr"},"60":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"62":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"88":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"95":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"98":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"137":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"154":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"163":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"261":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"279":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"316":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"334":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"335":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"354":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages.git/alpha-testnet/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}